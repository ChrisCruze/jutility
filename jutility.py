
#analysis_functions.py

# The goal is to utilize pandas (particularly the resample thats built for time series)
import pandas
#http://pandas.pydata.org/pandas-docs/stable/cookbook.html

class AnalysisFunctions(object):


    def aggregate_values_from_key(self,l,k):
        def func(i):
            try:
                return float(i)
            except:
                return 0.0
        v = sum([func(D[k]) for D in l])
        return v
#bs_commission_function.py

#from Shippy.Functions.BSCommissionFunction import PercentageCommissionApply

"""
	Input the lst and the Quota, and this creates the ascending 
	list of opps for their amount. 

	Requirements: 
	List must be a dictionary and must have an amount 
	associated with it



	Input list of New Business and Upsells within the entire quarter 
	Input their Quarter Quota
	Input The Threshholds for New Commission Percentages
	Output list with percentages

	Filter out for the month after
"""
from Shippy.Functions.commission_functions import *


#Take in a list and apply commission percentage to the amount
class AscendingPercentageApply(object):
	#Returns list of Opportuntiies in a Quarter with the Commission Percentage Appended
	#Pulls the list of Opportunities for that Brand Strategist
	#Gets the Amounts out of that Dictionary #[13000.0, 5400.0, 20000.0, 48000.0, 20000.0, 28000.0, 6000.0]
	#Uses those amounts to create teh Conditions List [[0, 3, 0.2], [4, 7, 0.5]]
	#Applies that ConditionsList ot the List of Dictionaries which adds the CommissionPercentage to it
	
	#Dict Criteria should be like {50000:.2,100000:.5,110000:.7}
	#Dict Criteria is what determines the commission amount for that brand strategist on new business and upesll - new
	
	#Determine the DictCriteria, which is the criteria used to determine 
	#commission percentage on the new business and upsell - new
	#Turn all the amounts into floats
	#Then pass it into Condition List with teh Amounts and the Dict Criteria
	#The condition list is the list of dictionaries with commission percentage 
	#applied to it, and is the looper that determines the percentage on 1 deal
	def AscendingPercentageApply(self,lst,Quota):
		DictCriteria = self.DictCriteriaCreate(lst,Quota)





		Amounts = map(lambda Dict: float(Dict['amount']),lst)
		ConditionList = CommissionsFunction().ConditionList(Amounts,DictCriteria)
		lst =CommissionsFunction().PercentageApplyfromIndex(lst,ConditionList,CommissionsFunction().DictUpdateFunc)
		return lst
		#[{'CloseDate': '2014-04-01', 'Amount': '24000.0', 'Type': 'Renewal', 'name': 'Estee Lauder 2014 (Clinique, Renewal)', 'Commission Percentage': 0.13},

	#Create Function to create the DictCriteria based on their Quota
	#To determine their Quota  #Middle number doesnt matter actually
	#{First Quota * 1.2:.13, Quota * 1.6: .16, Quta *1.6: .2}
	#Their Quota times 1.2 or times 1.59, will determine what commission they get
	def DictCriteriaCreate(self,lst,Quota):
		Dict =  {Quota * 1.2:.13, Quota * 1.59: .16, Quota *1.6: .2}
		return Dict
		#{1200.0: 0.13, 1600.0: 0.2, 1590.0: 0.16}


"""
	Create Function to apply percentages to Renewal and Upsell
	Renewal of 2%, which is a simple over write
"""

#Input [{'CloseDate': '2014-04-01', 'Amount': '24000.0', 'Type': 'Renewal', 'name': 'Estee Lauder 2014 (Clinique, Renewal)', 'Commission Percentage': 0.13},

class RenewalUpsellCommission(object):
	#Update .02 to each dictionary if the type is renewal or 
	#upsell renewal
	def RenewalUpsellDictUpdate(self,Dict):
		if Dict['type'] == 'Renewal' or Dict['type'] == 'Upsell':
			Dict.update({'Commission Percentage':0.02})
		else:
			Dict.update({'Commission Percentage':Dict['Commission Percentage']})
		return Dict

	def RenewalUpsellListUpdate(self,lst):
		lst = map(self.RenewalUpsellDictUpdate,lst)
		return lst


"""
	Create Function to apply 0 percent to deals with opt out 
	period greater than 180

	Opt_Out_Period__c <= 182, then apply 0%
	Opt_Out_Period__c > 182, then apply 50 of the commission percentage
"""
class OptOutCommission(object):
	#if it opt out period is less than 6 months, you get it all after opt out date passes
	#if opt out period is after 6 monthhs, you get 50% now and later
	#If input are opt outs, then true. If inputs are not, then false
	def OptOutDictUpdate(self,Dict,OptOutInput=False):
		#print "Opt Out Dict: \n\n"+ str(Dict) + "\n\n"
		#THIS SHALL ONLY APPLY IF THE INPUTS ARE THE OPT OUTS
		#OPT OUTS THAT ARE IN THE QUARTER THAT ARE LESS THAN 180 days are 13%
		#OPT OUTS THAT ARE OUTSIDE THE QUARTER ARE NOT 13%
		#0 Percent if opportunity is in the close date
		#13% if opportunity is in teh opt out date range
		#GOING HAVE TO DO A MAJOR HACK
		if Dict['opt_out_date'] != '' and float(Dict['opt_out_period']) <= 180 and OptOutInput == False:
			Dict.update({'Commission Percentage':0})
		elif Dict['opt_out_date'] != '' and float(Dict['opt_out_period']) <= 180 and OptOutInput == True:
			Dict.update({'Commission Percentage':.13})
		elif Dict['opt_out_date'] != '' and float(Dict['opt_out_period']) > 180:
			Dict.update({'Commission Percentage':Dict['Commission Percentage']*.5})
		else:
			Dict.update({'Commission Percentage':Dict['Commission Percentage']})
		return Dict

	def OptOutListUpdate(self,lst,OptOutInput=False):
		Func = lambda Dict: self.OptOutDictUpdate(Dict,OptOutInput=OptOutInput)
		lst = map(Func,lst)
		return lst

"""
	Create Commission Column in dictionary
"""

class CommissionAmount(object):
	#take in a dict 
	#update teh dictionary with a new key-value called: Commission Amount
	#have that be the dictionary of commission percentage times amount
	def CommissionAmount(self,Dict):
		Dict.update({'Commission Amount':float(Dict['Commission Percentage']) * float(Dict['amount'])})
		return Dict

	def CommissionAmountList(self,lst):
		return map(self.CommissionAmount,lst)


"""
	Put all the pieces together
"""
class PercentageCommissionApply(object):
	#First run the Ascending Percentage Apply to ensure bonsues as they beat their quota
	#ascending percentage apply takes in the list and quota
	#the quota is important because it follows that once the quota has been reached of 1.2, that its .16%
	def PercentageCommissionApply(self,lst,Quota,OptOutInput=False):
		lst = AscendingPercentageApply().AscendingPercentageApply(lst,Quota)
		lst = RenewalUpsellCommission().RenewalUpsellListUpdate(lst)
		lst = OptOutCommission().OptOutListUpdate(lst,OptOutInput=OptOutInput)
		lst = CommissionAmount().CommissionAmountList(lst)
		return lst




#commission_functions.py

"""
	Purpose is to create a function for commissions since its a list
"""


class CommissionsFunction(object):
	#Purpose is to pull the index of the item that put the list over the target value
	#For Commissions to be able to give them 16% after they hit their target number
	#Loop through the list and add the value to the list of sums
	#if the total of that list is greater or equal to the target value, 
	#return the index
	#returns None if there is nothing there
	#Note if i dont add 1, then it will begin adding the additional 
	#percetage to teh deal that got them over the line
	def IndexLoopAmount(self,lst,val):
		#in case the higher thresh hold is greater than the whole list
		if sum(lst) <= val:
			return len(lst)

		LST = []
		for i,num in enumerate(lst):
			LST.append(num)
			if sum(LST) >= val:
				val = i #+ 1
				break


		return val

	#the purpose is to apply percentages to certain ranges of indexes 
	#this is to apply a percentage to certain item indexes
	#Create function that takes in percentage, index up to, percentage, index up to
	#Input: [0,5,.33], [5,10,.66], [11,20,.77]
	#lst is the list of items
	#LST is the conditions
	#for every item in LST, append the percentage to those indexes

	#This simply applies a function to the items within a certain range
	#The function needs to take in the percentages they need


	#In other words it takes in the original dictionary list
	#the conditions for each of those items in the dictionary list
	#conditiosn are things like this New Busienss Deal is 3%, or Renewal is 5$
	#The function is necessary only so that it can take in the the list with the appropriate commission percenatge
	def PercentageApplyfromIndex(self,lst,LST,func):
		for condition in LST:
			#print lst[condition[0]:condition[1]]
			[func(Dict,condition[2]) for Dict in lst[condition[0]:condition[1]]]
			#print condition[2]
			#func(lst[condition[0]:condition[1]][0],condition[2]) 
		return lst



		[func(lst[condition[0]:condition[1]][0],condition[2]) for condition in LST]
		return lst


	#Create [0,5,.33], [5,10,.66], [11,20,.77]
	#input: Quota1: Percentage, Quota2: Percentage
	#Sort so that amount thresh hold are increasing correctly
	#Applicable Amount is ValuesList
	#Limits is the Quota
	#So for now, just take two varialbles
	#{300:.3,800:.5} --> from 0 to 300, percentage is .3 and from 800 and above charge .5
	#{300:.3,800:.5,1100:.7} --> from 0 to 300, percentage is .3 and from 800 to 1100, above charge .5
	def ConditionList(self,LST,Dict):
		#{800: 0.5, 300: 0.3}
		Limits = sorted(Dict.keys())
		#[300, 800,1100]
		Values = sorted(Dict.values())
		#[0.3, 0.5,0.7]
		lst = [CommissionsFunction().IndexLoopAmount(LST,Limit) for Limit in Limits]
		#[300, 800]
		lst = [
				[0,lst[0],Values[0]],
				[lst[0],lst[2],Values[1]],
				[lst[2],len(LST),Values[2]]]
		print lst
		return lst
		#[[0, 1, 0.3], [3, 5, 0.5]]

	#Create Funciton that can take takes in the BS_Commission and updates it with that function
	#func(arg1,arg2) --- #arg2 needs to update arg 1
	def DictUpdateFunc(self,Dict,item,Keyname='Commission Percentage'):
		return Dict.update({Keyname:item})





def main():
	lst = [50,200,50,50,50]
	print CommissionsFunction().ConditionList(lst,{100:.1,200:.2,300:.3})



if __name__ == "__main__": main()

#csv_functions.py

# from Shippy.Functions.csv_functions import CSVFunctions

import csv
import StringIO
import csv
from Shippy.Functions.performance_functions import PerformanceFunctions
import sys

if sys.platform == 'darwin':
    base_directory = '/Users/Chris/Documents/ScriptData/'

else:
    base_directory = '/mnt/task/'


class CSV(object):
    def list_of_lists_from_contents(self,contents):
        lst = []
        f = StringIO.StringIO(contents)
        reader = csv.reader(f, delimiter=',')
        for row in reader:
            lst.append(row)
        return lst

    def list_of_lists_from_csv(self,filename):
        lst = []
        #f = StringIO.StringIO(contents)
        reader = csv.reader(open(filename, 'rU'), delimiter=',')
        for row in reader:
            lst.append(row)
        lst = filter(None,lst)
        return lst

    # Reads in a csv file as a list of dictionaries
    def read(self, filename,fieldnames=None):
        lst = []
        prior_input_file = open(filename, 'rU')

        if fieldnames:
            input_file = csv.DictReader(prior_input_file,fieldnames = fieldnames)
        else:
            input_file = csv.DictReader(prior_input_file)

        for row in input_file:
            #print row
            lst.append(row)
        PerformanceFunctions().comment("Read: {}".format(filename))
        return lst

    def csv_dictionary_pull(self, filename,fieldnames=None):
        if '.csv' not in str(filename).lower():
            filename = '/Users/Chris/Desktop/Inbox/' + filename + ".csv"
        l = self.read(filename,fieldnames=fieldnames)
        return l

    def write(self, lst, filename,sort=True,first_key=None):
        PerformanceFunctions().comment("writing csv file")
        if '.csv' not in filename:
            filename = filename + ".csv"
        if '/' not in filename:
            filename = base_directory + filename
        PerformanceFunctions().input_print(filename)
        keys = lst[0].keys()
        if sort:
            keys = sorted(keys, key=lambda s: str(s).lower()) #http://stackoverflow.com/questions/10269701/case-insensitive-list-sorting-without-lowercasing-the-result
        try:
            if first_key:
                keys.insert(0, keys.pop(keys.index(first_key)))
        except:
            pass

        f = open(filename, 'wb')
        dict_writer = csv.DictWriter(f, keys)
        dict_writer.writer.writerow(keys)

        try:
            dict_writer.writerows(lst)
        except UnicodeEncodeError:
            #need to figure out how to fix
            dict_writer.writerows(lst)
        PerformanceFunctions().comment("saved csv file")


class CSVFunctions(CSV):

    pass


def main():


    print CSVFunctions().read('/Users/Chris/Downloads/export_test.CSV',fieldnames=['transaction_number','date','description','debit','credit','balance'])

    return
    l = CSVFunctions().csv_dictionary_pull('adp_earnings_record_2015')


    for i in l[:10]:
        print i
    #print l[0:10]
    return

    f = "/Users/Chris/Desktop/liz_commission_rules.csv"
    l = CSVFunctions().csv_dictionary_pull("/Users/Chris/Desktop/liz_commission_rules.csv")
    for i in l:
        print i
    return
    f = "/Users/Chris/Desktop/test.csv"
    l = [['a', 'b', 'c'], ['a', 'b', 'c']]
    l = [{'a': 'b', 'b': 'c', 'c': 'd'}, {'a': '1', 'b': '3', 'c': '4'}]
    CSVFunctions().write(l, f)

    return
    l = CSV().read('/Users/Koba/Downloads/Luxury Interactive 2014 Confidential Attendee List 9-29.csv')
    print l

    CSV().write(l, '/Users/Koba/Downloads/Test.csv')


if __name__ == "__main__": main()
#dictionary_functions.py

# from Shippy.Functions.dictionary_functions import DictionaryFunctions
# from __future__ import print_function

import re
import ast

from collections import defaultdict, Counter,MutableMapping
import itertools
import operator
from operator import itemgetter, attrgetter
from itertools import chain, groupby, product
import sys
import traceback
import os
import inspect
import dateutil.parser  #used for string_to_date_try
import shlex
from Shippy.Functions.performance_functions import PerformanceFunctions,timeit
import xmltodict
from json import loads, dumps
import base64
import urllib
import requests
from requests.auth import HTTPBasicAuth
#import json


class TwoWayDict(dict):
    def __setitem__(self, key, value):
        # Remove any previous connections with these values
        if key in self:
            del self[key]
        if value in self:
            del self[value]
        dict.__setitem__(self, key, value)
        dict.__setitem__(self, value, key)

    def __delitem__(self, key):
        dict.__delitem__(self, self[key])
        dict.__delitem__(self, key)

    def __len__(self):
        """Returns the number of connections"""
        return dict.__len__(self) // 2

class AdvancedFunctions(object):
    def two_way_dict_create(self,primary_key,secondary_key):
        d = TwoWayDict()
        if isinstance(primary_key,list) and isinstance(secondary_key,list):
            for primary_key_item,secondary_key_item in zip(primary_key,secondary_key):
                d[primary_key_item] = secondary_key_item
        else:
            d[primary_key] = secondary_key
        return d


    def two_way_dict_create_from_array(self,array,funca,funcb):
        d = TwoWayDict()
        for D in array:
            d[funca(D)] = funcb(D)

        return d


class DeepAnalysis(AdvancedFunctions):
    # determine number of levels a list is
    def levels_depth(self,
                     lst):  #http://stackoverflow.com/questions/31955259/how-to-determine-the-number-of-layers-of-lists-a-list-has

        return max(self.levels_depth(sublist) for sublist in lst)


    def group_by_flatten(self, l, *args):
        for i in args:
            l = DictionaryFunctions().list_dict_group_by(l, i)
            depth = self.levels_depth(l)
            if depth > 1:
                l = [item for sublist in l for item in sublist]
        return l

    # group_by_func - takes in a list and returns a subgroup of flatten lists
    # calculate_func - takes in each of the sublists to calculate
    # condition_func - takes in the result of the calculations
    def group_calculate_condition_list(self, l, group_by_func, calculate_func, condition_func):
        # 1) group data by strings
        l = group_by_func(l)
        #DictionaryFunctions().dictionary_list_summarize_print(l,name="Deep Analysis")
        # 2) calculate on each of those strings
        l = map(calculate_func, l)
        l = condition_func(l)
        return l


# from Shippy.Functions.time_functions import TimeFunctions

# break one dictionary into multiple dictionaries based on certain inputs
class DictionarySmash(DeepAnalysis):
    # if an dict in l1 meets the criteria with items in l2, then update that dict in l1 with that new list
    # l1 - is the svb list
    # l2 - is bill.com list
    # conditional_func - checks to see if that dict in l1 needs to be replaced with another
    # applicable_func - applies and brings out whats in l2
    def smash_dict_in_list_from_condition(self, l1, l2, conditional_func, applicable_func):
        l = [applicable_func(D, l2) if conditional_func(D, l2) else [D] for D in l1]
        l = [item for sublist in l for item in sublist]
        l = DictionaryFunctions().dict_keys_list_ensure(l)
        return l



    def smash_dict_in_list_from_condition_single(self, l, conditional_func, applicable_func):
        l = [applicable_func(D) if conditional_func(D) else [D] for D in l]
        l = [item for sublist in l for item in sublist]
        l = DictionaryFunctions().dict_keys_list_ensure(l)
        return l

    def divide_rid_zero_error(self, D, subli, key):
        print
        "<divide_rid_zero_error>"
        print
        "\tD: {}".format(str(D))
        print
        "\tsubli: {}".format(str(subli))
        print
        "\tkey: {}".format(str(key))
        total = float(sum(map(lambda Dict: DictionaryFunctions().float_convert_try_else(Dict[key]), subli)))
        print
        "\ttotal: {}".format(str(total))

        try:
            #print "\tsuccess"
            v = float(D[key]) / total
        except ZeroDivisionError:
            print
            "\tfail"

            v = 0

        return v


    # purpose here is to make the sublis get portionate part of total amount from D
    # Example
    # subli = [{'category_name':'Base Pay','amount':'50','date_monthyear':'Jan-15','department':'Sales'},{'category_name':'Base Pay','amount':'50','date_monthyear':'Jan-15','department':'Sales'}]
    # D = {'category_name':'Base Pay','amount':'200','date_monthyear':'Jan-15','random_key':'232'}
    # -> [{'category_name':'Base Pay','amount':'100','date_monthyear':'Jan-15','department':'Sales','random_key':'232'},{'category_name':'Base Pay','amount':'100','date_monthyear':'Jan-15','department':'Sales','random_key':'232'}]
    # also update it based on it
    # if you can sum them and its not 0 then its a key
    # this will try to do this to any number that can be that isn't 0
    def smash_dict_based_on_list(self, D, subli):
        #numerical_keys = [k for k in subli[0].keys() if k in D.keys() and k in subli[0].keys() and DictionaryFunctions().is_float_test(subli[0][k])]
        #CHEAT
        numerical_keys = ['amount']  # CHEAT
        #DictionaryFunctions().float_convert_test()
        print
        "<smash_dict_based_on_list>"
        coefficient_dict = dict([(key, self.divide_rid_zero_error(D, subli, key)) for key in numerical_keys])
        print
        "\tcoefficient dict: {}".format(str(coefficient_dict))
        D = DictionaryFunctions().key_filter_item_not(D, 'department', *numerical_keys)  #Cheat I put in department
        for Dict in subli:
            #print "<smash_dict_based_on_list>"
            #print str("\tDict: {}").format(str(Dict))
            for key in numerical_keys:
                Dict.update(D)
                Dict.update({key: float(Dict[key]) * float(coefficient_dict[key])})
        return subli

    def dictionary_smash_func_conditional(self, D1, subli, common_keys):
        D1 = DictionaryFunctions().key_filter_item(D1, *common_keys)
        D2 = DictionaryFunctions().key_filter_item(subli[0], *common_keys)
        #print "<dictionary_smash_func_conditional>"
        #print "\tD1:{}".format(str(D1))
        #print "\tD2:{}".format(str(D2))
        if D1 == D2:
            print
            "True"
            return True
        else:
            return False

    # The purpose is to take a dict list and make multiple dicts out of certain dicts that share a common dict keys with another list.
    # this is because quickbooks has base pay not broken out, but other sources do and are not precise so this is to keep the same ratio
    # l1 - the dict list that will have some of its dicts smashed
    # l2 - the dict list that will determine which one gets smashed if it has a common key with it
    # Example
    # l1 = [{'category_name':'Base Pay','amount':'200','date_monthyear':'Jan-15','random_key':'232'},{'category_name':'Analytics','amount':'613225.86','date_monthyear':'Jan-15'},{'category_name':'Commissions','amount':'100','date_monthyear':'Jan-15','random_key':'232'}]
    # l2 = [{'category_name':'Base Pay','amount':'50','date_monthyear':'Jan-15','department':'Sales'},{'category_name':'Base Pay','amount':'50','date_monthyear':'Jan-15','department':'Sales'},{'category_name':'Commissions','amount':'100','date_monthyear':'Jan-15','department':'Engineering'}]
    # ->  [{'category_name':'Base Pay','amount':'100','date_monthyear':'Jan-15','department':'Sales','random_key':'232'},{'category_name':'Base Pay','amount':'100','date_monthyear':'Jan-15','department':'Sales','random_key':'232'},{'category_name':'Analytics','amount':'613225.86','date_monthyear':'Jan-15'},{'category_name':'Commissions','amount':'100','date_monthyear':'Jan-15','department':'Engineering',,'random_key':'232'}]
    # l1 or l2 need to have all the same keys across the list
    # l2 should only have two common keys with l1 that it will merge on, and then only numbers for what part needs to be borken out proportionally, and category label if need be

    # Instructions
    # l2 needs to be prepared to smash l1.
    # - l2 should share two common keys with l1 that will be the two keys that it will only break the D on if it's the same
    # - l2 can have as many numerical common keys, which will break l1 appropriately
    # Any key appended to l2 that isn't a common key will be added to the dict and then the dict that is being smashed will have its remains appended to it except the common key
    def dictionary_smash_from_list(self, l1, l2):
        print
        "<dictionary_smash_from_list>"
        # Identify Common Keys (only should be two), so
        #common_keys = [i for i in l2[0].keys() if i in l1[0].keys() and not DictionaryFunctions().is_float_test(l2[0][i])] #and that isn't the amount that i want to smash which would be a number
        common_keys = ['date_monthyear', 'category_name']
        print
        "\tcommon keys: {}".format(str(common_keys))
        # CHEAT BECAUSE COMMON KEYS WAS IN WRONG ORDER - not sure if order matters though

        l2 = DictionaryFunctions().list_group_by_double(l2,
                                                        *common_keys)  # now we have a sublist of dictionaries where each sublist has unique month_year and category_name
        print
        "\tfirst 10 l2: {}".format(str(l2[:10]))
        # loop through each sublist in l2, and check which ones in l1 have l2 in it, and if it does then run the function to break it apart
        # Note: I'm looping through l2 first instead of l1, because
        #func_conditional = lambda D1,subli: True if DictionaryFunctions().key_filter_item(D1,*common_keys) == DictionaryFunctions().key_filter_item(subli[0],*common_keys) else False #D1 in this case is l1
        func_conditional = lambda D1, subli: self.dictionary_smash_func_conditional(D1, subli, common_keys)
        l1 = DictionaryFunctions().dict_list_consummate_proposal(l1, l2, self.smash_dict_based_on_list,
                                                                 func_conditional)
        l = [item for sublist in l1 for item in sublist]
        return l


    # break a dictionary in one list into multiple based on it's relatedness to another dictionarys
    # l1 - the dictionary list that will be smashed
    # l2 - the dictionary list that will be utilized to do the smashing
    # k1 - the key that they will have to share for the one dictionary to be broken by the other one
    # k2 - the key that the amount will be smashed on
    # Example
    # l1 = [{'department':'sales','amount':10},{'department':'engineering','amount':5}]
    # l2 = [{'department':'sales','amount':10},{'department':'sales','amount':5}]
    # -> l = [{'department':'sales','amount':6.66},{'department':'sales','amount':3.33},{'department':'engineering','amount':5}]
    #
    # Example 2
    # l1 = [{'category_name':'Base Pay','amount':'200','date_monthyear':'Jan-15','random_key':'232'},{'category_name':'Analytics','amount':'613225.86','date_monthyear':'Jan-15'},{'category_name':'Commissions','amount':'100','date_monthyear':'Jan-15','random_key':'232'}]
    # l2 = [{'category_name':'Base Pay','amount':'50','date_monthyear':'Jan-15','department':'Sales'},{'category_name':'Base Pay','amount':'50','date_monthyear':'Jan-15','department':'Engineering'},{'category_name':'Commissions','amount':'100','date_monthyear':'Jan-15','department':'Sales'}]
    # ->  [{'category_name':'Base Pay','amount':'100','date_monthyear':'Jan-15','department':'Sales','random_key':'232'},{'category_name':'Base Pay','amount':'100','date_monthyear':'Jan-15','department':'Engineering','random_key':'232'},{'category_name':'Commissions','amount':'100','date_monthyear':'Jan-15','department':'Sales',,'random_key':'232'},{'category_name':'Analytics','amount':'613225.86','date_monthyear':'Jan-15'}]
    #
    # Process
    # Categorize l2 by all common keys with l1 (which is only able to be 2 now), so that a sublist for each category can be produced. Also l2 should have the department break outs as a new key which will e added back in
    # Smash l1 Dicts if it shares the common keys for the sublist, otherwise just skip it
    # By Smashing, get the total amount of the sublist that is currently being evaluated and associate each with a percentage
    # Create the new amount on that sublist by multiplying that percentage by the amount that it evaluted true to
    # Update each dict in the sublist the values of the old one except the amount field
    # def dictionary_smash_from_list(self,l1,l2,k1,k2):
    #     l2 = DictionaryFunctions().list_dict_group_by(l2,k1)
    #     l2 = [self.tuple_percentage_convert_from_dictionary_list(subli) for subli in l2]
    #
    #     l = [item for sublist in l for item in sublist]
    #     return l

    # Screw the above
    # input is a dictionary and a list of dictionaries
    # D - {'amount':1423}
    # l - ['amount':.32,'department':'name']
    # then just iterate through the l with the D in mind
    def dictionary_smash_from_tuple_list(self, D, l, k='amount'):
        #total = float(D[k])
        #[Dict.update(D) for Dict in l]
        [Dict.update({k: float(Dict[k]) * float(D[k])}) for Dict in l]
        D = DictionaryFunctions().key_filter_item_not(D, k)
        [Dict.update(D) for Dict in l]
        return l

    def float_convert_try(self, i):
        try:
            return float(i)
        except:
            return 0

    # l = [{'department':'sales','amount':100}
    # keyname is the key name of the tuples
    def tuple_percentage_convert_from_dictionary_list(self, l, key_value='amount', key_name='department'):
        total = sum(map(lambda D: self.float_convert_try(D[key_value]), l))
        l = [(key_name, float_convert_try(D[key_value]) / float(total)) for D in l]
        return l


class ErrorAsses(DictionarySmash):
    #check which dictionary in a list of dictionaries doesnt have a key
    def dictionary_list_key_check(self, l, k):
        print
        "dictionary_functions.py, <key_check>"
        v = 0
        for i, D in enumerate(l):
            try:
                D[k]
            except:
                print
                "\tDictionary doesn't have '{}' key: \n\t{}".format(k, str(D))
                v = v + 1
        print
        "\t{}/{} don't have '{}' key".format(str(v), str(len(l)), str(k))


class DictionaryIterTools(ErrorAsses):
    def list_all_combinations(self,stuff):  # http://stackoverflow.com/questions/464864/python-code-to-pick-out-all-possible-combinations-from-a-list
        final_list = []
        for L in range(0, len(stuff) + 1):
            for subset in itertools.combinations(stuff, L):
                final_list.append(list(subset))
        final_list = filter(None, final_list)
        return final_list
    def list_all_combinations_sublis(self,args):
        l = DictionaryFunctions().list_all_combinations(args)
        l = [filter(None, list(DictionaryFunctions().list_combinations(*i))) for i in l]
        l = [list(item) for sublist in l for item in sublist]
        return l

# import Levenshtein
# don't want dictionary functions to have dependency of another file within Functions of any file
#as a result, when i need something, just copy it in here
class SupportingDupeFunctions(DictionaryIterTools):
    #comes from Listfunctions
    def list_reordered(self, lst, HeaderOrder):
        IndiceList = [lst[0].index(Header) for Header in HeaderOrder]
        Func = lambda subli: [subli[indice] for indice in IndiceList]
        lst = map(Func, lst)
        return lst

    #same as TextFunctions().
    def string_between_pull(self, val, start='Select', end='From'):
        try:
            regex = '.*' + start + '(.*?)' + end + '.*'
            matches = re.search(regex, val, re.IGNORECASE)
            return matches.group(1)
        except AttributeError:  #if no parenthesis
            return val

    def float_convert_try(self, s):
        try:
            return float(s)
        except:
            return s

    def float_convert_try_else(self, s):
        try:
            return float(s)
        except:
            return 0


#originally created to be utilized as default function for list_common_key_merge
class DictionaryKeyCompare(SupportingDupeFunctions):

    # check the differences in fields
    def array_field_difference_check(self,l1,l2):
        d1 = l1[0].keys()
        d2 = l2[0].keys()

        d1_missing_keys = [i for i in d1 if i not in d2]
        d2_missing_keys = [i for i in d2 if i not in d1]
        print "d1 missing keys: {}".format(str(d1_missing_keys))
        print "d2 missing keys: {}".format(str(d2_missing_keys))


    def string_fix(self, s):
        try:
            s = s.replace("'", "\\'")
        except:
            pass
        return str(s)

    #this is what is evaluated within string_compare
    #input: s1 =  '{{type}}' == 'New Business' or '{{type}}' == 'Upsell - New' , s2 = 'New Business'
    #this just replaces one for the other

    def string_bracket_replace(self, s1, s2):
        brackets_between_pull = lambda string: "{{" + self.string_between_pull(string, start="\{\{",
                                                                               end="\}\}") + "}}"  #brackets between pull means it doesnt matter whats in the brackets and that it'll just replace the entire bracket series
        if "{{" in s2:
            s = s2.replace(brackets_between_pull(s2), self.string_fix(s1))
        elif "{{" in s1:  #this string comparison is in case that either key has one or the other cause eval coudl be in either
            s = s1.replace(brackets_between_pull(s1), self.string_fix(s2))
        return s

        s = s2.replace(
            "{{" + TextFunctions().string_between_pull(
                s2, start="\{\{", end="\}\}") + "}}", string_fix(s1))
        return s


    #returns true or false depending on how two dictionaries compare
    #to be used as default for common_key_merge
    #loop through the key values in each dictionary
    #should be insensitive to case
    #should not compare if one of the values is -
    #{{something}} - replace the brackets with teh variable by the other and evaluate that against a function
    def string_compare(self, s1, s2):
        try:
            str(s1)
            str(s2)
        except UnicodeEncodeError:
            # print "dictionary_functions.py , <string_compare>"
            # print "ERROR WITH STRING: "
            # print "\t", s1
            # print "\t", s2
            str(s1)
            str(s2)
        if str(s1).lower().strip() == str(s2).lower().strip():
            #print "True"
            return True
        if str(s1) == '-' or str(s2) == '-':  #if it has a dash, just return true and skip that one
            return True
        try:
            if ("{{" in str(s2) or "{{" in str(s1)) and not isinstance(s1, list) and not isinstance(s2, list) and eval(
                    self.string_bracket_replace(s1, s2)):
                return True
            else:  #returns false if doesnt meet being the same string or having formula in one evaluate to True
                return False
        except NameError:  #not sure why NameError is important here
            #print "/tline 84: Name Error: " + str(s1) + " , " + str(s2)
            #sys.exit("NameError: name: comparing s1 to s2: " + str(s1) + " , " + str(s2))
            return False
        except AttributeError:  #not sure why NameError is important here
            # 	sys.exit("AttributeError: name: comparing s1 to s2: " +str(s1) + " , " + str(s2))
            #print "AttributeError: name: comparing s1 to s2: " + str(s1) + " , " + str(s2)
            return False
        except Exception, err:
            pass
            #print "File dictionary_functions.py, line 95, in <string_compare>"
            #print "\t" + traceback.format_exc()

    #the goal below is to compare the keys-values of two dictionaries
    #only return true if everythign is correct, so return false, the instant it's wrong
    #the beauty in the below is that it'll return True if either values in each key bieng compared if one of them has string in the other or if they have the same text regardless of string
    def dict_match_from_string_or_func(self, D1, D2):
        for i in D1.keys():
            try:
                if not self.string_compare(D1[i], D2[i]):  #if it has any differences, then reject. Goal is then to break it and test that it mataches across everything
                    return False
            except:
                PerformanceFunctions().input_print(D1,D2)
                if not self.string_compare(D1[i], D2[i]):  # if it has any differences, then reject. Goal is then to break it and test that it mataches across everything
                    return False
        return True

    #this is utilized by list_common_key_merge
    #the goal is to have a function within gspread determine whether it's a match
    #if the text 'D1' and 'D2' exist within the gspread D2 key, then evaluate it with D1 and D2
    #the funciton needs to return True within the gspread
    def eval_d1_d2_check(self, D1, D2):
        #print "running"
        l = D2.keys()  #notice it's loking at all gspread keys, not just uniques
        for i in l:
            #print D2[i]
            if 'D1[' in D2[i] or 'D2[' in D2[i]:
                try:
                    #print eval(D2[i])
                    return eval(D2[i])
                except Exception, err:  #http://stackoverflow.com/questions/3702675/how-to-print-the-full-traceback-without-halting-the-program

                    #print traceback.format_exc()
                    pass


class DictionaryFind(DictionaryKeyCompare):
    #DictionaryFunctions().select_dict_from_condition(bamboo_data,lambda D: str(email).lower()
    def select_dict_from_condition(self,l,func,return_first=True,alt=None):
        try:
            Dict = filter(lambda D: func(D),l)
            if return_first:
                return Dict[0]
            else:
                return Dict
        except:
            return alt

    #DictionaryFunctions().dict_pull_try_return(D,key_name,brand_strategist_emails_dict,alt='None')
    def dict_pull_try_return(self,target_dict,key_name,search_dict,alt='None'):
        try:
            return search_dict[target_dict[key_name]]
        except:
            return alt


    #DictionaryFunctions().dict_pull_try_return(D,key_name,brand_strategist_emails_dict,alt='None')
    def dict_pull_try_return_simple(self,Id,search_dict,alt='None'):
        try:
            return search_dict[Id]
        except:
            return alt



    #Return the indexes of where that key and value occured within the list
    def dict_key_find(self, l, k, v):
        l = [i for i, D in enumerate(l) if k in D.keys() and D[k] == v]
        return l


class DictionaryFunctionApplyCondition(DictionaryFind):
    def dict_list_func_apply_conditional(self,
                                         func,
                                         func_conditional,
                                         l):
        l = [func(D) if func_conditional(D) else D for D in l]
        return l

    # Purpose of this function is to check if a function is true on it and if it is then run another on it.
    # called consummate proposal because if the dict in l2 says yes to the dict in l1, they'll run func together
    # This is so that if a dictionary within list a evaluates to true with a dictionary from list b, then run a function on it
    # l1 - is going to be the dictionary that is ultimately manipulated by func with the dictionary that evaluates to true with it
    # l2 - is going to be the dictionary that is applied to the dict in l1 if the conditional_func is met with it
    # func HAS to have
    def dict_list_consummate_proposal(self, l1, l2, func, func_conditional):
        #DictionaryFunctions().dictionary_list_summarize_print(l1,name="<dict_list_consummate_proposal>l1")
        print
        "<dict_list_consummate_proposal>"
        #print "\tl2: {}".format(str())
        #DictionaryFunctions().dictionary_list_summarize_print(l2,name="<dict_list_consummate_proposal>l2")

        l = []
        for D1 in l1:
            for D2 in l2:
                #print "<dict_list_consummate_proposal>"


                if func_conditional(D1, D2):
                    # print "True"
                    # print "\tD1: {}".format(str(D1))
                    # print "\tD2: {}".format(str(D2))
                    Dict = func(D1, D2)
                    break
                else:  # if there is no match in the conditional func, then just make itself the result
                    Dict = [D1]
            l.append(Dict)
        return l


class KeyMatchAdd(DictionaryFunctionApplyCondition):

    def conditional_key_add_list(self,l,key_name='keyword',string_list=[]):
        for i in string_list:
            for D in l:
                if str(i).lower() in str(D).lower():
                    D.update({key_name:i})
        l = DictionaryFunctions().dict_keys_list_ensure(l)
        return l


    # Two Data Sets
    # 1 Key Determining Key
    # two results
    # the purpose is to create an update list and an upload list
    def update_upload_list_dict_list(self,l1,l2,key_check1,key_check2,key_add):
        update_list = []
        for D1 in l1:
            for D2 in l2:
                if D1[key_check1] == D2[key_check2]:
                    Dict = DictionaryFunctions().dictionary_combine(D1,{key_add:D2[key_add]})
                    update_list.append(Dict)
        upload_list = [D for D in l1 if D not in DictionaryFunctions().key_filter_item_list_not(update_list,key_add)]
        return update_list,upload_list

    # D - the dictionary
    # s - the string that is searched within the dictionary
    # key - the key that will be updated if that string exists
    # alt - if it doesnt exist the value of the key that it will be updated
    def string_check_dict_update(self, D, s, key, alt='None'):
        if str(s).lower() in str(D).lower():
            Dict = {key: s}
        else:
            Dict = {key: alt}
        D = DictionaryFunctions().dictionary_combine(D, Dict)
        return D

    def string_check_dict_update_list(self, l, s, key, alt='None'):
        l = map(lambda D: self.string_check_dict_update(D, s, key, alt=alt), l)
        return l


    # see dependency below
    #will look if any of the args exist in it, and update it for that one
    def string_check_dict_update_multiple(self, D,args, key, alt='None'):
        for s in args:
            if str(s).lower() in str(D).lower():
                Dict = {key: s}
                D = DictionaryFunctions().dictionary_combine(D, Dict)
                return D
            else:
                pass

        Dict = {key: alt} # if it doesnt find anything, just say nothing is there
        D = DictionaryFunctions().dictionary_combine(D, Dict)
        return D


    # essentially looks for a value in the dictionary and creates a key for it, if it exists
    # because brand_strategist field in Salesforce ant be reliably used, but their name will either be in owner.name or brand_strategist
    # s must be a list
    def string_check_dict_update_list_multiple(self, l,s,key, alt='None',*args):
        l = map(lambda D: self.string_check_dict_update_multiple(D,s, key, alt=alt), l)
        return l


    # Simple Version of list_common_key_merge
    # Iterates through l1 and l2, in each dictionary, it looks at their common keys, and creates a dictionary for each only with their common keys, so it can check if they are the same.
    # l1 - Salesforce Array
    # l2 - Gspread Array

    # dict_match_from_string_or_func - is the magical function in this is dict_match_from_string_or_func, because it checks if it should be matched across a wide array of conditions
    #
    def list_common_key_merge_simple(self,l1,l2):
        L = []
        for D1 in l1:
            for D2 in l2:
                common_keys = DictionaryFunctions().common_keys_pull(D1, D2)
                D1_common_keys = DictionaryFunctions().key_filter_item(D1, *common_keys)  #based eahch on the common key
                D2_common_keys = DictionaryFunctions().key_filter_item(D2, *common_keys)
                D2_unique_keys = DictionaryFunctions().key_filter_item_not(D2, *common_keys)
                if DictionaryFunctions().dict_match_from_string_or_func(D1_common_keys,D2_common_keys):
                    D1.update(D2_unique_keys)
                    L.append(D1)
        return L

    def counter_of_dicts(self,array):
        strung_array = map(str,array)
        strung_array_dict = Counter(strung_array)

        count_return_func = lambda D: strung_array_dict[str(D)]
        l = [(D,count_return_func(D)) for D in array]
        return l

    @timeit
    def list_common_key_merge_array_from_function(self,l1,l2,condition_func,merge_func):
        """
        Ensures that no two dictionarires are merged twice to prevent duplication
        Parameters
        ----------
        l1
        l2
        condition_func
        merge_func

        There's dictionary pair that have one match, multiple matches, and don't have any matches
        How does the result get manipulated where there arn't matches

        Returns
        -------

        """
        matched_in_l1 = []
        matched_in_l2 = []
        matched = []

        for D1 in l1:
            for D2 in l2:
                if condition_func(D1,D2):
                    matched_in_l1.append(D1)
                    matched_in_l2.append(D2)
                    r = merge_func(D1,D2)
                    matched.append(r)
                    break #so that once bench is matched up, it moves on to the next one right away (this prevents dupes). issue is if there are 7 in bank and 6 in bench,

        unmatched_in_l1 = [D for D in l1 if D not in matched_in_l1]
        unmatched_in_l2 = [D for D in l2 if D not in matched_in_l2]

        return matched,unmatched_in_l1,unmatched_in_l2


    def list_common_key_merge_array_from_function_v1(self,l1,l2,condition_func,merge_func):
        """
        Ensures that no two dictionarires are merged twice to prevent duplication
        Parameters
        ----------
        l1
        l2
        condition_func
        merge_func

        There's dictionary pair that have one match, multiple matches, and don't have any matches
        How does the result get manipulated where there arn't matches

        Returns
        -------

        """
        matched_in_l1 = []
        matched_in_l2 = []
        matched_tups = []

        for D1 in l1:
            for D2 in l2:
                if condition_func(D1,D2):
                    matched_in_l1.append(D1)
                    matched_in_l2.append(D2)
                    r = merge_func(D1,D2)
                    matched_tups.append((r,D1,D2))

        #l1_unique_matches = [item for item, count in Counter(matched_in_l1).items() if count == 1] #so that it keeps
        #l2_unique_matches = [item for item, count in Counter(matched_in_l2).items() if count == 1] #so that it removes them

        l1_unique_matches = [item for item, count in self.counter_of_dicts(matched_in_l1) if count == 1] #so that it keeps

        l2_unique_matches = [item for item, count in self.counter_of_dicts(matched_in_l2) if count == 1] #so that it removes the duplicates

        print l2_unique_matches


        unmatched_in_l1 = [D for D in l1 if D not in l1_unique_matches]
        unmatched_in_l2 = [D for D in l2 if D not in l2_unique_matches]
        manipulated_in_both = [merged_dict for merged_dict,D1,D2 in matched_tups if D1 not in l1_unique_matches and D2 not in l2_unique_matches] #so that it contains only those that have a single match only

        return manipulated_in_both,unmatched_in_l1,unmatched_in_l2



    def list_common_key_merge_array(self,l1,l2):
        #difference is the break clause
        L = []
        for D1 in l1:
            for D2 in l2:
                common_keys = DictionaryFunctions().common_keys_pull(D1, D2)
                D1_common_keys = DictionaryFunctions().key_filter_item(D1, *common_keys)  #based eahch on the common key
                D2_common_keys = DictionaryFunctions().key_filter_item(D2, *common_keys)
                D2_unique_keys = DictionaryFunctions().key_filter_item_not(D2, *common_keys)
                if DictionaryFunctions().dict_match_from_string_or_func(D1_common_keys,D2_common_keys):
                    D1.update(D2_unique_keys)
                    L.append(D1)
                    break
        return L


    def list_common_key_merge_array_inclusive(self,l1,l2):
        #  reverse will do the match differently and the other way
        #difference is the break clause
        L = []
        for D1 in l1:
            for D2 in l2:
                common_keys = DictionaryFunctions().common_keys_pull(D1, D2)
                D1_common_keys = DictionaryFunctions().key_filter_item(D1, *common_keys)  #based eahch on the common key
                D2_common_keys = DictionaryFunctions().key_filter_item(D2, *common_keys)
                #D1_unique_keys = DictionaryFunctions().key_filter_item_not(D1, *common_keys)
                D2_unique_keys = DictionaryFunctions().key_filter_item_not(D2, *common_keys)

                if DictionaryFunctions().dict_match_from_string_or_func(D1_common_keys, D2_common_keys):
                    # PerformanceFunctions().input_print(D1)
                    # PerformanceFunctions().input_print(D2)
                    # PerformanceFunctions().input_print(D1_common_keys)
                    # PerformanceFunctions().input_print(D2_common_keys)
                    # PerformanceFunctions().input_print(D2_unique_keys)

                    D = DictionaryFunctions().dictionary_combine(D1, D2_unique_keys)
                    L.append(D)
                    #break
                else:
                    pass
                    # PerformanceFunctions().input_print(D1)
                    # PerformanceFunctions().input_print(D2)
                    # PerformanceFunctions().input_print(D1_common_keys)
                    # PerformanceFunctions().input_print(D2_common_keys)
                    # PerformanceFunctions().input_print(D2_unique_keys)

        return L

    def common_key_merge_array_inclusive_single_match(self,content_data,listing_data,order_number_key='list_order_number',primary_key='listing_id',secondary_key='input_id'):
        content_data = [DictionaryFunctions().dictionary_combine(D, {order_number_key: enum}) for enum, D in enumerate(content_data)]
        PerformanceFunctions().input_print(listing_data)
        PerformanceFunctions().input_print(content_data)
        content_data = DictionaryFunctions().list_common_key_merge_array_inclusive(listing_data, content_data)
        PerformanceFunctions().input_print(content_data)
        content_data = DictionaryFunctions().group_by_keys(content_data, primary_key)
        lowest_order_number_func = lambda content_data_subli: [DictionaryFunctions().dictionary_lowest_date(subli, order_number_key) for subli in DictionaryFunctions().group_by_keys(content_data_subli, 'input_id')]
        content_data = [lowest_order_number_func(subli) for subli in content_data]
        content_data = DictionaryFunctions().dictionary_list_flatten(content_data)
        return content_data

    #l1 is the list that will be updated with the first Dictionary that it matches with in l2
    #NOTE: ORDER DOES MATTER, BECAUSE IT'lL UPDATE BASED ON THE ORDER OF THE FIRST ONE IT COMES ACROSS
    #merge two lists only on the keys that they share and exclude keys that they dont share in the merge
    #if the key is unique to that list, append it as a value to the result
    #func can be used to compare the key-values
    #the function that is being used must return True or False, and must evaluate two dicionaries as inputs
    #override func just in case I want the match to hapen regardless
    #its a function that must take in D1, and D2 (D1 is likely to be the list, and D2 likely to be the gspread)
    # In other words if the common keys that they share have the same values, then update the D1 with D2
    def list_common_key_merge(self, l1, l2, func=None, matches_only=True, override_func=None):
        #print "Running Function <list_common_key_merge>"
        func = DictionaryFunctions().dict_match_from_string_or_func
        #print func
        #if not func:
        #    func = DictionaryFunctions().dict_match_from_string_or_func
        #print func
        for D1 in l1:
            for D2 in l2:
                common_keys = DictionaryFunctions().common_keys_pull(D1, D2)
                D1_common_keys = DictionaryFunctions().key_filter_item(D1, *common_keys)  #based eahch on the common key
                D2_common_keys = DictionaryFunctions().key_filter_item(D2, *common_keys)
                D2_unique_keys = DictionaryFunctions().key_filter_item_not(D2, *common_keys)
                if func(D1_common_keys, D2_common_keys):
                    D1.update(D2_unique_keys)  #in the case that the diciontary compare does something to the second being compared.
                #the dictionary key name doesnt matter for the below in gspread (so it can have whatever header)
                #it does matter though if I want the gspread dict to update #keynameUniqueRule
                if override_func:
                    if override_func(D1, D2):
                        D1.update(
                            D2_unique_keys)  #in the case that there is no other match across either dictionary, check if a func is in D2 (e.g. D1['name'] in map(lambda D: TextFunctions().getDomain(D['link']), D2['base_name']}) )

        if matches_only:
            l = l1
            l1 = filter(lambda D: all([True for i in D.keys() if i in l2[0].keys()]),
                        l1)  #dictionary needs to have all the keys if there was a match
            print
            "non_matches: " + str(len(l) - len(l1))
        return l1

    #filter out list one for all values that already exist in l2 within the same dictionary
    def list_dedupe_determine(self, l1, l2, k=None):
        l = [i for i in l1 if i not in l2]
        return l


    def match_keys_func(self, D1, D2):
        lower_case_func = lambda i: str(i).lower()
        if DictionaryFunctions().function_key_apply(D1, lower_case_func) == DictionaryFunctions().function_key_apply(D2,
                                                                                                                     lower_case_func):
            return True
        else:
            return False

    #k is what to exclude from the matching keys
    def key_match_add(self, l1, l2, k=[], func=None):
        if not func:
            func = self.match_keys_func
        for D1 in l1:
            for D2 in l2:
                D2_filtered = DictionaryFunctions().key_filter_item_not(D2, *k)
                D1_filtered = DictionaryFunctions().key_filter_item(D1,
                                                                    *D2_filtered.keys())  #this should be changed to DictionaryFunctions().key_filter_item_not(D1,*k)
                if func(D1_filtered, D2_filtered):
                    print
                    "\t\tTRUE"
                    D1.update(DictionaryFunctions().key_filter_item_strong(D2, *k))
                    break  #once updated just move on to the next one.
                print
                "\t\tFalse"
        return l1


    def key_match_func(self, l1, l2, func_boolean=None, func_update=None):
        for D1 in l1:
            for D2 in l2:
                if func_boolean(D1, D2):
                    func_update(D1, D2)
                    #break #once updated just move on to the next one.
        return l1


class DictionaryCollapse(KeyMatchAdd):
    # This collapses the array on one key, and then makes a dictionary so that one key can tell you the whole thing about the array
    def collapse_dict_sum_deduped_keys_create_dictionary(self,l,key):
        l = DictionaryFunctions().collapse_dict_sum_deduped_keys(l,key)
        Dict = dict([(D[key],D) for D in l])
        return Dict

    def array_merge_from_search_dict(self,l,search_dict,keyname='AccountId'):
        for D in l:
            try:
                D.update(search_dict[D[keyname]])
            except:
                pass
        l = DictionaryFunctions().dict_keys_list_ensure(l)
        return l



    # Takes two lists merges them on that key
    # Merge them on that ID
    # Create each dictionary is an account id and then the other keys are named differently
    def collapse_dict_sum_deduped_keys_second_dimension(self,l1,l2,key,l1_key_name = 'daily_',l2_key_name='estaff_'):
        l1 = DictionaryFunctions().collapse_dict_sum_deduped_keys(l1,key)
        l2 = DictionaryFunctions().collapse_dict_sum_deduped_keys(l2,key)
        l1 = DictionaryFunctions().function_key_name_apply_list(l1,lambda i:l1_key_name + i if i != key else i)
        l2 = DictionaryFunctions().function_key_name_apply_list(l2,lambda i:l2_key_name + i if i != key else i)

        l = DictionaryFunctions().dictionary_list_merge_loop_in(l2,l1,key,key)
        return l


    # 020816
    # l = [{'type':'fruit','category':'edible','amount':1}
    # Fail - Delete - Deprecated because realized wouldn't be helpful
    def collapse_dict_sum_listed_keys(self,l,k):
        l = [list(grp) for key, grp in itertools.groupby(sorted(l, key=operator.itemgetter(k)),key=operator.itemgetter(k))]
        l = [{i: map(itemgetter(i), s) for i in s[0].keys()} for s in l]
        return l




    def group_by_multiple_keys(self, iterable,*keys):  #http://stackoverflow.com/questions/31955389/how-to-group-an-array-by-multiple-keys
        l = [list(group) for key, group in itertools.groupby(sorted(iterable), itemgetter(*keys))]
        #L = [subli[0] for subli in l]
        return l


        #l = [list(grp) for key, grp in itertools.groupby(sorted(l, key=operator.itemgetter(i)), key=operator.itemgetter(i))]
        #return l

    def group_by_keys(self,iterable, *keys):
        key_func = itemgetter(*keys)

        # For groupby() to do what we want, the iterable needs to be sorted
        # by the same key function that we're grouping by.
        sorted_iterable = sorted(iterable, key=key_func)

        return [list(group) for key, group in groupby(sorted_iterable, key_func)]



    def subdict_collapse(self, D):
        Dict = {}
        for tup in D.items():
            if isinstance(tup[1], dict):
                Dict.update(self.subdict_collapse(dict([(tup[0] + tupa[0], tupa[1]) for tupa in tup[1].items()])))
            else:
                Dict.update(dict([tup]))
        return Dict

    #if there are dicts witin dicts, this collapse those dicts in
    def subdicts_collapse(self, l):
        l = map(self.subdict_collapse, l)
        return l


    """
        Purpose: for Quickbooks Data where want key values to be added to certain dicts that fall within a pair
        e.g. list of line items that fall within Payroll Dictionaries, and want to know that those are from payroll dict
        1) Create collapsed list of target keys only.
        2) Append all the indexes where the keys occured in the target list (Seperate function) *only for those that occured twice
        3) For loop through target list, and apply those keys to only the indexes within the original by updating

    """

    def dict_list_merge_between(self, l, k):
        #[{'key':'1','fruit':'apple'},{'fruit':'bananaa'},{'key':'1','fruit':'pear'}]

        L = filter(lambda D: k in D.keys(), l)
        #[{'fruit': 'apple', 'key': '1'}, {'fruit': 'pear', 'key': '1'}]

        Original_List = L

        L = DictionaryFunctions().collapse_dict_sum_deduped_keys(L, k)
        #[{'fruit': 'pear,apple', 'key': '1'}]

        L = [(DictionaryFunctions().dict_key_find(l, k, D[k]), D) for D in L if
             len(DictionaryFunctions().dict_key_find(l, k, D[k])) == 2]
        #[([0, 2], {'fruit': 'pear,apple', 'key': '1'})]

        for tup in L:
            for D in l[tup[0][0] + 1:tup[0][1]]:
                D.update(tup[1])
        l = [D for D in l if D not in Original_List]
        return l

    #Given a list of dicationries
    #Deprecate
    def dict_collapse_based_on_keys(self, D, l,
                                    *args):  #http://stackoverflow.com/questions/29366542/how-to-combine-dictionaries-within-an-array-based-on-the-same-key-value-pairs
        [D.update(Dict) for Dict in l if Dict['id'] == D['id'] and Dict['name'] == D['name']]
        return D

    """
        Given a list of dictionaries, collapse on one key by adding the rest of the
        fields if they are an amount, and just putting them in a list with comma betweeen
        if they are anything else
    """
    #collapses - n is the number that I can collapse to
    def all_keys_collapse(self, l, n=None):
        D = {}
        for i in l[0].keys():  #Turn list of dictionaries into one dictionary #[{'a':'b'},{'a':'b'}] --> {'a':'b,b'}
            L = []
            if n:
                l = l[:n]
            for d in l:  #limit it to 3
                L.append(d[i])
            L = map(str, L)
            L = ",".join(L)
            D.update({i: L})
        return D

    #INPUT: [{keya:'a',keyb:1,keyc:"1/3/14"},{keya:'a',keyb:4,keyc:"1/10/14"},{keya:'b',keyb:2,keyc:"1/4/14"}]
    #OUTPUT: [{'a': [{'keyc': ['1/3/14', '1/10/14']}, {'keyb': [1, 4]}, {'keya': ['a', 'a']}]}, {'b': [{'keyc': ['1/4/14']}, {'keyb': [2]}, {'keya': ['b']}]}]
    def CollapseDict2(self, l, k):
        l = DictionaryCollapse().ListGroupBy(l, k)
        l = [{s[0][k]: [{i: map(itemgetter(i), s)} for i in s[0].keys()]} for s in l]
        return l

    #INPUT: [{keya:'a',keyb:1,keyc:"1/3/14"},{keya:'a',keyb:4,keyc:"1/10/14"},{keya:'b',keyb:2,keyc:"1/4/14"}]
    #OUTPUT: [{'keyc': ['1/3/14', '1/10/14'], 'keyb': [1, 4], 'keya': ['a', 'a']}, {'keyc': ['1/4/14'], 'keyb': [2], 'keya': ['b']}]
    #combines all the values of the common keys as a list
    def CollapseDict(self, l, k):
        if k:
            l = DictionaryCollapse().ListGroupBy(l, k)
        else:
            l = [l]
        l = [{key_name: map(itemgetter(key_name), subli) for key_name in subli[0].keys()} for subli in l]
        return l

    #Goes through each dicitonary and does something to each key's lis
    #concatonates them if its a date
    #aggregates them if its a number
    #if its the original, just takes one of the items out
    #Output from Collapse
    #INPUT: [{'keyc': ['1/3/14', '1/10/14'], 'keyb': [1, 4], 'keya': ['a', 'a']}, {'keyc': ['1/4/14'], 'keyb': [2], 'keya': ['b']}]
    #Usually used after collapse Dict
    def CollapseSum(self, l, k, join_string=','):
        Func = lambda Dict: {i: self.CollapseListConditional(Dict[i], join_string=join_string) for i in Dict.keys()}
        la = map(Func, l)
        #[{'keyc': '1/3/14,1/10/14', 'keyb': 5, 'keya': 'a,a'}, {'keyc': '1/4/14', 'keyb': 2, 'keya': 'b'}]
        if not k:  #if i dont have a key to sum it on, just sum them all up. the key wont be updated
            return la
        Func = lambda Dict: {k: Dict[k][0]}
        lb = map(Func, l)
        [a.update(b) for a, b in zip(la, lb)]
        return la

    #INPUT: l = [{'keya':'a','keyb':1,'keyc':"1/3/14"},{'keya':'a','keyb':4,'keyc':"1/10/14"},{'keya':'b','keyb':2,'keyc':"1/4/14"}]
    #OUTPUT: [{'keyc': '1/3/14,1/10/14', 'keyb': 5, 'keya': 'a'}, {'keyc': '1/4/14', 'keyb': 2, 'keya': 'b'}]
    #This does require whatever is going to be summed to be an integer
    #k is what it merges on
    def collapse_dict_sum(self, l, k):
        l = self.CollapseDict(l, k)
        l = self.CollapseSum(l, k)
        return l

    # purpose is to group by k and then apply the func to each subli and then flatten it out again
    # func is applied to the list of sublists
    def collapse_dict_apply_func(self, l, k, func):
        l = DictionaryFunctions().list_dict_group_by(l, k)
        l = map(func, l)
        l = [item for sublist in l for item in sublist]
        return l

    # a list of sublists that has sublists is returned
    def collapse_dict_two_layers(self, l, k1, k2):
        l = DictionaryFunctions().list_dict_group_by(l, k1)
        l = map(lambda subli: DictionaryFunctions().list_dict_group_by(subli, k2), l)
        return l


    def collapse_dict_two_layers_func(self, l, k1, k2, func):
        l = self.collapse_dict_two_layers(l, k1, k2)
        #[[[opp],[opp],[opp]],[[],[],[]]]
        l = map(lambda subli: [func(i) for i in subli], l)
        l = [item for sublist in l for item in sublist]
        return l

    #this chunks the list by two variables such as by accounta nd close date
    #then it collapses(meaning it just merges all the values) in that account and close date
    #then it returns as one list of items
    #k1 can be the account id, and k2 can be the close date
    def collapse_dict_two_layers_sum(self, l, k1, k2):
        l = self.collapse_dict_two_layers(l, k1, k2)
        #[[[opp],[opp],[opp]],[[],[],[]]]
        l = map(lambda subli: [DictionaryFunctions().collapse_dict_sum_deduped_keys(i, k2)[0] for i in subli], l)
        l = [item for sublist in l for item in sublist]
        return l

    #this should collapse by a different number of variables
    def group_by_dict_multiple_layers(self, l, *args):
        keys = list(args)
        merge_key = ','.join(keys)
        for D in l:
            D.update({merge_key: ''.join([str(tup[1]) for tup in D.items() if tup[0] in keys])})
        l = DictionaryFunctions().list_dict_group_by(l,merge_key)

        return l

    #this should collapse by a different number of variables
    def collapse_dict_multiple_layers_sum_dedupe(self, l, *args):
        keys = list(args)
        merge_key = ','.join(keys)
        for D in l:
            D.update({merge_key: ''.join([str(tup[1]) for tup in D.items() if tup[0] in keys])})
        l = DictionaryFunctions().collapse_dict_sum_deduped_keys(l, merge_key)
        l = DictionaryFunctions().key_filter_item_list_not(l, merge_key)

        return l


    def join_string_func(self, s, join_string=','):
        try:
            if not isinstance(s, list):
                s = join_string.join(list(set(str(s).split(",")))) if not isinstance(s, float) else s
            else:
                pass
        except UnicodeEncodeError:
            s = s.encode('ascii', 'ignore')
            s = join_string.join(list(set(str(s).split(",")))) if not isinstance(s, float) else s
        except Exception, err:
            print
            "\t" + traceback.format_exc()
            print
            s

        return s

    #issue with collapse_dict_sum is that I dont want the value of the key to repeat if it is the same
    #function needs to leave the same if
    def dict_key_value_dedupe(self, D, join_string=','):
        #print "File 'dictionary_functions.py', line 112, in <dict_key_value_dedupe>"
        #print "\t input Dict: " + str(D)
        func = lambda s: self.join_string_func(s, join_string=join_string)
        D = DictionaryFunctions().function_key_apply(D, func)
        #print "\t Output Dict: " + str(D)
        return D



    def collapse_dict_sum_deduped_keys(self, l, k):
        #print "dictionary_functions.py, <collapse_dict_sum_deduped_keys>"
        l = DictionaryFunctions().dict_keys_list_ensure(l)
        l = self.CollapseDict(l, k)
        l = self.CollapseSum(l, k)
        l = map(self.dict_key_value_dedupe, l)
        #DictionaryFunctions().dictionary_list_summarize_print(l)
        return l

    #difference with collapse_dict_sum_deduped_keys based on the following
    #no key necessary
    #the comma replace is optional
    #it will try to conver it to a float if it's a number
    #got rid of dict_key_value_dedupe, since value repeating isnt an issue
    def collapse_dict_sum_deduped(self, l, k=None, join_string=' and '):
        l = self.CollapseDict(l, k)
        l = self.CollapseSum(l, k, join_string=join_string)
        # if not k:
        #     l = map(lambda D: D[0],l)
        return l
        l = map(lambda D: self.dict_key_value_dedupe(D, join_string=join_string), l)

        return l


    #FUNCTION TO SERVE COLLAPSE SUM TO BE ABLE TO DO SOMETHING WITH THEIR KEYS
    #This takes in a sublist that the key has in it
    def CollapseListConditional(self, s, join_string=','):
        #print "s: {}".format(str(s))
        try:
            r = map(lambda i: ast.literal_eval(str(i)), s)
            #print "r: {}".format(str(r))
            if all([isinstance(item, list) for item in r]):
                l = DictionaryFunctions().list_combine_lists(*r)
                #print "l: {}".format(str(l))
                return l
            else:
                pass
        except:
            pass
        try:
            return join_string.join(s)
        except TypeError:
            try:
                return sum(s)

            except TypeError:  # if it's a list combine them
                try:
                    return join_string.join(map(str, s))
                except UnicodeEncodeError:
                    try:
                        s = map(str, s)
                        s = map(lambda i: i.encode('ascii', 'ignore'), s)
                        return join_string.join(s)
                    except UnicodeEncodeError:
                        #s = map(str,s)
                        s = filter(None, s)
                        #print s
                        print
                        "dictionary_functions.py, <CollapseListConditional>"
                        print
                        "\t needed to remove special character"
                        s = map(lambda i: re.sub('[^a-zA-Z0-9\n\.]', ' ', i), s)
                        return join_string.join(s)


    #also contained within Listfunctions as it can be applied to both lists and dictionaries
    def ListGroupBy(self, l, i):
        return [list(grp) for key, grp in itertools.groupby(sorted(l, key=operator.itemgetter(i)),key=operator.itemgetter(i))]


    #same as ListGroupBy, but instead renamed to be lowercase - didn't delete above in case of dependencies
    def list_dict_group_by(self, l, i):
        l = [list(grp) for key, grp in itertools.groupby(sorted(l, key=operator.itemgetter(i))
                                                         , key=operator.itemgetter(i))]
        return l

    #same as ListGroupBy, but instead renamed to be lowercase - didn't delete above in case of dependencies
    def list_dict_group_by_two_layers_filter_method(self, l, i1,i2):
        L = []
        unique_vals = DictionaryFunctions().list_dictionary_unique_values(l,i1)
        for unique_val in unique_vals:
            subli = filter(lambda D: D[i1] == unique_val,l)
            L.extend(self.list_dict_group_by(subli,i2))
        return L


    # func assess subli
    # then to each subli it will apply the key
    # If the result of the function is a list then
    def sub_dict_analysis(self, func, subli):
        #print "\tsubli: \n\t{}".format(str(subli))
        v = str(func(subli))  #so that the sum function doesnt aggregate this
        #print "\tv: \n\t{}".format(str(v))

        map(lambda D: D.update({func.__name__: v}), subli)
        #return subli

    # analyze the groups that have been grouped by k
    # every function entered in will manipulate the sublist of dicionaries
    # input must be a key
    # it will return list of dictionaries
    # args - any number of functions to assess the dictionaries. The function has to take input of a list of dictionaries.
    # then to those dictionaries
    def list_group_by_analysis(self, l, i, *args):
        #print "<list_group_by_analysis>, line 984,dictionary_functions.py"
        l = self.list_dict_group_by(l, i)
        for num,arg in enumerate(args):
            #print "\t{}/{}".format(str(num),str(len(args)))
            map(lambda subli: self.sub_dict_analysis(arg, subli),l)  # just put a function on the subli and then appended the result to all of its  sublists so that it can be deduped
        return l



    #l = [{i: map(itemgetter(i), s) for i in s[0].keys()} for s in l] #dedupe
    # CollapseSum
    #l = map(self.dict_key_value_dedupe, l)

    # if the result of the func is a string, it wont sum it
    # the purpose is to not only dedupe but analyze what is being deduped
    # vendor analysis si the purpose
    # The only purpose of kwargs is to serve to dict_key_value_dedupe in case commas in the value of the key
    def list_group_by_analysis_dedupe_keys(self, l, i, *args):
        l = self.list_group_by_analysis(l, i, *args)

        l = [{i: map(itemgetter(i), s) for i in s[0].keys()} for s in l]  #dedupe
        #l = self.CollapseSum(l) - the only issue is if its a value that is going to be summed


        l = self.CollapseSum(l, i)

        l = map(lambda D: self.dict_key_value_dedupe(D), l)

        return l


    # funcs taken needs to be able to process the list of sublists
    # the list of sublists are teh lists that its grouped by .
    # just needs to processs a list of dictionaries (each i
    def list_group_by_analysis_keep_dupes(self, l, i, *args):
        l = self.list_group_by_analysis(l, i, *args)
        #l = [{i: map(itemgetter(i), s) for i in s[0].keys()} for s in l] #dedupe
        #l = self.CollapseSum(l) - the only issue is if its a value that is going to be summed
        #l = self.CollapseSum(l, i)
        #l = map(self.dict_key_value_dedupe, l)
        l = [item for sublist in l for item in sublist]

        return l

    def list_group_by_analysis_keep_dupes_multiple(self, l, keys=[], funcs=[]):
        key_name = ','.join(keys)
        join_func = lambda D: ''.join([str(tup[1]) for tup in D.items() if any([str(i) == str(tup[0]) for i in keys])])
        #i is the new key
        func = lambda D: DictionaryFunctions().dictionary_combine(D, {key_name: join_func(D)})
        l = map(func, l)
        l = self.list_group_by_analysis(l, key_name, *funcs)

        #l = [{i: map(itemgetter(i), s) for i in s[0].keys()} for s in l] #dedupe
        #l = self.CollapseSum(l) - the only issue is if its a value that is going to be summed
        #l = self.CollapseSum(l, i)
        #l = map(self.dict_key_value_dedupe, l)
        l = [item for sublist in l for item in sublist]
        l = DictionaryFunctions().key_filter_item_list_not(l, key_name)

        return l

    def list_group_by_analysis_two_layers(self, l, i, i2, *args):
        l = self.collapse_dict_two_layers(l, i, i2)  # a list of sublists that has sublists is returned

        for arg in args:
            [map(lambda subli: self.sub_dict_analysis(arg, subli), sub_parent) for sub_parent in
             l]  # just put a function on the subli and then appended the result to all of its  sublists so that it can be deduped
        return l


    def list_group_by_analysis_dedupe_keys_two_layers(self, l, i, i2, *args):
        l = self.list_group_by_analysis_two_layers(l, i, i2, *args)

        l = map(lambda subli: [DictionaryFunctions().collapse_dict_sum_deduped_keys(i, i2)[0] for i in subli], l)
        l = [item for sublist in l for item in sublist]
        return l

        l = [{i: map(itemgetter(i), s) for i in s[0].keys()} for s in l]  #dedupe
        #l = self.CollapseSum(l) - the only issue is if its a value that is going to be summed
        l = self.CollapseSum(l, i)
        l = map(self.dict_key_value_dedupe, l)
        return l

    # split it up by year, and then split that up by person
    # flatten that sub sublist
    # this is an error function, because it doesnt actually group it by two
    def list_group_by_double(self, l, k1, k2):
        print"dictionary_functions.py , <list_group_by_double>"
        l = self.list_dict_group_by(l, k1)
        l = [self.list_dict_group_by(subli, k2) for subli in l]
        func = lambda subli: [item for sublist in subli for item in sublist]
        l = map(func, l)
        print
        "done"
        return l


    #Purpose is to take in a list of dictionaries and produce a list of uniques
    #with number of occurences they've had
    #Input is a lst of dictionary (Dlst)
    #Filter out in case I want to get rid of any keys (input should be as a list)
    #Turn the date field into another time range
    #ListCountDedupe

    #if timefunciton equals none, it doesnt have to collapse on time, but just collapse in general
    def CollapseCount(self, Dlst, Keylst, TimeFunction=None, TimeKey=None):
        Dlst = map(lambda Dict: -().KeyFilterItem(Dict, *Keylst), Dlst)
        #just in case there are some Nones in there
        Dlst = filter(None, Dlst)
        #Convert the Time if you want
        if TimeFunction != None:
            Func = lambda Dict: Dict.update({TimeKey: str(TimeFunction(Dict[TimeKey]))})
            map(Func, Dlst)
        Dlst = self.ListCountDedupe(Dlst)
        return Dlst

    #Convert the whole thing to strings
    #Then use counter on the strings
    #Then change it back to a dictionary and the acount as well
    #Get the Keys and use eval on them to convert back to dict
    #then zip it up with the values and update each dict

    #Dedupes and appends count
    def ListCountDedupe(self, lst):
        lst = map(str, lst)
        lst = Counter(lst)
        Keys = lst.keys()
        Keys = map(lambda Dict: ast.literal_eval(Dict), Keys)
        Values = lst.values()
        [key.update({'count': value}) for key, value in zip(Keys, Values)]
        lst = Keys
        return lst


    #k1 is what to group by
    #k2 is what to sort by
    #takes the first instance
    def dic_unique_first_instance_dedupe(self, l, group_by=None, sort_by=None, func=None, reverse=False):
        #print len(l)
        l = DictionaryFunctions().list_dict_group_by(l, group_by)
        #print len(l)
        func = lambda subli: DictionaryFunctions().dictionary_sort_on_key(subli, sort_by, reverse=reverse, func=func)[0]
        l = map(func, l)
        return l


class DictionaryKeyManipulate(DictionaryCollapse):
    #the goal is to take in a list of dictionaries and append certain values
    #the function needs to take in the entire list as a second argument
    def function_apply_on_key(self, l, k, func, key_name_append='func'):
        map(lambda D: D.update({k + key_name_append: func(k, l)}), l)
        return l


    #utilized to merge based on common keys
    #l2 would be the gspread
    #l1 would be the salesforce data
    #this also collapses the salesforce dictionary
    """
    1) Compares shared keys and appends uniques to the first list
    2) Replaces values within brackets with key
    3) Evaluates each expression
    4) if key has lambda D,l: , it will evaluate that function

    Can (4) come before 2?

    """
    #override_func is so that in case I want to do an override
    def list_merge_manipulate(self, l1, l2, filter_dict=None, collapse=True, override_func=None):
        # print
        # "file dictionary_functions, line 476, <list_merge_manipulate>"
        # print
        # "\tstarting"
        if collapse:
            l1 = DictionaryFunctions().subdicts_collapse(l1)  #only salesforce dict needs to be collapsed

        if 'order' in l2[0].keys():
            l2 = DictionaryFunctions().dictionary_sort_on_key_number(l2, 'order', reverse=False, func=float)

        l = DictionaryFunctions().list_common_key_merge(l1, l2, override_func=override_func)

        l = DictionaryFunctions().dict_functional_key_apply_list(l, l1, l2)  #the function can now take in either the sfdc list in l1 or gspread in l2

        l = map(DictionaryFunctions().dictionary_keys_brackets_replace,l)  #This needs to come before dict_functional_key_apply due to this ValueError: could not convert string to float: ((0.13 + {{commission_acceleration_percentage__c}}))

        l = map(DictionaryFunctions().eval_run_condition, l)

        if filter_dict:
            l = filter(lambda D: DictionaryFunctions().dict_determine_within(filter_dict, D), l)

        s = "finished: {} items".format(str(len(l)))
        PerformanceFunctions().comment(s)
        l = DictionaryFunctions().dict_keys_list_ensure(l)
        return l

    def string_function_determine(self, i):
        try:
            func = eval(i)
            func.__name__
            return True
        except:  #this means it's not a function
            return False

            #look to see if any of the values of any of the keys of the dictionary is a function.

    #if it is a function apply that function to the entire dictionary and the entire list
    # l1 is the sfdc list that goes through and l2 is the gspread list that goes through
    # l and l2 are now largely irrelevant, and just kept as safety
    def dict_functional_key_apply(self, D, l, l1, l2):

        for tup in D.items():
            if DictionaryFunctions().string_function_determine(tup[1]):

                try:
                    D = eval(tup[1])(D, l1)
                except ValueError:  #ValueError
                    D = DictionaryFunctions().dictionary_keys_brackets_replace(
                        D)  #This needs to come before dict_functional_key_apply due to this ValueError: could not convert string to float: ((0.13 + {{commission_acceleration_percentage__c}}))
                    D = DictionaryFunctions().eval_run_condition(D)
                    D = eval(tup[1])(D, l1)
                except ValueError:  #ValueError
                    pass
                    # print
                    # "dictionary_functions.py, line 395, <dict_functional_key_apply>"
                    # print
                    # "\tValueError: could not convert string to float: -"
                    # print
                    # "\ttup: " + str(tup)
                    # print
                    # "\tDict: " + str(D)
                    # print
                    # "\t" + traceback.format_exc()
                except ZeroDivisionError:
                    pass
                    # print
                    # "dictionary_functions.py , exception , <dict_functional_key_apply>"
                    # print
                    # "\tThe following is input l:"
                    # DictionaryFunctions().dictionary_list_summarize_print(l1)
                    # print
                    # "File dictionary_functions.py, line 524, in <dict_functional_key_apply>"
                    # print
                    # "\t" + traceback.format_exc()
                    sys.exit("D,tup,l:" + str(D) + "\n" + str(tup[1]))  # + "\n" + str(l)

                    # except TypeError:
                    # 	print "dictionary_functions.py, line 400, <dict_functional_key_apply>"
                    # 	print "\TypeError: could not convert string to float: -"
                    # 	print "\ttup: " + str(tup)
                    # 	print "\tDict: " + str(D)
            else:
                pass

        #print "<dict_functional_key_apply>"
        #print "\t{}".format(str(D))
        return D

    #this goes through every dictionary and goes through every item in the dictionaries
    #and it determines if there is a function in any one of the values
    #if so, it turns this dictionary into the result of that function
    #if it's multiple dictionaries or a list coming out as a result, this will flatten it out again.
    #the function eneds to take in both the dictionary as well as the entire list itself
    """
    This goes through a dictionary list to determine if any values of the keys are functions.
    The functions must accept a dictionary and list as parameters and return a list of dictionaries or
    a dictionary
    """

    def dict_functional_key_apply_list(self, l, l1, l2):
        l = map(lambda D: self.dict_functional_key_apply(D, l, l1, l2),
                l)  #dict_function_key_apply now takes in two extra lists (one for sfdc and one for gspread)
        l = map(lambda i: [i] if not isinstance(i, list) else i, l)  #just important for when it's flattend
        l = [item for sublist in l for item in sublist]
        return l


    #pull the keys that two dictionaries share in common
    def common_keys_pull(self, D1, D2):
        l = [i for i in D1.keys() if i in D2.keys()]
        return l

    def calculation_func_try(self, s):
        try:
            return eval(s)
        except TypeError:
            print
            "Line 469 (dictionary_functions): TypeError: unsup00ported operand type(s) for +: 'float' and 'NoneType'"
            s.replace('None', '0')
            return eval(s)
        except:
            print
            "Line 143 (dictionary_functions): Syntax Error or Other Error with Eval"
            return s


    def eval_run_condition(self, D, func=None):
        try:
            if not func:
                func = lambda s: True if "((" in str(s) and not isinstance(s,
                                                                           list) else False  #added not a list since sometimes s is a list
            calculate_func = lambda s: self.calculation_func_try(s) if func(s) else s
            D = DictionaryFunctions().function_key_apply(D, calculate_func)
        except Exception, err:
            print
            "file dictionary_functions.py, line 564, <eval_run_condition>"
            print
            "\terror"
            #print "\t" + traceback.format_exc()
        return D

    def string_replace(self, s, D, l, start="\{\{", end="\}\}"):
        try:
            for i in l:
                s = s.replace(start + str(i) + end, str(D[i]))
        except KeyError:
            s = s
        return s


    #identify all items within double brackets in a string
    #replace items of that string with the key within it
    def dictionary_keys_brackets_replace(self, D, start="{{", end="}}"):
        try:
            bracket_find = lambda s: re.findall(start + '(.*?)' + end, str(s), re.IGNORECASE)
            func = lambda s: self.string_replace(s, D, bracket_find(s), start=start, end=end) if start in str(s) else str(s)
            D = DictionaryFunctions().function_key_apply(D, func)
        except Exception, err:
            pass
            #print "file dictionary_functions.py, line 585, <dictionary_key_brackets_replace>"
            #print "\t: error"
            #print traceback.format_exc()
        return D

    #was going to be used for dict_keys_ensure
    def longest_dict_return(self, l):
        n = sorted([len(D) for D in l], reverse=True)[0]
        for D in l:
            if len(D) == n:
                return D
                break

    def all_keys_return(self, l):
        l = [D.keys() for D in l]
        l = [item for sublist in l for item in sublist]
        l = list(set(l))
        return l

    def dict_key_ensure(self, D, k, alternative_string='NULL'):
        #print "File 'dictionary_functions.py', line 237, in <dict_key_ensure>"
        #print "\t original Dict: " + str(D)

        key_lost_append = lambda Dict: list(
            set(k) - set(Dict.keys()))  #identify the keys that are not in the original dict
        D.update(dict(zip(key_lost_append(D),
                          [alternative_string] * len(key_lost_append(D)))))  #append the missing keys as a dictionary
        #print "\t final Dict: " + str(D)

        return D

    #goes through the list of dictionaries to make sure they all have the same number of keys
    #it adds the keys to the dictionaries that are missing it if not
    #THIS REQUIRES THAT THE LONGEST KEY USE ALL THE VALUES AND THAT IT BE APPLIED TO IT
    def dict_keys_list_ensure(self, l, alternative_string='NULL'):
        #print "File 'dictionary_functions.py', line 205, in <dict_keys_list_ensure>"

        k = self.all_keys_return(l)
        dict_key_ensure = lambda D: self.dict_key_ensure(D, k, alternative_string=alternative_string)

        map(dict_key_ensure, l)



        #print "\t keys identified: " + str(k)
        return l

        key_lost_append = lambda D: list(set(k) - set(D.keys()))  #identify the keys that are not in the original dict
        dict_key_ensure = lambda D: D.update(dict(zip(key_lost_append(D), [alternative_string] * len(
            key_lost_append(D)))))  #append the missing keys as a dictionary
        map(dict_key_ensure, l)

        print
        "\t keys identified: " + str(k)

        return l

        k = self.all_keys_return(l)
        key_lost_append = lambda D, k: list(
            set(k) - set(D.keys()))  #identify the keys that are not in the original dict
        dict_key_ensure = lambda D: D.update(dict(zip(key_lost_append(D, k), [alternative_string] * len(
            key_lost_append(D, k)))))  #append the missing keys as a dictionary
        map(dict_key_ensure, l)

        print
        "\t keys identified: " + str(k)

        return l

    #gets rid of any dictionary within the list that doesnt contain all the keys
    def dict_keys_list_ensure_exclude(self, l):
        print
        "File 'dictionary_functions.py', line 701, in <dict_keys_list_ensure_exclude>"
        print
        "\tstarting list: {}".format(str(len(l)))
        k = self.all_keys_return(l)
        l = filter(lambda D: all([i in D.keys() for i in k]), l)
        print
        "\tending list: {}".format(str(len(l)))
        return l

    #change dictionary keys
    def dictionary_key_name_change(self, D, new_key=None, old_key=None):
        D[new_key] = D[old_key]
        del D[old_key]
        return D

    #Dict[New_Key] = Dict.pop(Old_Key)
    #return Dict

    def dictionary_key_name_change_multiple(self, D, new_key=None, old_key=None):
        for New, Old in zip(new_key, old_key):
            D[New] = D.pop(Old)
        return D

    def dictionary_key_name_change_list(self, l, new_key=None, old_key=None):
        func = lambda D: self.dictionary_key_name_change(D, new_key=new_key, old_key=old_key)
        l = map(func, l)
        return l


    def dictionary_key_name_change_list_keys(self, l, new_keys=[], old_keys=[]):
        func = lambda D: self.dictionary_key_name_change_multiple(D, new_key=new_keys, old_key=old_keys)
        l = map(func, l)
        return l


    def function_key_name_apply_deprecated(self, D, func, *args):
        if not args:
            args = D.keys()
        new_key = map(func, args)
        D = self.dictionary_key_name_change_multiple(D, new_key, args)
        return D

    def function_key_name_apply(self, D, func, *args):



        if not args:
            D = dict([(func(keyname), value) for keyname, value in D.items()])
            return D
        else:
            new_key = map(func, args)
            D = self.dictionary_key_name_change_multiple(D, new_key, args)
            return D


    #applies a funciton to all the actual key names
    def function_key_name_apply_list(self, l, func, *args):
        l = map(lambda D: self.function_key_name_apply(D, func, *args), l)
        return l


    #Apply certain functions to keys
    #if args empty, just apply to all of them
    def function_key_apply(self, D, func, *args):
        if not args:
            args = D.keys()
        l = [tup for tup in D.items() if tup[0] in list(args)]
        D.update((x, func(y)) for x, y in l)
        return D

    #THE OFFICIAL ONE. NOT SURE WHAT OTHERS ARE
    def function_key_apply_list(self, l, func, *args):
        if not args:
            args = l[0].keys()
        Func = lambda Dict: self.function_key_apply(Dict, func, *args)
        map(Func, l)
        return l


    def function_key_apply_list_add(self, l, func, old_key=None, new_key=None):
        dict_func = lambda D: D.update({new_key: func(D[old_key])})
        map(dict_func, l)
        return l

    #DEPRECATED ONE BELOW
    #applies to all items in dictionary
    def dictionary_function_apply(self, func, D):
        D = self.function_key_apply(func, D)  #doesnt seem to work otherwise
        return D
        D = {i[0]: func(i[1]) for i in D.items()}
        return D

    def dictionary_function_apply_list(self, func, l):
        func_apply = lambda D: self.dictionary_function_apply(D, func)
        l = map(func_apply, l)
        return l


    def key_value_replace_list(self,l,key='Contract_Start_Date__c',old='2017-01-01',new='2016-12-31'):
        l = [DictionaryFunctions().dictionary_combine(D,{key:new}) if D[key] == old else D for D in l]
        return l



class DictionaryExcel(DictionaryKeyManipulate):
    # This method checks if the function is only applicable to one dictionary instead of multiple dictionary.
    # The purpose is to only use a function if it's only applicable and returns True for one dictionary in the list.
    #
    # func - the function that should return True or False against every dictionary in the list with the main dictionary.
    # D - The main dictionary that is being compared to every dictionary within l.
    # k - The key within both dictionaries that is being compared in both.
    #
    # Examples
    # monogamous_dict_list_check(lambda i,a: True if i == a else False, {'name':'bob'},[{'name':'bob'},{'name':'bob'},'name'])
    # False
    #
    # Returns the dictionary that it matches with or false if it matches more than once
    def monogamous_dict_list_check(self, func, D, l, k):
        L = [func(D[k], Dict[k]) for Dict in l]
        if L.count(True) == 1:
            D = [Dict for Dict in l if func(D[k], Dict[k])][0]
            return D
        else:
            return False

    # This method intakes a dictionary and a list, to check which dicitonary within the list is the closest match.
    # It does this by intaking a set of functions that it uses as criteria to find the match against.
    # It will only utilize a function if only one dictionary matches it.
    #
    # D - the dictionary that the closet match is being found for.
    # l - the dicitonary list that is being searched for the closest match.
    # k - the key that is being to find the closest match for.
    # args - the functions that are being utilized to find the closest match.
    def dict_list_closest_match(self, D, l, k, *args):
        for arg in args:
            Dict = self.monogamous_dict_list_check(arg, D, l, k)
            if Dict:
                return Dict


    # Create every possible combination between two list of values from a dictionary
    #
    # Example
    # list_combinations(['foo', 'bar', 'baz'],['x', 'y', 'z', 'w'])
    # #-> [('foo', 'x'),('foo', 'y'),('foo', 'z'),...('baz', 'w')]
    # def list_combinations(self, l1,l2):  #http://stackoverflow.com/questions/1953194/permutations-of-two-lists-in-python
    #     l = list(itertools.product(l1, l2))
    #     return l

    def list_combinations(self, *args):  #http://stackoverflow.com/questions/1953194/permutations-of-two-lists-in-python
        l = list(itertools.product(*args))
        return l


    def list_combinations_from_dicts(self, D1, D2, keys=None):
        if keys:
            D10 = [D1[i] for i in keys if i in D1.keys()]  #DictionaryFunctions().key_filter_item_ignore(D1,*keys)
            D20 = [D2[i] for i in keys if i in D2.keys()]  #DictionaryFunctions().key_filter_item_ignore(D2,*keys)
        else:
            D10 = D1.values()
            D20 = D2.values()
        l = self.list_combinations(D10, D20)
        return l

    # Results of tuples of a score, a target dictionary, and base dictionary
    #
    # func - the function that will evalue True or False
    # D1 - the target dictionary
    # D2 - the base dictionary
    def dictionary_similarity_score_from_func(self, func, D1, D2, keys=None):
        if keys:
            D10 = [D1[i] for i in keys if i in D1.keys()]  #DictionaryFunctions().key_filter_item_ignore(D1,*keys)
            D20 = [D2[i] for i in keys if i in D2.keys()]  #DictionaryFunctions().key_filter_item_ignore(D2,*keys)
        else:
            D10 = D1.values()
            D20 = D2.values()
        l = self.list_combinations(D10, D20)
        # AN IDEA TO HAVE THE KEYS BE IN DESCENDING ORDER OF IMPORTANCE
        # ISSUE IS THAT TWO DICTIONARIES CAN AMTCH THIS ONE ONCE, BUT ONE OF THE KEYS IS MORE IMPORTANT AND SHOULD HAVE A HIGHER SCORE
        counter_func = lambda func, tup, i: len(l) - i if func(*tup) else 0
        l = [counter_func(func, tup, i) for i, tup in enumerate(l)]  # the theory is that
        tup = (sum(l), D1, D2)


        #l = [func(*tup) for tup in l]
        #tup = (l.count(True),D1,D2)
        #print "tup (Number of matches, Target Dict, Base Dict): {}".format(str(tup))
        return tup

    # the goal is to determine if any test evaluates to skip form the function
    # if it does then remove it
    def skip_test_from_func(self, func, D, l, keys=None):
        if keys:
            D10 = [D1[i] for i in keys if i in D1.keys()]  #DictionaryFunctions().key_filter_item_ignore(D1,*keys)
            D20 = [D2[i] for i in keys if i in D2.keys()]  #DictionaryFunctions().key_filter_item_ignore(D2,*keys)
        else:
            D10 = D1.values()
            D20 = D2.values()
        l = self.list_combinations(D10, D20)
        l = [func(*tup) for tup in l]
        for result in l:
            if str(result).lower() == 'skip':
                return 'skip'

    # This is in lieu of monogamous_dict_list_check.
    # The goal here is to return the dictionary that has the highest number of matches amongst all of its items between the dictionaries
    # Otherwise it will return false.
    #
    # arg - the function that will be used to produce the score.
    # D - the dictionary that will be compared across the list
    # l - the list of dictionaries that D is being compared to
    #
    # Returns a dictionary that will be utilized by closest_match_dict_from_list
    def highest_score_dict_pull_from_list(self, arg, D, l, keys=None):
        # produce a score for each dictionary across the list, and the score will be based on how many trues are arrived to across the comparison.
        # create every combination of the values from each D, and then run the function that determines if those are matches across them and count the number of Trues
        # The dictionary with the highest number of Trues is the dictionary to get.
        # How do you determine the dictionary that had the highest number of Trues - could do it by index, or I can reconstruct or create another function that takes in both.

        # create list combinations first so that it can be used in both and it goes faster, the result can be used on teh dictionary_similariy score and determine whether it's worth skipping
        #list_combinations = map(lambda Dict: self.list_combinations_from_dicts(D,Dict,keys=keys),l)
        # now pass it into the the the skipt_test_from_func and dictionary_similarity_score_func


        #if it is a certain kind of function, run a seperate function that will ultimately determine if it shoudl continue trying with the other functions or not
        # this function can only produce the string called skip or it will return false
        # if it is false, then just pass
        # Not ready yet for the keyword skip
        # IF THIS RETURNS A STRING, THEN Just skip this dictionary and dont try any more functions
        # if self.skip_test_from_func(self,arg,D,l,keys=keys):
        #     return 'skip'

        l = map(lambda Dict: self.dictionary_similarity_score_from_func(arg, D, Dict, keys=keys),
                l)  # list of tuples (a score, the target dictionary, the base dictionary )
        #print l



        highest_score = max(map(lambda tup: tup[0], l))
        l = filter(lambda tup: tup[0] == highest_score, l)
        #print l
        if len(
                l) == 1:  #if it has more than one that has the highest score than reject it since, I only want dictionary to match up.
            #print "found one"
            D = l[0][2]  #pull it out of the tuple
            return D
        else:
            return False


    # This returns the closest match of the dictionary and is not just based oon key.
    # It's the same as above dict_list_closest_match, but without the key.
    def closest_match_dict_from_list(self, D, l, keys, *args):
        print
        "dictionary_functions.py, <closest_match_dict_from_list>"
        print
        "\tlooking for match for : {}".format(str(D))
        print
        "\tkeys: {}".format(str(keys))
        #print "\tkey-values: {}".format(str([D[i] for i in keys]))

        for i, arg in enumerate(args):
            #print "testing argument"
            Dict = self.highest_score_dict_pull_from_list(arg, D, l, keys=keys)
            print
            "\ttrying function:{}".format(inspect.getsourcelines(arg)[0][0].strip("['\\n']").strip())
            if Dict:
                #print "Success"
                print
                "\tfound match: {}".format(str(Dict))
                return Dict
            elif isinstance(Dict, str):  # in the case that the function returns Pass
                return None


    def dictionary_index_match(self, l1, l2, k1, k2):
        return l


    # the goal is to merge multiple lists together that may share a key-value pair together
    # the purpose is to merge quickbooks, expensify, bamboo, keyword data
    # Example
    # [{'name':'bob','department':'ops'}]

    # Take in lists of dictionaries and merge them based on certain keys.
    # Be able to utilize certain functions as the merge criteria including 'not' to stop
    # Be efficient so that it goes through the list quickly and doesnt have produce a score for each item across to determine if it's the best relationship


    # Creates all combinations between that dictionary being evaluated and each dictionary in the target list and then creates a score
    # The one with the highest score and that no onter dictionary in that list has that score gets it

    # args - the lists that are to be merged
    # kwargs - the functions to do the evaluating
    # if the function evaluates to an error, then skip that
    # def multiple_list_merge(self,*args,**kwargs):
    #     return args
    #     pass

    #
    def multiple_list_merge(self, *args):
        base_list = args[0]
        L = list(chain(*args[1:]))

        for D in base_list:
            for Dict in L:
                if any([tup in Dict.items() for tup in D.items()]):
                    D.update(Dict)
        return base_list


    def multiple_list_merge2(self, *args):
        print
        args
        l = map(lambda subli: [D.values() for D in subli], args)
        print
        l
        l = list(itertools.product(*l))
        print
        l


class DictionaryMerge(DictionaryExcel):

    # This is a specific merge of two arrays in which one array needs to be deduped on a key
    # Multi to Multi Array Lists (e.g. Multiple Campaigns can be associated to Multiple Opps)
    # i.e. a Campaign can have multiple opps, and an opp can have multiple campaigns
    # As such, to merge Campaigns onto an Opp, the following needs to happen
    # 1) The Campaign is deduped to an Account Level
    # 2) The dedupe is turned into a dictionary to be able to be looked up
    # Inputs:
    # Primary_Array - Array that will ahve attributes added to it
    # Appending_Array - Array that will be deduped and then added to Primary Array
    # Primary_Key - The key on the Primary Array that will merge to the Appending Array
    # Appending_Key - The key on the appending Array that will be collapsed upon and added to it based on that
    # The primary key will have to be the same key as the appending_key
    def multi_dictionary_list_merge_from_deduped_list(self,primary_array,appending_array,primary_key,appending_key):
        search_dict = DictionaryFunctions().collapse_dict_sum_deduped_keys_create_dictionary(appending_array,appending_key)
        l = DictionaryFunctions().array_merge_from_search_dict(primary_array,search_dict,keyname=primary_key)
        return l


    #D2 gets the last word in terms of what is beinng overwritten
    def dictionary_combine(self, D1, D2):
        D = dict(D1.items() + D2.items())
        return D

    # inspirted by dictionary combine
    # take in a dictionary and multiply it for a list
    # input_dictionary = dictionary that will be reproduced
    # dictionary_list = input_dictionary will be applied to dictionary_list
    def dictionary_combine_duplicate_based(self,input_dictionary,dictionary_list):
        tup_list = zip(dictionary_list,DictionaryFunctions().dictionary_duplicate_multiply(input_dictionary,len(dictionary_list)))
        l = [DictionaryFunctions().dictionary_combine(D,dictionary_list_item) for dictionary_list_item,D in tup_list]
        return l

    # takes in dictionaries and it combines them
    def dictionary_combine_multiple(self, *args):
        #l = list(itertools.chain(*args)) - doesnt work
        L = []
        for i in args:
            #print i
            L = L + i.items()
        D = dict(L)
        return D

    # merges the first dict with the second, third with the fourt, etc.
    def merge_based_on_odd_even_pairs(self, l):
        #print "dictionary_functions.py , <merge_based_on_odd_even_pairs>"
        odds = [D for i, D in enumerate(l) if i % 2 != 0]
        evens = [D for i, D in enumerate(l) if i % 2 == 0]
        #print "odds: {}".format(odds)
        l = DictionaryFunctions().multiple_dict_list_merge_by_index(odds, evens)
        return l

    #combine multiple dictionary lists together by their index
    def multiple_dict_list_merge_by_index(self, *args):
        l = zip(*args)
        #print "dictionary_functions.py , <multiple_dict_list_merge_by_index>"
        #print "\tl: {}".format(str(l))
        l = [DictionaryFunctions().dictionary_combine_multiple(*tup) for tup in l]
        return l


    #returns only if there is a match
    def dictionary_index_match(self, l, L, i, I):
        update_func = lambda i: filter(lambda D: True if D[I] == i else False, L)[0]
        final_list = []
        for D in l:
            try:
                final_list.extend(DictionaryFunctions().dictionary_combine(D, update_func(D[i])))
            except IndexError:
                pass

        return final_list

    def dictionary_list_combine_dict(self, dicts):
        D = {}
        for Dict in dicts:
            D.update(Dict)
        return D
        super_dict = defaultdict(set)  # uses set to avoid duplicates
        for d in dicts:
            for k, v in d.iteritems():
                super_dict[k].add(v)
        return super_dict


    #appends two lists together?
    def list_combine_lists(self, *args):
        l = list(itertools.chain(*args))
        return l

    def return_true_from_search(self, D0, D1):
        if re.search(D0, D1, re.IGNORECASE) or re.search(D1, D0, re.IGNORECASE):
            return True
        else:
            return False

    # def levenstein_ratio_pull(self,l,s,k,new_key ='Levenshtein Ratio'):
    # 	[D.update({new_key:Levenshtein.ratio(s,D[k])}) for D in l]
    # 	l = DictionaryFunctions().dictionary_sort_on_key(l,new_key)
    # 	#print "levenstein list: " + str(l)
    # 	#print l[0]
    # 	return l[0]
    #search both ways
    #choose the key that has the most both ways
    def dictionary_pull_from_search(self, D, L, k1=None, k2=None):
        #l = filter(lambda Dict: re.search(D[k1],Dict[k2],re.IGNORECASE),L)
        l = filter(lambda Dict: self.return_true_from_search(D[k1], Dict[k2]), L)[0]
        #D = self.levenstein_ratio_pull(l,D[k1],k2)
        return D

    def dictionary_filter_list_regex(self, D, L, k1=None, k2=None):
        try:
            D = self.dictionary_pull_from_search(D, L, k1=k1, k2=k2)
        except:
            pass
        #print "Not Found " + str(D)
        return D

    #l2 update keys to l1
    def dictionary_merge_regex(self, l, L, k1='Brand', k2='Name'):
        [D.update(self.dictionary_filter_list_regex(D, L, k1=k1, k2=k2)) for D in l]
        return l


    #take in two dictionaries and have them merge
    #to list 1 under the condition that list1 doesn't have
    #that key already
    def dictionary_list_merge_iter(self, lsta, lstb, keyname):
        result = defaultdict(dict)
        for c_dict in chain(lsta, lstb):
            result[c_dict[keyname]].update(c_dict)
        l = result.values()
        return l

    #CAN DELETE - SAME AS dictionary_list_merge_loop & just used prior for bill.com api
    #  #takes half as long as merge loop in
    # #I do except keyerror because there are times dictionaries who don't have key in it
    # def DictionaryMergeLoop(self,L1,L2,keyname1,keyname2):
    # 	DesiredList = []
    # 	for Dict2 in L2:
    # 		for Dict1 in L1:
    # 			try:
    # 				if Dict1[keyname1] == Dict2[keyname2]:
    # 					Dict2.update(Dict1)
    # 			except KeyError:
    # 				pass
    # 		DesiredList.append(Dict2)
    # 	return DesiredList
    #

    #takes half as long as merge loop in
    #I do except keyerror because there are times dictionaries who don't have key in it
    #L2 should be longer list
    # if there is a dict in l2 that is not in l1, then it will be excluded
    def dictionary_list_merge_loop(self, L1, L2, keyname1, keyname2):

        DesiredList = []
        for Dict2 in L2:
            for Dict1 in L1:
                try:
                    if Dict1[keyname1] == Dict2[keyname2]:
                        Dict2.update(Dict1)
                except KeyError:
                    pass
            DesiredList.append(Dict2)
        if len(DesiredList) < len(L2):
            v = len(L2) - len(DesiredList)
            print "{} items in L2 did not match and are being excluded".format(str(v))
        return DesiredList

    #issue with the other dicitonary_merge_loops is that the keynames are overwritten one by the other
    def dictionary_list_merge_loop_key_name(self, L1, L2, keyname1, keyname2,key_name1='_list_one',key_name2='_list_two'):
        L1 = DictionaryFunctions().function_key_name_apply_list(L1,lambda i: i + key_name1)
        L2 = DictionaryFunctions().function_key_name_apply_list(L2,lambda i: i + key_name2)

        DesiredList = []
        for Dict2 in L2:
            for Dict1 in L1:
                try:
                    if Dict1[keyname1 + key_name1] == Dict2[keyname2 + key_name2]:
                        Dict2.update(Dict1)
                except KeyError:
                    pass
            DesiredList.append(Dict2)
        if len(DesiredList) < len(L2):
            v = len(L2) - len(DesiredList)
            print "{} items in L2 did not match and are being excluded".format(str(v))
        return DesiredList

    def dictionary_list_loop_based_on_func_base(self,Dicta,append_array,condition_func,result_func,alt=None):
        for Dictb in append_array:
            if condition_func(Dicta,Dictb):
                return result_func(Dicta,Dictb)
        return Dicta
    # loop through two lists, and just do a function to determine if condition is met. if condition met, then do a second function
    #make sure to return if second condition passes
    """
    For every dictionary in the first array, determine if it fits a certain condition with a secondary dictionary
    If it fulfills the condition with the secondary dictionary, process the resulting dictionary
    If the dict doesnt match any criteria in the secondary dictionary, return the first dictionary
    For any of the first dictionaries that dont match, simply pull out
    """
    def dictionary_list_loop_based_on_func(self,base_array,append_array,condition_func,result_func,alt=None):
        L = []
        for Dicta in base_array:
            Dict = self.dictionary_list_loop_based_on_func_base(Dicta,append_array,condition_func,result_func,alt=alt)
            L.append(Dict)
        L = DictionaryFunctions().dict_keys_list_ensure(L)
        return L

    def ditionary_list_loop_based_on_func_multi_to_multi_attribution_base(self,base_dict,append_array,condition_func,result_func):

        append_array = filter(lambda append_dict: condition_func(base_dict,append_dict),append_array)
        if append_array != []:
            return result_func(base_dict,append_array)
        else:
            return base_dict

    # This solves for the fact that multiple in the append array can fit the criteria of the condition func
    def ditionary_list_loop_based_on_func_multi_to_multi_attribution(self,base_array,append_array,condition_func,result_func):
        l = [self.ditionary_list_loop_based_on_func_multi_to_multi_attribution_base(base_dict,append_array,condition_func,result_func) for base_dict in base_array]
        # l = []
        # for enum,i in enumerate(base_array):
        #     Dict = self.ditionary_list_loop_based_on_func_multi_to_multi_attribution_base(i,append_array,condition_func,result_func)
        #     L.append(Dict)
        return l

    #takes half as long as merge loop in
    #I do except keyerror because there are times dictionaries who don't have key in it
    #L2 should be longer list
    # Difference is that it will include anything in l1 if its not a match
    # it says, match it if you can, but if not include it anyway for l1 as well
    def dictionary_list_merge_loop_include(self, L1, L2, keyname1, keyname2):
        DesiredList = []
        for Dict2 in L2:
            for Dict1 in L1:
                try:
                    if Dict1[keyname1] == Dict2[keyname2]:
                        Dict2.update(Dict1)
                except KeyError:
                    pass
            DesiredList.append(Dict2)
        DesiredList = DictionaryFunctions().dict_keys_list_ensure(DesiredList)
        try:
            try:
                lx = map(lambda D: D[keyname1], DesiredList)
            except KeyError:
                lx = []
            excluded_list = [D for D in L1 if D[keyname1] not in lx]
            l = DesiredList + excluded_list
        except KeyError:

            l = DesiredList
        return l




    # Create list of tuples with both dictionaries in each
    def dictionary_list_merge_loop_include_dict_tup(self, L1, L2, keyname1, keyname2):
        DesiredList = []
        for Dict2 in L2:
            for Dict1 in L1:
                try:
                    if Dict1[keyname1] == Dict2[keyname2]:
                        tup = (Dict1,Dict2)
                except KeyError:
                    pass
            DesiredList.append(tup)

        l1 = map(lambda tup: tup[0],DesiredList)
        l1 = [(D,None) for D in L1 if D not in l1]

        l2 = map(lambda tup: tup[1],DesiredList)
        l2 = [(None,D) for D in L2 if D not in l2]

        l = DesiredList + l1 + l2

        return l

    # Create a new dictionary that has them combined
    def dict_combine_list_form_on_uniques(self,D1,D2):
        L = []
        for tup in D1.items():
            try:
                if D2[tup[0]] == tup[1]:
                    L.append(tup)
                else:
                    L.append(tup[0],[tup[1],D2[tup[0]]])
            except KeyError:
                L.append(tup)
        D = dict(L)
        return D




    # Instead of creating a merge loop with a tupe as above
    # Merge All Values that are the Same as One and if not make it a list
    # e.g.
    # l1 = [{'id':1,'value':2}]
    # l2 = [{'id':1,'value':3},{'id':2,'value':3}]
    # l = [{'id':1,'value':[2,3]},{'id':2,'value':[None,3]}]
    # If I can build this, then I can enter in any two random snapshot firebase arrays, typ in the common key name, and then the
    # Assumes Each has the ID Once
    def dictionary_list_merge_loop_include_dict_list(self, l1, l2, k1, k2):
        L = []
        for D2 in l2:
            for D1 in l1:
                try:
                    if D1[k1] == D2[k2]:
                        D2 = self.dict_combine_list_form_on_uniques(D1,D2)
                except KeyError:
                    pass
            L.append(D2) # if that D2 doesn't match with anything, then it goes to the list anyway

        l = map(lambda D: D[k2], L)
        excluded_list = [D for D in l1 if D[k1] not in l]
        l = L + excluded_list
        return l









    #excludes the ones that dont match
    #l2 is the list you want to kee
    def dictionary_list_merge_loop_exclude(self, L1, L2, keyname1, keyname2):
        DesiredList = []
        for Dict2 in L2:
            for Dict1 in L1:
                try:
                    if Dict1[keyname1] == Dict2[keyname2]:
                        Dict2.update(Dict1)
                        DesiredList.append(Dict2)
                except KeyError:
                    pass

        return DesiredList


    #takes half as long as merge loop in
    #I do except keyerror because there are times dictionaries who don't have key in it
    #L2 should be longer list
    def dictionary_list_merge_loop_(self, L1, L2, keyname1, keyname2):
        DesiredList = []
        for Dict2 in L2:
            for Dict1 in L1:
                try:
                    if Dict1[keyname1] == Dict2[keyname2]:
                        DesiredList.extend([(Dict1, Dict2)])
                except KeyError:
                    pass
            DesiredList.append(Dict2)
        return DesiredList

    #now if they re different, then turn into tuples and take out only those parts and also keep the id




    #takes half as long as merge loop in
    #I do except keyerror because there are times dictionaries who don't have key in it
    #L2 should be longer list
    def dictionary_list_merge_loop2(self, L1, L2, keyname1, keyname2):
        DesiredList = []
        for Dict2 in L2:
            for Dict1 in L1:
                try:
                    if Dict1[keyname1] == Dict2[keyname2]:
                        Dict2.update(Dict1)
                        DesiredList.append(Dict2)
                except KeyError:
                    pass

        return DesiredList


    #zips if the same
    def dictionary_list_merge_zip(self, L1, L2, keyname1, keyname2):
        DesiredList = []
        for Dict2 in L2:
            for Dict1 in L1:
                try:
                    if Dict1[keyname1] == Dict2[keyname2]:
                        tup = (Dict2, Dict1)
                        DesiredList.append(tup)
                except KeyError:
                    pass
        return DesiredList


    #L2 is kept
    def dictionary_list_merge_loop_in(self, L1, L2, keyname1, keyname2):
        DesiredList = []
        for Dict2 in L2:
            for Dict1 in L1:
                #testing
                if str(Dict1[keyname1]) in str(Dict2[keyname2]):
                    #if str(Dict2[keyname2]) in str(Dict1[keyname1]):
                    Dict2.update(Dict1)
                elif str(Dict2[keyname2]) in str(Dict1[keyname1]):
                    #if str(Dict2[keyname2]) in str(Dict1[keyname1]):
                    Dict2.update(Dict1)
            DesiredList.append(Dict2)
        return DesiredList


"""This class compares lists of dictionaries
"""


class DictionaryDifference(DictionaryMerge):
    # return True only if they match, but if an error, return false
    def match_key_check(self,D1,D2,key):
        try:
            return D1[key] == D2[key]
        except:
            return False

    # try to return that key, but if not return False
    def key_return_try(self,D,key,error_return=None):
        try:
            return D[key]
        except:
            return error_return

    # if the D is None, then return none
    def key_names_return_try(self,D,error_return=[]):
        try:
            return D.keys()
        except AttributeError:
            return []



    # identify the differences between two dictionaries and return them as old_value, new_value, and key_name
    # return the differences that changed in D2 from D1, and if the key doesnt exist in one or the other return the new value as none
    # or if one is None, then return them all as None
    # returns a sublist of the differences of the keys
    def dictionary_difference_key_return(self,D1,D2,old_value='old_value',new_value='new_value',field_change='field_change',null_value='NULL'):
        keys = list(set(self.key_names_return_try(D1) + self.key_names_return_try(D2) ))
        l = [{old_value: DictionaryFunctions().key_return_try(D1,key),new_value:DictionaryFunctions().key_return_try(D2,key),field_change:key} for key in keys if not DictionaryFunctions().match_key_check(D1,D2,key)]

        if D1:
            common_dict = dict([(key,D1[key]) for key in keys if DictionaryFunctions().match_key_check(D1,D2,key)])
        else:
            common_dict = dict([(key,D2[key]) for key in keys if self.match_key_check(D1,D2,key)])

        if l == []:
            l = [{old_value:null_value,new_value:null_value,field_change:null_value}]

        l = map(lambda D: DictionaryFunctions().dictionary_combine(common_dict,D) ,l) # have the keys that are the same in there
        return l

    # reverse needed for dictionary_difference_key_return_list_base
    # becasue only want d1 to be in the first place
    def list_compare_on_common_key_return_tup(self,l,d,common_key,reverse=False):
        for D in l:
            if D[common_key] == d[common_key]:
                if reverse:
                    return (D,d)
                else:
                    return (d,D)
        return None

    # common_key is the id that puts them together
    # commone_key must occur only once in both lists
    def dictionary_difference_key_return_list_base(self,l1,l2,common_key):
        L = []
        for D1 in l1:
            tup = self.list_compare_on_common_key_return_tup(l2,D1,common_key)
            if tup == None:
                tup = (D1,None)
            L.append(tup)

        l1_common_key_list = map(lambda D: D[common_key],l1)
        exclusive_l2 = [D for D in l2 if D[common_key] not in l1_common_key_list]

        for D2 in exclusive_l2:
            tup = self.list_compare_on_common_key_return_tup(l1,D2,common_key,reverse=True)
            if tup == None:
                tup = (None,D2)
            L.append(tup)
        return L

    # this will return the differences in terms of old key, new key for each dictionary where there is a difference  that a common key can potentially have
    # l1 = [{'a':'a','b':'b','id':'123'},{'':'a','def':'b','id':'456'}]
    # l2 = [{'a':'d','b':'c','id':'123'},{'a':'a','b':'123','id':'456'}]
    # l ->[{'field_change': 'a', 'id': '123', 'new_value': 'd', 'old_value': 'a'},
    #  {'field_change': 'b', 'id': '123', 'new_value': 'c', 'old_value': 'b'},
    #  {'field_change': '', 'id': '456', 'new_value': None, 'old_value': 'a'},
    #  {'field_change': 'a', 'id': '456', 'new_value': 'a', 'old_value': None},
    #  {'field_change': 'b', 'id': '456', 'new_value': '123', 'old_value': None},
    #  {'field_change': 'def', 'id': '456', 'new_value': None, 'old_value': 'b'}]
    def dictionary_difference_key_return_list(self,l1,l2,common_key):
        l = self.dictionary_difference_key_return_list_base(l1,l2,common_key) #turns into list of tuples categorized by the id
        l = [self.dictionary_difference_key_return(tup[0],tup[1]) for tup in l]
        l = [item for sublist in l for item in sublist]
        return l



    #simply gets rid of any item in l1 that shares the same key-value as one in dict 2
    def dictionary_list_exclude(self, l1, l2, k):
        print
        "File 'dictionary_functions.py', line 490, in <dictionary_list_exclude>"
        print
        "\t initial length: " + str(len(l1))
        l2 = map(lambda D: D[k], l2)
        l1 = [D for D in l1 if D[k] not in l2]
        print
        "\t resulting length: " + str(len(l1))
        return l1


    def dictionary_zip2(self, l1, l2, key='id'):
        l = [{D[key]: {'old': D, 'new': self.dictionary_filter_try_filter(l2, D[key])}} for D in l1]
        return l


    #return the difference if they dont match
    def key_value_symmetric_difference(self, l1, l2):
        l = set(map(str, l1)).symmetric_difference(set(map(str, l2)))
        l = map(ast.literal_eval, l)
        return l

    #return the difference if they dont match
    #l1 - l2
    def key_value_difference(self, l1, l2):
        l = set(map(str, l1)).difference(set(map(str, l2)))
        l = map(ast.literal_eval, l)
        return l


    # func 1 is on l1 items that are not in l2 - so shoudl be negative  if l2 is the next date
    def key_value_symmetric_difference_based_on_key(self, l1, l2, k,func1=None,func2=None):
        #print "dictionary_functions.py , <key_value_symmetric_difference_based_on_key>"
        l1k = [D[k] for D in l1]
        l2k = [D[k] for D in l2]
        #print "\tlen l1: {}".format(str(len(l1)))
        #print "\tlen l2: {}".format(str(len(l2)))
        l1 = [D for D in l1 if D[k] not in l2k]  #the keys that are not in l2

        l2 = [D for D in l2 if D[k] not in l1k]

        #print "\tlen l1: {}".format(str(len(l1)))
        #print "\tlen l2: {}".format(str(len(l2)))

        if func1:
            l1 = map(func1,l1)
        if func2:
            l2 = map(func2,l2)
        l = l1 + l2
        return l



    def key_value_symmetric_difference_based_on_keys(self, l1, l2, *keys):
        #print "dictionary_functions.py , <key_value_symmetric_difference_based_on_keys>"
        key_name = ','.join(keys)
        join_func = lambda D: ''.join([str(tup[1]) for tup in D.items() if any([str(i) == str(tup[0]) for i in keys])])
        func = lambda D: DictionaryFunctions().dictionary_combine(D, {key_name: join_func(D)})
        l1 = map(func, l1)
        l2 = map(func, l2)

        l = self.key_value_symmetric_difference_based_on_key(l1, l2, key_name)
        l = DictionaryFunctions().key_filter_item_list_not(l, key_name)
        return l


    def key_value_symmetric_difference_based_on_keys_func(self, l1, l2,func1=None,func2=None,keys=[]):
        print "dictionary_functions.py , <key_value_symmetric_difference_based_on_keys_func>"
        print "\tl1 length: {}".format(str(len(l1)))
        print "\tl2 length: {}".format(str(len(l2)))
        key_name = ','.join(keys)
        join_func = lambda D: ''.join([str(tup[1]) for tup in D.items() if any([str(i) == str(tup[0]) for i in keys])])
        func = lambda D: DictionaryFunctions().dictionary_combine(D, {key_name: join_func(D)})
        l1 = map(func, l1)
        l2 = map(func, l2)

        l = self.key_value_symmetric_difference_based_on_key(l1, l2, key_name,func1=func1,func2=func2)
        l = DictionaryFunctions().key_filter_item_list_not(l, key_name)
        print "\tl1 l2 differences: {}".format(str(len(l)))
        return l


    def key_value_difference_from_key(self, l1, l2, k='id'):
        l = DictionaryFunctions().dictionary_list_merge_zip(l1, l2, k, k)  #zips them up together
        key_value_difference_id_return = lambda D1, D2: DictionaryFunctions().dictionary_combine({k: D1[k]}, dict(
            [t for t in D1.items() if str(t).lower() not in str(D2.items()).lower()]))
        func_apply = lambda tup: key_value_difference_id_return(tup[0], tup[1])
        l = map(func_apply, l)
        l = [D for D in l if len(D.items()) > 1]  #so that it only returns when ther eis a difference
        return l


    def dictionary_filter_try_filter(self, l, i):
        try:
            return DictionaryFunctions().dictionary_string_filter_multiple(l, i)[0]
        except IndexError:
            return {'probability': 'Null'}
            pass


            #zips two lists of dictionaries together based on one key

    def dictionary_zip(self, l1, l2, key='id'):
        l = map(lambda D: D[key], l1)
        print
        l2[0]
        l2 = [self.dictionary_filter_try_filter(l2, i) for i in l]
        l2 = filter(None, l2)
        print
        l2[0]

        print
        "sorting"

        l1 = DictionaryFunctions().dictionary_sort_on_key(l1, 'id')
        print
        l1[0:10]
        l2 = DictionaryFunctions().dictionary_sort_on_key(l2, 'id')
        print
        l2[0:10]
        l = [{a[key]: {'old': a, 'new': b}} for a, b in zip(l1, l2)]
        return l


class DictionaryConvenience(DictionaryDifference):
    #This function will look at a list of dictionaries and summarize information about it
    #The purpose is to serve other functions and just produce an overall assessment of the data
    #providing the length, keys, first dictionary
    def dictionary_list_summarize_print(self, l, name=None):
        return l
        # if not name:
        #     name = os.path.basename(__file__)
        # else:
        #     print name
        # try:
        #     print "\tlength:{}".format(str(len(l)))
        #     keys = l[0].keys()
        #     keys = DictionaryFunctions().dictionary_sort_on_key(keys, 0, reverse=False, func=lambda i: i.lower())
        #     #keys.sort()
        #     print "\tkeys: \n\t{}".format(str(keys))
        #     values = [l[0][i] for i in keys]
        #     print "\tvalues: \n\t{}".format(str(values))
        #     print "\tfirst dictionary: \n\t{}".format(str(l[0]))
        #
        # except IndexError:
        #     print "list index not a range - this is an empty list or not a list"
        # except:
        #     print "ERROR with Dictionary List Summarize"

    def dictionary_index_try(self, D, key, alt='None'):
        try:
            return D[key]
        except KeyError:
            return alt
        except:
            return alt


    def dictionary_look_up(self, Dict, Array, key='Id',return_array=False):
        try:
            l = filter(lambda D: Dict[key] == D[key],Array)
            if not return_array:
                return l[0]
            else:
                return l
        except:
            return None



class DictionarySort(DictionaryConvenience):
    # kwargs rule explained below
    # kwargs looks like this {'apple': 'banana', 'son': 'daughter'}
    def sum_range_func(self,subli,value_key,conditional_func):
        if conditional_func and conditional_func(subli[-1:][0]):
            subli = filter(lambda D: conditional_func(D),subli)
            v = sum(map(lambda D: float(D[value_key]),subli))
        else:
            v = 0
        return v

    #accruing on key for value and sort on one key
    # kwargs can be used to filter so if i just wanted to do it on new business, it woudl be type='New Business', and its used as or, instead of and, so if it meets the criteria of one of the kwargs then its good.
    # kwargs is used to filter what is being accrued on, and it's treated as an 'Or' and not an 'And'
    # example result will be each dictionary will have an 'Amount_Accruing
    def dictionary_sort_accruing_on_key_conditional(self,l,sort_func='CloseDate',value_key='Amount',key_name='amount_accruing',reverse=False,conditional_func=None):
        l = DictionaryFunctions().dictionary_sort_on_key_func(l,sort_func,reverse=reverse)
        l = [DictionaryFunctions().dictionary_combine(D,{key_name: self.sum_range_func(l[:i+1],value_key,conditional_func)}) for i,D in enumerate(l)]
        return l

    def dictionary_sort_accruing_on_key_conditional_two_layers(self,l,key1,key2,sort_func='CloseDate',value_key='Amount',key_name='amount_accruing',reverse=False,conditional_func=None):
        l = DictionaryFunctions().list_dict_group_by_two_layers_filter_method(l,key1,key2)# - group by close date and year
        l = map(lambda subli: DictionaryFunctions().dictionary_sort_accruing_on_key_conditional(
            subli,
            sort_func=sort_func,
            value_key=value_key,
            key_name=key_name,
            conditional_func=conditional_func),l)
        l = [item for sublist in l for item in sublist] # - flatten the sublist

        return l


    # purpose is to have it accrue by brand strategist as well as by the year
    def dictionary_sort_accruing_on_key_conditional_group_by_two(self,l,sort_func='CloseDate',value_key='Amount',key_name='amount_accruing',reverse=False,**kwargs):

        return l
    #accruing on key for value and sort on one key
    # kwargs can be used to filter so if i just wanted to do it on new business, it woudl be type='New Business', and its used as or, instead of and, so if it meets the criteria of one of the kwargs then its good.
    def dictionary_sort_accruing_on_key(self,l,sort_key,value_key,key_name='Amount_Accruing',reverse=False):
        l = DictionaryFunctions().dictionary_sort_on_key(l,sort_key,reverse=reverse)
        sum_range_func = lambda subli: sum(map(lambda D: float(D[value_key]),subli))
        l = [DictionaryFunctions().dictionary_combine(D,{key_name: sum_range_func(l[:i+1])}) for i,D in enumerate(l)]
        return l


    def dictionary_sort_sublists_of_list(self,l,index,reverse=True):
        l = sorted(l,key=operator.itemgetter(0)[index],reverse=reverse)

        return l


    def dictionary_sort_on_multiple_keys(self,array,*keys):#http://stackoverflow.com/questions/4233476/sort-a-list-by-multiple-attributes
        s = sorted(array, key=operator.itemgetter(*keys))
        return s

    #Sort the dictionaries based on a certain keys
    #REVERSE TRUE GIVES HIGHEST TO LOWEST
    #Reverse True gives the latest date to the lowest date
    def dictionary_sort_on_key(self, lst, index, reverse=True, func=None, filter_func=None):
        if filter_func:
            lst = filter(lambda D: filter_func(D), L)
        if func:
            return sorted(lst, key=lambda Dict: str(func(Dict[index])), reverse=reverse)
        else:
            return sorted(lst, key=lambda Dict: Dict[index], reverse=reverse)


    def dictionary_sort_on_key_func(self, lst, func, reverse=True):
        return sorted(lst, key=lambda Dict: func(Dict), reverse=reverse)

    # utilize TimeFunctions().date_format_from_string if
    # Reverse gives the highest
    def dictionary_sort_on_key_func_simple(self, lst, func, reverse=False):
        return sorted(lst, key=lambda Dict: func(Dict), reverse=reverse)


    def float_try_literal(self,v):
        try:
            v = float(v)
        except ValueError:
            v = float(v.replace(",",""))
        return v

    def dictionary_sort_on_key_number(self, lst, index, reverse=True, func=None, filter_func=None):
        if filter_func:
            lst = filter(lambda D: filter_func(D), lst)
        if not func:
            func =self.float_try_literal #float
        if func:
            # print "line 1018 below is the list"
            # print lst
            return sorted(lst, key=lambda Dict: func(Dict[index]), reverse=reverse)
        else:
            return sorted(lst, key=lambda Dict: Dict[index], reverse=reverse)


    #convenience functions
    #doesnt take ina func
    def dictionary_lowest_date(self, l, index, filter_func=None, reverse=False,filter_none=False):

        if filter_func:
            print
            "\tbeginning list: " + str(len(l))
            l = filter(lambda D: filter_func(D), l)
            print
            "\tending list: " + str(len(l))
        if filter_none:
            l = filter(lambda D: D[index] != None,l)
        return sorted(l, key=lambda Dict: Dict[index], reverse=reverse)[0]

    #doesnt take ina func
    def dictionary_highest_date(self, l, index, filter_func=None):
        reverse = True
        if filter_func:
            l = filter(lambda D: filter_func(D), l)
        return sorted(l, key=lambda Dict: Dict[index], reverse=reverse)[0]


    def dictionary_sort_on_key_exclude(self, l, index, reverse=True, func=None):
        Headers = l[0]
        l.pop(0)
        l = self.dictionary_sort_on_key(l, index, reverse=reverse, func=func)
        l.insert(0, Headers)
        return l


class DictionaryDataAnalysis(DictionarySort):
    # This method finds the ultimate 'parent' of an account within a list
    # l - list it will search for parent in
    # i - the id of the account that can be an parent
    # k1 - the key name of the identifier that is the account or can be the parent
    # k2 - the key name of the identifier that is the parent id
    def ultimate_parent_return(self, l, i, k1='id', k2='parentid'):
        while True:
            try:
                D = filter(lambda D: True if D[k1] == i else False, l)[0]  #finds all the accounts with that id
            except IndexError:  # if there is an index error it means it couldnt find that parent id in the account ids so it must be the ultimat eparent
                return D
                break
            if not D[k2] or str(D[k2]).lower() == 'none':  #if it doesnt have a parent, return it
                return D
                break
            else:  #otherwise, set the parent id as the new id  to seacrch for and see if that has a parent
                #print "found parent: {}".format(str(D[k2]))
                i = D[k2]


    # update new key of ultimate parent id key
    def ultimate_parent_return_list(self, l, k1='AccountId', k2='Account_ParentId', key_name='ultimate_parent_id'):
        L = l
        for D in l:
            Dict = self.ultimate_parent_return(L, D[k1], k1=k1, k2=k2)
            D.update({key_name: Dict[k1], 'ultimate_parent_name': Dict['Account_Name']})
        return l


    # update new key of ultimate parent id key
    def ultimate_parent_return_list2(self, l, k1='Id', k2='ParentId', key_name='ultimate_parent_id'):
        L = l
        for D in l:
            Dict = self.ultimate_parent_return(L, D[k1], k1=k1, k2=k2)
            D.update({key_name: Dict[k1], 'ultimate_parent_name': Dict['Name']})
        return l


    #This method takes in a list of dictionaries and counts
    #the occurence of each key type for each dictionary
    #The result should be a dictionary of the keys
    #with each one having set of dictionaries that
    #has the count for each one of the unique types for that
    #one
    def list_key_value_unique_count(self, l, k=None):
        if not k:
            k = l[0].keys()
        D = {}
        for key in k:
            D.update({key: self.list_dictionary_unique_values_count(l, key)})
        return D


    #this method takes in a key and a list of dictionaries
    #then creates a resulting dictionary with the unique values
    #for each and their count in the list
    def list_dictionary_unique_values_count(self, l, k):
        L = self.list_dictionary_unique_values(l, k)  #unique counts
        D = {}
        for i in L:
            D.update(
                {i:
                     self.list_key_count_from_dictionary_key(l, k, i)
                 })
        return D

    # similar to above, this metho dimply looks and pulls at all the unique values at a key in a list of dictionaries
    def list_dictionary_unique_values_list(self,l,k):
        l = list(set(map(lambda D: D[k],l)))
        l.sort()
        for i in l:
            print i
        return l


    #This one counts one for every dictionary that has
    #that value in the key
    def list_key_count_from_dictionary_key(self, l, k, v):
        l = filter(lambda D: re.search(v, D[k]), l)
        v = len(l)
        return v


    #this method just dedupes the list of dictionaries
    def dictionary_list_dedupe(self, l, alt=False, show=False):
        print
        "File 'dictionary_functions.py', line 575, in <dictionary_list_dedupe>"
        print
        "\t initial length: " + str(len(l))

        if alt:
            func = eval
            #L = map(eval, list(set(map(str, l))))
        else:
            func = ast.literal_eval
            #L = map(ast.literal_eval, list(set(map(str, l))))

        L = map(func, list(set(map(str, l))))
        #l = map(ast.literal_eval,l)
        print
        "\t resulting length: " + str(len(L))
        if show:
            l = [tup[0] for tup in Counter(map(str, l)).items() if tup[1] > 1]
            l = map(func, l)
            print
            "\t dupes:\n\t{}".format(str(l))

        return L

    #this just re-writes over the old dictionary if the same key is found
    def dictionary_list_dedupe_from_key(self, l, k):
        L = list(set(map(lambda D: D[k], l)))

        l = [filter(lambda D: True if i == D[k] else False, l)[0] for i in L]
        return l


    #This method identifies all unique values for a given
    #dictionary key
    #just filter for that key to create a list and then
    #dedupe
    def list_dictionary_unique_values(self, l, k):
        l = map(lambda D: D[k], l)
        l = list(set(l))
        return l


class DictionaryStructureReformat(DictionaryDataAnalysis):
    # need to create new categories for loss reasons
    def bool_create_from_key_name_list(self,l,term=None,key_name_append='Loss Reason Category',key_name_search='Loss_Reason__c'):
        new_key_name = key_name_append + term.lower().replace(" ","_")
        l = map(lambda D: DictionaryFunctions().dictionary_combine(D,{new_key_name:True}) if term.lower() in str(D[key_name_search]).lower() else DictionaryFunctions().dictionary_combine(D,{new_key_name:False}),l)
        return l





    # Purpose is to take in two datasets, and create two new datasets from the primary dataset
    # output dataset 1: data that doesnt exist



    # If one of the values of a dictionary is a list of dictionaries
    # then create a list of dictionaries multiplied by that list
    #DictionaryFunctions().dictionary_flatten_iter_list()



    # The purpose of this is to serve the next function that applies a function on dictionaries that meet a criteria
    # to those that don't
    def target_list_determine_indexes(self, l, conditional_func=None):
        target_dicts = [{'dict': D, 'start_index': i} for i, D in enumerate(l) if
                        conditional_func(D)]  #forms the list of dictionaries that meet the crtieria with their index
        for i, D in enumerate(target_dicts):
            try:
                D.update({'end_index': target_dicts[i + 1]['start_index']})
            except IndexError:
                D.update({'end_index': len(l)})
        return target_dicts

    # This method manipulates a list of dictionaries so that the dictionaries that meet certain criteria within the list
    #   are applied to dictionaries that don't meet that criteria, which must come directly after the dictionary
    #   that met that criteria and before the next dictionary that meets that criteria.
    #
    # The purpose of this method is to take in a list of dictionaries from an excel spreadsheet pulled from ADP, and
    #   have each person's commissions next to their name.
    #
    # l - list of dictionaries.
    # conditional_func - a method that determines if a dict within the list is True or False
    # applicable_func - a method that manipulates the item within the list with the immediately preceding dict that met the criteria of the conditional_func.
    #       The first argument for applicable_func is the target dict and second is the other one
    #
    # Results in a list of dictionaries where each dictionary has been applied a dictionary that met the criteria.
    def list_dictionary_criteria_between_apply(self, l, conditional_func=None, applicable_func=None):
        target_dicts = self.target_list_determine_indexes(l, conditional_func=conditional_func)
        for D in target_dicts:
            for i in range(D['start_index'], D['end_index']):
                l[i] = applicable_func(D['dict'], l[i])
        return l


    """
    THIS Changes a string to a dictionary if it is a dictionary
    """
    #this method just dedupes the list of dictionaries
    def dictionary_convert_from_string(self, s, alt=False):
        #print "File 'dictionary_functions.py', line 1010, in <dictionary_convert_from_string>"
        try:
            if alt:
                D = eval(s)
            else:
                D = ast.literal_eval(s)
        except ValueError:  #ValueError: malformed string
            D = s
        return D

    #this method just dedupes the list of dictionaries
    def dictionary_convert_from_url(self, url_string):
        """
        url_string = %7B%22actions%22%3A%5B%7B%22name%22%3A%22game%22%2C%22type%22%3A%22button%22%2C%22value%22%3A%22war%22%7D%5D%2C%22callback_id%22%3A%22wopr_game%22%2C%22team%22%3A%7B%22id%22%3A%22T029TKV1Q%22%2C%22domain%22%3A%22curalate%22%7D%2C%22channel%22%3A%7B%22id%22%3A%22D03H3BBG7%22%2C%22name%22%3A%22directmessage%22%7D%2C%22user%22%3A%7B%22id%22%3A%22U03H3BBFT%22%2C%22name%22%3A%22chriscruz%22%7D%2C%22action_ts%22%3A%221491601729.731020%22%2C%22message_ts%22%3A%221491601515.419233%22%2C%22attachment_id%22%3A%221%22%2C%22token%22%3A%22GEis0nBtzMZ9lMbJ7oRizSFV%22%2C%22is_app_unfurl%22%3Afalse%2C%22original_message%22%3A%7B%22text%22%3A%22Please+approve+your+commissions%22%2C%22username%22%3A%22Commissions+Bot%22%2C%22bot_id%22%3A%22B4HCUKC04%22%2C%22attachments%22%3A%5B%7B%22callback_id%22%3A%22wopr_game%22%2C%22fallback%22%3A%22Commissions+Error%22%2C%22text%22%3A%22Commissions+Summary%22%2C%22title%22%3A%22Commissions+Detail%22%2C%22id%22%3A1%2C%22title_link%22%3A%22https%3A%5C%2F%5C%2Fapi.slack.com%5C%2F%22%2C%22color%22%3A%223AA3E3%22%2C%22actions%22%3A%5B%7B%22id%22%3A%221%22%2C%22name%22%3A%22game%22%2C%22text%22%3A%22Approve%22%2C%22type%22%3A%22button%22%2C%22value%22%3A%22war%22%2C%22style%22%3A%22danger%22%2C%22confirm%22%3A%7B%22text%22%3A%22Please+approve+your+commissions+for+%24x+dollars%22%2C%22title%22%3A%22Please+approve+your+commissions%22%2C%22ok_text%22%3A%22Yes%22%2C%22dismiss_text%22%3A%22No%22%7D%7D%5D%7D%5D%2C%22type%22%3A%22message%22%2C%22subtype%22%3A%22bot_message%22%2C%22ts%22%3A%221491601515.419233%22%7D%2C%22response_url%22%3A%22https%3A%5C%2F%5C%2Fhooks.slack.com%5C%2Factions%5C%2FT029TKV1Q%5C%2F165744086033%5C%2Fg5Gx39Efic8osDaD4k7umGOy%22%7D"

        Parameters
        ----------
        url_string

        Returns
        -------

        """
        #print "File 'dictionary_functions.py', line 1010, in <dictionary_convert_from_string>"
        D = urllib.unquote(url_string).decode('utf8')
        D = loads(D)
        #{u'attachment_id': u'1', u'response_url': u'https://hooks.slack.com/actions/T029TKV1Q/165744086033/g5Gx39Efic8osDaD4k7umGOy', u'action_ts': u'1491601729.731020', u'original_message': {u'username': u'Commissions+Bot', u'attachments': [{u'title': u'Commissions+Detail', u'color': u'3AA3E3', u'text': u'Commissions+Summary', u'actions': [{u'style': u'danger', u'name': u'game', u'confirm': {u'text': u'Please+approve+your+commissions+for+$x+dollars', u'dismiss_text': u'No', u'ok_text': u'Yes', u'title': u'Please+approve+your+commissions'}, u'text': u'Approve', u'value': u'war', u'type': u'button', u'id': u'1'}], u'title_link': u'https://api.slack.com/', u'callback_id': u'wopr_game', u'fallback': u'Commissions+Error', u'id': 1}], u'text': u'Please+approve+your+commissions', u'ts': u'1491601515.419233', u'subtype': u'bot_message', u'type': u'message', u'bot_id': u'B4HCUKC04'}, u'actions': [{u'type': u'button', u'name': u'game', u'value': u'war'}], u'callback_id': u'wopr_game', u'token': u'GEis0nBtzMZ9lMbJ7oRizSFV', u'is_app_unfurl': False, u'user': {u'id': u'U03H3BBFT', u'name': u'chriscruz'}, u'team': {u'domain': u'curalate', u'id': u'T029TKV1Q'}, u'message_ts': u'1491601515.419233', u'channel': {u'id': u'D03H3BBG7', u'name': u'directmessage'}}

        return D

    def dictionary_convert_from_string_list(self, l, alt=False):
        l = map(lambda s: self.dictionary_convert_from_string(s, alt=alt), l)
        return l

    # this method looks to make sure the string has a { or } at the beginning and end of it
    def bracket_ensure_string(self, s):
        if s[0] != "{":
            s = "{" + s
        if s[-1:] != "}":
            s = s + "}"
        return s

    # This method looks at a string if it's a dictionary list
    #
    def dictionary_list_convert_from_string(self, s, alt=False):
        #if it just has null
        s = s.replace("null", "'null'")
        s = s[1:][:-1]  # get rid of [ and ] at the beginning and end
        l = [self.bracket_ensure_string(i) for i in s.split("},{")]
        l = self.dictionary_convert_from_string_list(l, alt=alt)
        return l


    def aggregate_func_try(self,i,func,keys,l):
        try:
            if 'date' in i:
                r = ''
            elif i in keys:
                r = func([D[i] for D in l])
            else:
                r = ''
        except TypeError:
            r = ''
        return r
    """
    BELOW USED TO FORMULATE TABLES AND SUBJECTS FROM EMAIL
    """
    #just sum up the or count up each of them
    #the values dont need to be floats, but need to all evaluate to floats
    def dict_total_from_list(self, l, keys=None, func=None):
        if not func:
            func = sum
        if not keys:
            keys = l[0].keys()
            keys = [i for i in keys if 'date' not in str(i).lower()]
        l = DictionaryFunctions().function_key_apply_list(l, DictionaryFunctions().float_convert_try)
        #aggregate_func = lambda i: func([D[i] for D in l]) if i in keys else ''

        aggregate_func = lambda i: self.aggregate_func_try(i,func,keys,l)
        D = dict([(k, aggregate_func(k)) for k in l[0].keys()])
        return D

    #dictionary needs to have a function as values
    #meant to come from table_formulate_from_list
    #THE FUNCTION MUST PROCESS THE ENTIRE DICT AND NOT JUST THAT KEY
    def func_key_apply(self, l, D):
        for Dict in l:
            for tup in D.items():
                try:
                    r = {tup[0]: tup[1](Dict)}
                except:
                    print
                    "dictionary_functions.py, line 1028, <func_key_apply>"
                    print
                    "\tError: " + str(Dict)
                    r = Dict
                Dict.update(r)

        return l



    def date_check(self, s):
        #regex = r'\d{4}[-/]\d{2}[-/]\d{2}'
        #regex = r'\d{2}[-/]\d{2}[-/]\d{4}'
        regex = r'\d{4}[-/]\d{2}[-/]\d{2}'
        if re.search(regex, str(s)):
            return True
        else:
            return False



    #change a dict list into a table appropriate for email sending or uploading to gspread
    #adds a total row, applies functions to certain
    # lower_case_key_apply - makes it so that the the caps of the headers dont matter, but then makes the result lower case
    def table_formulate_from_list(self, l, totals=None, headers=None, sort=None, reverse=True, append_counter=None,
                                  sort_type=None,lower_case_key_apply=False,append_total_column=False, **kwargs):

        if sort:
            if sort_type:
                l = DictionaryFunctions().dictionary_sort_on_key_number(l, sort,reverse=reverse)
            else:
                l = DictionaryFunctions().dictionary_sort_on_key(l, sort, reverse=reverse)

        if append_counter:
            if str(append_counter).lower() == 'reverse':
                l.reverse()
                l = [DictionaryFunctions().dictionary_combine(D, {'counter': i + 1}) for i, D in enumerate(l)]
                l.reverse() #reverse it again to put it back in the original order
            else:
                l = [DictionaryFunctions().dictionary_combine(D, {'counter': i + 1}) for i, D in enumerate(l)]

        if totals:

            l.append(DictionaryFunctions().dict_total_from_list(l, keys=None))  #add total row to the dict list


        if kwargs:
            l = DictionaryFunctions().func_key_apply(l,kwargs)  #apply a function to each key-value pair if kwargs for that key value


        l = DictionaryFunctions().dictionaries_list_convert(l)  #turn it into list
        if lower_case_key_apply:
            headers = map(lambda i: i.title(),headers)
            l[0] = map(lambda i: i.title(),l[0])

        if headers:
            l = DictionaryFunctions().list_reordered(l, headers)

        if totals:
            if append_total_column: #so that it only aggregates the bottom row on one
                print "full l: {}".format(str(l))
                first_row = l[0]
                subli = [first_row.index(i) for i in first_row if str(i).lower() not in map(lambda i: str(i).lower(),append_total_column)]
                for sub in subli:
                    l[-1:][0][sub] = ''
                l[-1:][0][0] = 'Total'

            else:
                # last_row = l[-1:][0]
                # subli = [last_row.index(i) for i in last_row if self.date_check(i)]
                # for sub in subli:
                #     l[-1:][0][sub] = ''
                l[-1:][0][0] = 'Total'


        #place the table columns in particular order if it is in a certain order
        return l

    def float_convert_test(self, i):
        try:
            i = i.replace(",", "")
            v = float(i)
        except:
            print "error: {}".format(str(i))
            i = str(i).replace(",", "")
            v = float(i)
        return v

    def is_float_test(self, i):

        try:
            float(i)
            return True
        except:
            try:
                i = i.replace(",", "")
                float(i)
                return True
            except:
                return False

                #v = float(i)
                #return v

    #the string must have {} where the number will be
    def text_formulate_from_list(self, s, l, key=None, func=None, format_func=None):
        if not func:
            func = sum

        v = str(func(map(lambda D: self.float_convert_test(D[key]), l)))
        if format_func:
            v = format_func(v)
        s = s.format(v)
        return s


    #Input: [{'upsell - new': '274996.29', 'renewal': '353956.00', 'new business': '516666.67', 'date': '1/1/2015', 'upsell': '106186.80', 'total': '1251805.76', 'total renewal bookings': '735139.09'}, {'upsell - new': '168809.69', 'renewal': '435638.00', 'new business': '516666.67', 'date': '2/1/2015', 'upsell': '130691.40', 'total': '1251805.76', 'total renewal bookings': '735139.09'}, {'upsell - new': '168809.69', 'renewal': '435638.00', 'new business': '516666.67', 'date': '3/1/2015', 'upsell': '130691.40', 'total': '1251805.76', 'total renewal bookings': '735139.09'}, {'upsell - new': '294894.67', 'renewal': '379567.67', 'new business': '633333.33', 'date': '4/1/2015', 'upsell': '113870.30', 'total': '1421665.97', 'total renewal bookings': '788332.64'}, {'upsell - new': '294894.67', 'renewal': '379567.67', 'new business': '633333.33', 'date': '5/1/2015', 'upsell': '113870.30', 'total': '1421665.97', 'total renewal bookings': '788332.64'}, {'upsell - new': '294894.67', 'renewal': '379567.67', 'new business': '633333.33', 'date': '6/1/2015', 'upsell': '113870.30', 'total': '1421665.97', 'total renewal bookings': '788332.64'}, {'upsell - new': '269039.61', 'renewal': '346289.00', 'new business': '626666.67', 'date': '7/1/2015', 'upsell': '103886.70', 'total': '1345881.97', 'total renewal bookings': '719215.31'}, {'upsell - new': '269039.61', 'renewal': '346289.00', 'new business': '626666.67', 'date': '8/1/2015', 'upsell': '103886.70', 'total': '1345881.97', 'total renewal bookings': '719215.31'}, {'upsell - new': '269039.61', 'renewal': '346289.00', 'new business': '626666.67', 'date': '9/1/2015', 'upsell': '103886.70', 'total': '1345881.97', 'total renewal bookings': '719215.31'}, {'upsell - new': '508611.38', 'renewal': '654648.67', 'new business': '960000.00', 'date': '10/1/2015', 'upsell': '196394.60', 'total': '2319654.64', 'total renewal bookings': '1359654.64'}, {'upsell - new': '508611.38', 'renewal': '654648.67', 'new business': '960000.00', 'date': '11/1/2015', 'upsell': '196394.60', 'total': '2319654.64', 'total renewal bookings': '1359654.64'}, {'upsell - new': '508611.38', 'renewal': '654648.67', 'new business': '960000.00', 'date': '12/1/2015', 'upsell': '196394.60', 'total': '2319654.64', 'total renewal bookings': '1359654.64'}]
    #each dictionary is multiplied so that one of the keys
    #Output: [{'type':'upsell - new','amount':'274996.29','date': '1/1/2015'}]
    #[[{'date': '1/1/2015', 'amount': '274996.29', 'type': 'upsell - new'}, {'date': '1/1/2015', 'amount': '353956.00', 'type': 'renewal'}, {'date': '1/1/2015', 'amount': '516666.67', 'type': 'new business'}, {'date': '1/1/2015', 'amount': '106186.80', 'type': 'upsell'}, {'date': '1/1/2015', 'amount': '1251805.76', 'type': 'total'}, {'date': '1/1/2015', 'amount': '735139.09', 'type': 'total renewal bookings'}], [{'date': '2/1/2015', 'amount': '168809.69', 'type': 'upsell - new'}, {'date': '2/1/2015', 'amount': '435638.00', 'type': 'renewal'}, {'date': '2/1/2015', 'amount': '516666.67', 'type': 'new business'}, {'date': '2/1/2015', 'amount': '130691.40', 'type': 'upsell'}, {'date': '2/1/2015', 'amount': '1251805.76', 'type': 'total'}, {'date': '2/1/2015', 'amount': '735139.09', 'type': 'total renewal bookings'}], [{'date': '3/1/2015', 'amount': '168809.69', 'type': 'upsell - new'}, {'date': '3/1/2015', 'amount': '435638.00', 'type': 'renewal'}, {'date': '3/1/2015', 'amount': '516666.67', 'type': 'new business'}, {'date': '3/1/2015', 'amount': '130691.40', 'type': 'upsell'}, {'date': '3/1/2015', 'amount': '1251805.76', 'type': 'total'}, {'date': '3/1/2015', 'amount': '735139.09', 'type': 'total renewal bookings'}], [{'date': '4/1/2015', 'amount': '294894.67', 'type': 'upsell - new'}, {'date': '4/1/2015', 'amount': '379567.67', 'type': 'renewal'}, {'date': '4/1/2015', 'amount': '633333.33', 'type': 'new business'}, {'date': '4/1/2015', 'amount': '113870.30', 'type': 'upsell'}, {'date': '4/1/2015', 'amount': '1421665.97', 'type': 'total'}, {'date': '4/1/2015', 'amount': '788332.64', 'type': 'total renewal bookings'}], [{'date': '5/1/2015', 'amount': '294894.67', 'type': 'upsell - new'}, {'date': '5/1/2015', 'amount': '379567.67', 'type': 'renewal'}, {'date': '5/1/2015', 'amount': '633333.33', 'type': 'new business'}, {'date': '5/1/2015', 'amount': '113870.30', 'type': 'upsell'}, {'date': '5/1/2015', 'amount': '1421665.97', 'type': 'total'}, {'date': '5/1/2015', 'amount': '788332.64', 'type': 'total renewal bookings'}], [{'date': '6/1/2015', 'amount': '294894.67', 'type': 'upsell - new'}, {'date': '6/1/2015', 'amount': '379567.67', 'type': 'renewal'}, {'date': '6/1/2015', 'amount': '633333.33', 'type': 'new business'}, {'date': '6/1/2015', 'amount': '113870.30', 'type': 'upsell'}, {'date': '6/1/2015', 'amount': '1421665.97', 'type': 'total'}, {'date': '6/1/2015', 'amount': '788332.64', 'type': 'total renewal bookings'}], [{'date': '7/1/2015', 'amount': '269039.61', 'type': 'upsell - new'}, {'date': '7/1/2015', 'amount': '346289.00', 'type': 'renewal'}, {'date': '7/1/2015', 'amount': '626666.67', 'type': 'new business'}, {'date': '7/1/2015', 'amount': '103886.70', 'type': 'upsell'}, {'date': '7/1/2015', 'amount': '1345881.97', 'type': 'total'}, {'date': '7/1/2015', 'amount': '719215.31', 'type': 'total renewal bookings'}], [{'date': '8/1/2015', 'amount': '269039.61', 'type': 'upsell - new'}, {'date': '8/1/2015', 'amount': '346289.00', 'type': 'renewal'}, {'date': '8/1/2015', 'amount': '626666.67', 'type': 'new business'}, {'date': '8/1/2015', 'amount': '103886.70', 'type': 'upsell'}, {'date': '8/1/2015', 'amount': '1345881.97', 'type': 'total'}, {'date': '8/1/2015', 'amount': '719215.31', 'type': 'total renewal bookings'}], [{'date': '9/1/2015', 'amount': '269039.61', 'type': 'upsell - new'}, {'date': '9/1/2015', 'amount': '346289.00', 'type': 'renewal'}, {'date': '9/1/2015', 'amount': '626666.67', 'type': 'new business'}, {'date': '9/1/2015', 'amount': '103886.70', 'type': 'upsell'}, {'date': '9/1/2015', 'amount': '1345881.97', 'type': 'total'}, {'date': '9/1/2015', 'amount': '719215.31', 'type': 'total renewal bookings'}], [{'date': '10/1/2015', 'amount': '508611.38', 'type': 'upsell - new'}, {'date': '10/1/2015', 'amount': '654648.67', 'type': 'renewal'}, {'date': '10/1/2015', 'amount': '960000.00', 'type': 'new business'}, {'date': '10/1/2015', 'amount': '196394.60', 'type': 'upsell'}, {'date': '10/1/2015', 'amount': '2319654.64', 'type': 'total'}, {'date': '10/1/2015', 'amount': '1359654.64', 'type': 'total renewal bookings'}], [{'date': '11/1/2015', 'amount': '508611.38', 'type': 'upsell - new'}, {'date': '11/1/2015', 'amount': '654648.67', 'type': 'renewal'}, {'date': '11/1/2015', 'amount': '960000.00', 'type': 'new business'}, {'date': '11/1/2015', 'amount': '196394.60', 'type': 'upsell'}, {'date': '11/1/2015', 'amount': '2319654.64', 'type': 'total'}, {'date': '11/1/2015', 'amount': '1359654.64', 'type': 'total renewal bookings'}], [{'date': '12/1/2015', 'amount': '508611.38', 'type': 'upsell - new'}, {'date': '12/1/2015', 'amount': '654648.67', 'type': 'renewal'}, {'date': '12/1/2015', 'amount': '960000.00', 'type': 'new business'}, {'date': '12/1/2015', 'amount': '196394.60', 'type': 'upsell'}, {'date': '12/1/2015', 'amount': '2319654.64', 'type': 'total'}, {'date': '12/1/2015', 'amount': '1359654.64', 'type': 'total renewal bookings'}]]
    def dictionary_convert_array_from_table(self, D, k1, k2, exclude_key=None):
        if not isinstance(exclude_key, list):
            exclude_key = [exclude_key]

        l = [{k1: a, k2: b} for a, b in D.items() if a not in exclude_key]
        #map(lambda Dict: Dict.update({exclude_key:D[exclude_key]}),l)

        map(lambda Dict: Dict.update(dict([tup for tup in D.items() if tup[0] in exclude_key])), l)

        return l

    def dictionary_convert_array_from_table_list(self, l, k1, k2, exclude_key=None):
        l = map(lambda D: self.dictionary_convert_array_from_table(D, k1, k2, exclude_key=exclude_key), l)
        l = [item for sublist in l for item in sublist]
        return l


    #Duplicate a dictionary into multiple dictionaries in one list
    def dictionary_duplicate_multiply(self, D, n):
        return [D] * n

    def non_dict_create(self,D):
        try:
            return D.items()
        except:
            return [('undefined',D)]


    def tuple_key_value_flatten(self,tup):
        if isinstance(tup[1], dict):
            return [[(tup[0] + "_" + k, v) for k, v in tup[1].items()]]
        elif isinstance(tup[1], list):
            return [[(tup[0] + "_" + k, v) for k, v in self.non_dict_create(tuptup)] for tuptup in tup[1]]
        else:
            return [[tup]]

    def tuple_duplicate_keys_create(self,tups):
        duplicate_tups = [tup for tup in tups if map(lambda tup: tup[0], tups).count(tup[0]) > 1]
        base_tups = [tup for tup in tups if tup not in duplicate_tups]
        if duplicate_tups:
            duplicate_groups = DictionaryFunctions().group_by_keys(duplicate_tups, 0)
            combinations = DictionaryFunctions().list_combinations(*duplicate_groups)
            L = []
            for combination in combinations:
                combo_tup = base_tups + list(combination)
                L.append(combo_tup)
        else:
            L = [tups]

        return L

    def dictionary_key_value_flatten(self,D):
        l = [self.tuple_key_value_flatten(tup) for tup in D.items()]
        l = [item for sublist in l for item in sublist]
        l = [item for sublist in l for item in sublist]
        l = self.tuple_duplicate_keys_create(l)
        l = map(dict, l)
        return l

    def dictionary_key_value_flatten_multi(self,D):
        if isinstance(D,list):
            func = lambda D: [self.tuple_key_value_flatten(tup) for tup in D.items()]
            l = map(func,D)
            l = [item for sublist in l for item in sublist]
        else:
            l = [self.tuple_key_value_flatten(tup) for tup in D.items()]
        l = [item for sublist in l for item in sublist]
        l = [item for sublist in l for item in sublist]
        l = self.tuple_duplicate_keys_create(l)
        l = map(dict, l)
        return l


    def func_until_flat(self,func,array):
        array = func(array)

        while True:

            try:
                array = map(func, array)
                #PerformanceFunctions().comment("flattening array")
                all_values = DictionaryFunctions().dictionary_list_flatten([D.values() for D in array])
                if all([not isinstance(i,dict) and not isinstance(i,list) for i in all_values]):
                    #PerformanceFunctions().comment("done flattening array")
                    break
            except:
                return array
                break
        return array

    def dictionary_key_value_flatten_loop(self,D):
        D = self.func_until_flat(lambda D: self.dictionary_key_value_flatten(D)[0],D)
        return D

    def array_key_value_flatten_base(self,array):
        l = map(self.dictionary_key_value_flatten,array)
        l = [item for sublist in l for item in sublist]
        l = DictionaryFunctions().dict_keys_list_ensure(l)
        return l

    def array_key_value_flatten(self,array):
        while True:
            array = self.array_key_value_flatten_base(array)
            #PerformanceFunctions().comment("flattening array")
            all_values = DictionaryFunctions().dictionary_list_flatten([D.values() for D in array])
            if all([not isinstance(i,dict) and not isinstance(i,list) for i in all_values]):
                #PerformanceFunctions().comment("done flattening array")
                break
        return array



    def xml_to_dict_key_value_flatten(self,s):
        D = loads(dumps(xmltodict.parse(str(s))))



    #if the value of the key is a list of dictionaries then update the dictionary with key values appropriately
    def dictionary_flatten_iter(self, D):
        for tup in D.items():
            if isinstance(tup[1], list) and isinstance(tup[1][0], dict):
                for i, Dict in enumerate(tup[1]):  #list of dictionaries
                    for tup2 in Dict.items():
                        iter_string = "_" + str(i)
                        D.update({tup[0] + "_" + tup2[0] + iter_string: tup2[1]})
        return D


    #the purpose is to take in a list of dicationaries where each dictionary has some keys that have values that are lists
    #those lists that have to be flattened into key-value pairs
    def dictionary_flatten_iter_list(self, l):
        l = map(self.dictionary_flatten_iter, l)
        return l


    #if the value of the key is a list of dictionaries then create a dictionary for each of those values
    # reverse - if true, then the child dict overrides the parent company
    def dictionary_flatten_iter_smash(self, D, reverse=True):
        L = []
        #print "<dictionary_flatten_iter_smash>"
        #print "\tDict:\n\t{}".format(str(D))

        for tup in D.items():
            try:
                if isinstance(tup[1], list) and isinstance(tup[1][0], dict):
                    for i, Dict in enumerate(tup[1]):  #list of dictionaries - no need for enumerate

                        if reverse:
                            final_dict = DictionaryFunctions().dictionary_combine(D, Dict)
                        else:
                            final_dict = DictionaryFunctions().dictionary_combine(Dict, D)
                        L.append(final_dict)
            except IndexError:  #if it's empty, it will generate this error {'total_credits': '0.00', 'closing_available_balance': '4657664.89', 'closing_ledger_balance': '4657664.89', 'two_day_float': '0.00', 'total_debits': '0.00', 'transaction_details': [], 'opening_ledger_balance': '4657664.89', 'date': '2015-07-20', 'opening_available_balance': '4657664.89', 'one_day_float': '0.00'}
                L.append(D)  #just append the dictionary back if it doesnt have it

        return L

    #the purpose is to take in a list of dicationaries where each dictionary has some keys that have values that are lists
    #those lists that have to be flattened into key-value pairs, but not only, it needs to be a set of separate lists
    # if reverse is true, the child dict over rides the parent dict (only matters if same keys are shared
    def dictionary_flatten_iter_list_smash(self, l, reverse=True, ensure=True):
        l = map(lambda D: self.dictionary_flatten_iter_smash(D, reverse=reverse), l)
        l = [item for sublist in l for item in sublist]
        if ensure:
            l = DictionaryFunctions().dict_keys_list_ensure(l)
        return l


    def dict_multiply_subdicts(self, subli):
        subli = [[str(subli[0]) + "_" + str(tup[0]), tup[1]] for tup in subli[1].items()]
        return subli

    def dict_multiply_condition(self, subli):
        subli = self.dict_multiply_subdicts(subli) if isinstance(subli[1], dict) else [subli]
        return subli

    def dict_multiply_condition_list_check_consider(self, subli):
        L = []
        if isinstance(subli[1],list) and subli[1] != []:
            for subsub in subli[1]:
                subli.append(self.dict_multiply_condition([subli[0], subsub]))
        else:
            L = self.dict_multiply_condition(subli)
        return L

    def dictionary_flatten_list_consider(self,D): #WORKING ON NOW
        #print D
        l = [self.dict_multiply_condition_list_check_consider(list(tup)) for tup in D.items()]
        l = [item for sublist in l for item in sublist]
        D = dict(map(tuple, l))
        return l


    #subli is ['assignee',{u'id': 16367689231059, u'name': u'Eric Zheng'}]
    #in the case that the first value of the key is a list, do dict_multiply_subdicts
    #if the item is a list then do dict_multipy_subdicts, and creat the
    # subli = ['a', 'b']
    def dict_multiply_condition_list_check(self, subli):
        if isinstance(subli[1],list) and subli[1] != []:
            subli = self.dict_multiply_condition([subli[0], subli[1][0]])
        else:
            subli = self.dict_multiply_condition(subli)
        return subli

        #each dictionary potentially has keys that have a list within them

    def dictionary_of_dictionaries_flatten(self,d, parent_key='', sep='_'):
        items = []
        for k, v in d.items():
            new_key = parent_key + sep + k if parent_key else k
            if isinstance(v, MutableMapping):
                items.extend(self.dictionary_of_dictionaries_flatten(v, new_key, sep=sep).items())
            else:
                items.append((new_key, v))
        return dict(items)



    def dictionary_flatten(self, D):
        l = [self.dict_multiply_condition_list_check(list(tup)) for tup in D.items()]
        l = [item for sublist in l for item in sublist]
        D = dict(map(tuple, l))
        return D

    def dictionary_flatten_multiply(self,D,times=3):
        for i in range(times):
            D = self.dictionary_flatten(D)
        return D

    #input is a list of dictionaries
    def dictionary_flatten_list(self, l,multiple=None):
        if multiple:
            for i in range(multiple):
                l = map(self.dictionary_flatten, l)
                l = DictionaryFunctions().dict_keys_list_ensure(l)
        else:
            l = map(self.dictionary_flatten, l)
            l = DictionaryFunctions().dict_keys_list_ensure(l)
        return l

    #true flattening
    def dictionary_list_flatten(self, l):
        l = [item for sublist in l for item in sublist]
        return l

    def dictionary_apply_func_flatten(self, l, func):
        l = map(func, l)
        l = [item for sublist in l for item in sublist]
        return l

    def dictionary_dedupe_based_on_comma(self, l, k):
        func = lambda D, l: [DictionaryFunctions().dictionary_combine(D, {k: i.strip()}) for i in l]
        split_func = lambda i: i.split(',') if ',' in i else [i]
        l = [func(D, split_func(D[k])) for D in l]
        l = [item for sublist in l for item in sublist]
        return l

    def key_filter_item_not(self, Dict, *args):
        args = list(set(Dict.keys()) - set(list(args)))
        Dict = {arg: Dict[arg] for arg in args}
        return Dict

    def key_filter_item_list_not(self, l, *args):
        Func = lambda Dict: self.key_filter_item_not(Dict, *args)
        l = map(Func, l)
        return l

    def key_filter_item(self, Dict, *args):
        #return [arg for arg in args]
        #try:
        Dict = {arg: Dict[arg] for arg in args}
        # except: removed except since couldnt tell the erro
        #     print "file dictionary_functions.py line 734 <key_filter_item>"
        #     print "\tERROR DID NOT FIND KEY" + str(Dict)
        return Dict

    # if that value of the key meets the condition then keep
    def key_filter_item_func(self, D, func):

        D = dict([tup for tup in D.items() if func(tup[1])])
        return D

    def key_filter_item_func_list(self, l, func):
        Func = lambda Dict: self.key_filter_item_func(Dict, func)
        l = map(Func, l)
        return l


    # in case the key doesnt exist, then just update it with this key
    def key_filter_item_try(self, Dict, *args):
        D = {}
        for arg in args:
            try:
                D.update({arg: Dict[arg]})
            except KeyError:
                D.update({arg: 'NULL'})
        return D
        #return [arg for arg in args]
        #try:
        Dict = {arg: Dict[arg] for arg in args}
        # except: removed except since couldnt tell the erro
        #     print "file dictionary_functions.py line 734 <key_filter_item>"
        #     print "\tERROR DID NOT FIND KEY" + str(Dict)
        return Dict


    #difference is that it ignores the args that are not in the dict keys
    def key_filter_item_ignore(self, Dict, *args):
        #return [arg for arg in args]
        args = [arg for arg in args if arg in Dict.keys()]
        try:
            Dict = {arg: Dict[arg] for arg in args}
        except:
            print
            "file dictionary_functions.py line 734 <key_filter_item>"
            print
            "\tERROR DID NOT FIND KEY" + str(Dict)
        return Dict

    #only difference is that you can litterally put an arg in here that doesn't
    #exist within and then it will still work
    def key_filter_item_strong(self, Dict, *args):
        #return [arg for arg in args]
        D = {}
        for arg in args:
            try:
                D.update({arg: Dict[arg]})
            except KeyError:
                pass
        return D

    #Below works
    def key_filter_item_list(self, l, *args):
        Func = lambda Dict: self.key_filter_item(Dict, *args)
        l = map(Func, l)
        return l


    #this method turns dictionary with unique keys
    #to list of dictionaires
    def dictionary_list_format(self, D):
        l = [i[1] for i in D.items()]
        return l

    #this method changes a dictionary to a list
    def dictionary_list_convert(self, Dict, Headers=None):
        if not Headers:
            args = Dict.keys()
            #['CloseDate', 'Amount', 'Commission Percentage', 'name']
            DictFunc = lambda Dict: [Dict[arg] for arg in args]
            return DictFunc(Dict)
        if Headers:
            DictFunc = lambda Dict: [Dict[arg] for arg in Headers]
            return DictFunc(Dict)


    def list_to_dictionary(self, l, keys=None):
        """

        :param l:
        :param keys:
        :return:
        """
        D = {key: item for item, key in zip(l, keys)}
        return D

    #this method changes a list of lists into a dictionary
    def list_of_list_to_dictionary(self, l, keys=None):
        if not keys:
            Func = lambda subli: self.list_to_dictionary(subli, l[0])
            l = map(Func, l[1:])
        else:
            Func = lambda subli: self.list_to_dictionary(subli, keys)
            l = map(Func, l)
        return l

    def header_order_reformat_base(self,key,HeaderTups):
        for tup in HeaderTups:
            if key == tup[0]:
                return tup[1]
            else:
                pass
        return key

    def list_of_lists_reordered_based_on_headers(self, lst, HeaderOrder):
        IndiceList = [lst[0].index(Header) for Header in HeaderOrder]
        Func = lambda subli: [subli[indice] for indice in IndiceList]
        lst = map(Func, lst)
        return lst

    def header_order_reformat(self,l,Headers):
        if isinstance(Headers[0],tuple):
            #func = lambda i: [tup for tup in Headers]
            l = DictionaryFunctions().function_key_name_apply_list(l,lambda i: self.header_order_reformat_base(i,Headers))
            Headers = [i[1] for i in Headers]
            return l,Headers
        else:
            return l,Headers


    #this method changes a list of dictionaries to a list
    def dictionaries_list_convert(self, lst, HeaderInclude=True,headers_sorted=False):
        if HeaderInclude == False:
            return map(self.dictionary_list_convert, lst)
        elif HeaderInclude == True:
            Headers = lst[0].keys()
            if headers_sorted:
                Headers = sorted(Headers, key=lambda s: s.lower())
            lst = map(lambda D: self.dictionary_list_convert(D, Headers=Headers), lst)
            lst.insert(0, Headers)
            return lst

    def dictionaries_to_list_convert_formatted_headers(self,array,header_order):
        #renamed_keys_array, header_order = self.header_order_reformat(array, header_order)
        lol = self.dictionaries_list_convert(array,HeaderInclude=True)
        new_header_order = [tup[0] for tup in header_order]
        lol = self.list_of_lists_reordered_based_on_headers(lol,new_header_order)

        header_row = lol[0]
        header_order_dict = dict(header_order)
        new_header_row = [header_order_dict[i] for i in header_row]
        lol = [new_header_row] + lol[1:]

        return lol



    def dict_strip(self, Dict, *args):
        return map(lambda c: [c[arg] for arg in args], Dict)


class DictionaryCalculationFunctions(DictionaryStructureReformat):
    def calculation_from_list(self, l, key):
        l = sum(map(lambda D: self.float_convert_from_string(
            D[key]), l))
        return l


    def float_convert_from_string(self, v):
        try:
            v = float(v)
        except ValueError:
            v = 0
        return v


class DictionaryFilterFunctions(DictionaryCalculationFunctions):
    def string_between_pull_multiple(self, val, start='Select', end='From'):
        try:
            regex = start + '(.*?)' + end
            val = re.findall(regex, val, re.IGNORECASE)
            return val
        except AttributeError:  #if no parenthesis
            return val

    def string_split_with_quotes(self,s):
        list_of_quotes = self.string_between_pull_multiple(s,start="'",end="'")
        for i in list_of_quotes:
            new_i = i.replace(" ","___")
            s = s.replace(i,new_i)
        l = s.split(' and ')
        l = [i.replace("___"," ") for i in l]
        return l

    # Local: After the query has been split by and, it needs to be split into the fieldname, comparisonoperator, and value
    #
    # Example: closedate = This_Quarter
    # Example: (stagename = 'Closed Won' or Committ__c = True)
    def query_part_split(self,s):
        if 'or' in s.lower() and len(shlex.split(s)) == 7: #Test if it's the case up there
            #['(stagename', '=', 'Closed Won', 'or', 'Committ__c', '=', 'True)']
            subli = shlex.split(s.replace("(","").replace(")",""))
            return [subli[0] + ','+ subli[4],subli[1] + ','+ subli[5],subli[2] + ','+ subli[6]]
        else:
            return shlex.split(s)

    # Private: Create Dictionary of Filters from Query
    def query_filters(self,query):
        s = query.split("where")[1].strip()
        l = self.string_split_with_quotes(s)
        l = map(lambda i: filter(None,self.query_part_split(i) ),l)  #filter None is so that there is no blank space #shlex http://stackoverflow.com/questions/79968/split-a-string-by-spaces-preserving-quoted-substrings-in-python
        l = map(lambda subli: {'fieldName': subli[0], 'comparisonOperator': subli[1], 'value': subli[2]}, l)
        return l

    # returns a function that can compare two values
    def comparison_operator_func(self,comparison_operator_string):
        if comparison_operator_string == "=" or comparison_operator_string == "==":
            return lambda a,b: a == b

    # returns a function that can manpulate both the field value within the dictionary being filtered and the dictionary of the one that needs the filtering
    def field_type_operator_func(self,field_value,field_name):
        func = lambda i: str(i).lower()
        return func

    #{'comparisonOperator': '=', 'fieldName': 'completed', 'value': 'true'}
    def filter_func_from_dictionary(self,conditional_dict,filter_function):
        func = lambda D: filter_function(D[conditional_dict['fieldName']],conditional_dict['comparisonOperator'],conditional_dict['value'])
        # comparison_func = self.comparison_operator_func(conditional_dict['comparisonOperator'])
        # field_func = self.field_type_operator_func(conditional_dict['value'],conditional_dict['fieldName'])
        # func = lambda D: comparison_func(field_func(D[conditional_dict['fieldName']]), field_func(conditional_dict['value']))
        return func
    """
    Determine whether filter dictionary is a Date, Number, or String

    Ultimately the value of the query_value is being compared agains the value of the dictionary
    """
    # Private: Take in an array fo dictionaries and turn into a function that can filter
    def array_filter_func(self,filter_list,filter_function):
        func = lambda D: all([self.filter_func_from_dictionary(conditional_dict,filter_function)(D) for conditional_dict in filter_list])
        return func

    # Public: Filter a dataset based on a query
    # filter_function needs to take in the value within the dictionary, the value of the comparator, and the value of the filter dictionary
    def filter_data_set_from_query(self,data_set,query,filter_function):
        filters = self.query_filters(query)
        filter_func = self.array_filter_func(filters,filter_function)
        data_set = filter(filter_func,data_set)
        return data_set



    # def filter_from_kwargs_dict(self,array,**kwargs):
    #     #kwargs - {'a': 'a', 'b': 'c'}
    #     def consider_list(tup,items):
    #         if isinstance(tup[1],list):
    #             new_tups = [(tup[0],i) for i in tup[1]]
    #             return any([tup in items for tup in new_tups])
    #         else:
    #             return tup in items
    #
    #     array = filter(lambda D: all([consider_list(tup,D.items()) for tup in kwargs.items()]),array)
    #
    #     #array = filter(lambda D: all([tup in D.items() for tup in kwargs.items()]),array)
    #     # for key_name, key_value in kwargs.items():
    #     #     l = filter(lambda D: D[key_name] == key_value, l)
    #
    #     return array
    def filter_from_kwargs_dict(self,array,**kwargs):
        #kwargs - {'a': 'a', 'b': 'c'}
        def consider_list(tup,items):
            if "%" in tup[1]:
                #('a','name'),('a','name 1')
                for name_key,value_key in items:
                    if name_key == tup[0] and tup[1].replace('%',"").strip().lower() in value_key.strip().lower():
                        return True
                return False
            elif isinstance(tup[1],list):
                new_tups = [(tup[0],i) for i in tup[1]]
                return any([tup in items for tup in new_tups])
            else:
                return tup in items

        array = filter(lambda D: all([consider_list(tup,D.items()) for tup in kwargs.items()]),array)

        #array = filter(lambda D: all([tup in D.items() for tup in kwargs.items()]),array)
        # for key_name, key_value in kwargs.items():
        #     l = filter(lambda D: D[key_name] == key_value, l)

        return array


    def unique_identifier_return(self, return_array, compare_array, identifier_key_name, keys, first_item=True):
        l2_ids = map(lambda D: D[identifier_key_name], compare_array)
        D1_uniques = [DictionaryFunctions().key_filter_item(D,*keys) for D in return_array if D[identifier_key_name] not in l2_ids]
        empty_dict = dict([(key,None) for key in keys])
        if first_item:
            l = [(D,DictionaryFunctions().dictionary_combine(empty_dict,{identifier_key_name:D[identifier_key_name]})) for D in D1_uniques]
        else:
            l = [(DictionaryFunctions().dictionary_combine(empty_dict,{identifier_key_name:D[identifier_key_name]}),D) for D in D1_uniques]
        return l

    # return only the keys where they are different for both. if they are same completely, then return None
    def dicts_differences_only_return(self,D1,D2,keys=None,identifier_key_name='Id'):
        if keys:
            D1 = DictionaryFunctions().key_filter_item(D1,*keys)
            D2 = DictionaryFunctions().key_filter_item(D2, *keys)
        l1 = D1.items()
        l2 = D2.items()
        different_keys = [tup[0] for tup in l1 if tup not in l2]
        if identifier_key_name:
            different_keys = different_keys + [identifier_key_name]
        try:
            D1 = DictionaryFunctions().key_filter_item(D1, *different_keys)
            D2 = DictionaryFunctions().key_filter_item(D2, *different_keys)
            return D1,D2
        except:
            return None

    def dicts_differences_only_return_from_list(self,l1,l2,keys=[],identifier_key_name='Id'):
        """

        :param l1:
        :param l2:
        :param keys: the keys by which they will be compared for differences
        :param identifier_key_name:
        :return: returns a tuple (Differences from Dict 1, Differences from Dict 2}
        """
        keys = keys + [identifier_key_name]
        L = []
        for D1 in l1:
            for D2 in l2:
                if D1[identifier_key_name] == D2[identifier_key_name]:
                    tup = self.dicts_differences_only_return(D1,D2,keys=keys,identifier_key_name=identifier_key_name)
                    if tup:
                        L.append(tup)
        #in the acse D2 is  not in l1 or vice versa, identify those and then create the tup to append

        D1_uniques = self.unique_identifier_return(l1,l2,identifier_key_name,keys,first_item=True)
        D2_uniques = self.unique_identifier_return(l2, l1, identifier_key_name, keys, first_item=False)
        L.extend(D1_uniques)
        L.extend(D2_uniques)
        return L



    # compares two dicts and only returns the differences
    # D1 is the dict that whose keys will be returned if they dont exist in D2
    def dict_compare_difference_return(self, D1, D2):
        l = D2.items()
        D = dict([tup for tup in D1.items() if tup not in l])
        return D

    # find the relevant dict to compare to in l
    # then run the function on it to return the difference
    # D - is the dict
    # l - is the array that has a comparable dict
    # k - is the comparison key
    def dict_find_differentiate_from_list(self, D, l, k, func=None, keep_compare_key=True):
        if not func:
            func = self.dict_compare_difference_return

        Dictb = filter(lambda Dict: Dict[k] == D[k], l)[0]
        Dict = func(D, Dictb)
        if keep_compare_key:
            Dict = DictionaryFunctions().dictionary_combine(Dict, {k: D[k]})
        return Dict

    # Goal is to return l1 where the dict only contains keys that are different from l2
    # every dict in l1 should be only compared to the dict in l2 that also has the same key
    # k = the common key that determines which dicts are to be compared together
    def dict_list_filter_out_same_key_values(self, l1, l2, k):
        l = [self.dict_find_differentiate_from_list(D, l2, k) for D in l1]
        return l




    def dict_list_filter_from_list_common_keys(self, l1, l2):
        string_func = lambda tup: map(lambda s: str(s).lower(), tup)
        item_filter = lambda i, items: True if string_func(i) in map(string_func, items) else False
        l = map(lambda D: dict([tup for tup in D.items() if tup[0] == 'Id' or not item_filter(tup, filter(
            lambda Dict: str(D['Id']) == str(Dict['Id']), l2)[0].items())]),
                l1)  #gets rid of any items that area already in the original dict
        return l

    #get rid of any keys from the dict that are not in the list
    def dict_keys_remove_from_list_keys(self, D, l):
        l = l[0].keys()
        D = dict([tup for tup in D.items() if tup[0] in l])
        return D


    # return true if one dict contains the keys of another dict
    # D1 is the base key that D2 must have
    # Example
    # dict_determine_within({'name':'bob'},{'name':'bob','son':'a'})
    # > True
    def dict_determine_within(self, D1, D2):
        for tup in D1.items():
            if not tup in D2.items():
                return False
        return True

    #the first item called Dict is the key it's evaluating against, and the rest are in the list are being evaluated against
    #the purpose is to return true if any of the items match
    #It's the last items that is the dictionary that it's checking if the first keys fit into
    def dict_determine_within_multiple(self, Dict, *args):
        r = any([DictionaryFunctions().dict_determine_within(D, Dict) for D in args])
        return r


    def dict_determine_within_positive(self, D1, D2):
        #print "<dict_determine_within_positive>"
        #print "\tD1: {}".format(str(D1))
        #print "\tD2: {}".format(str(D2))
        for tup in D1.items():
            if tup in D2.items():
                return True
                #print "True"

        return False
        print
        "False"

    def dict_determine_within_multiple_positive(self, Dict, *args):
        r = any([DictionaryFunctions().dict_determine_within_positive(D, Dict) for D in args])
        return r

    #filter the list for only items that share the same key values as the dict
    def list_filter_based_on_dict_keys(self, l, D):
        #D = DictionaryFunctions().dict_keys_remove_from_list_keys(D,l)
        l = filter(lambda Dict: self.dict_determine_within(D, Dict), l)
        return l


    #filter the list for only items that share the same key values as the dict
    # function should compare two variables, the value of one key name to the value of the key name of the other one
    # The function needs the first var to be the key of the array dict and the second var to be on the filter dict
    def list_filter_based_on_dict_keys_func(self, l, filter_dict,func):
        #D = DictionaryFunctions().dict_keys_remove_from_list_keys(D,l)
        l = filter(lambda array_dict: all([func(array_dict[key],filter_dict[key]) for key in filter_dict.keys()]), l)
        return l

    def filter_key_value_dupe_from_list_dict(self, D, l, exception_keys=[], match_key=''):
        l = filter(lambda Dict: D[match_key] == Dict[match_key], l)[0].items()
        print
        "exception keys: " + str(exception_keys)
        print
        "dictionary_functions, line 971, <filter_key_value_dupe_from_list_dict>"
        print
        "\tmatched filtered list: " + str(l)
        print
        "\tDict list matching with: " + str(D.items())
        Dict = dict([tup for tup in D.items() if tup not in l or tup[0] in exception_keys])
        print
        "\tResulting Dict: " + str(Dict)

        return Dict

    def filter_key_value_dupes_from_list(self, l, L, exception_keys=[], match_key=''):
        l = map(lambda D: self.filter_key_value_dupe_from_list_dict(D, L, exception_keys=exception_keys,
                                                                    match_key=match_key), l)
        return l


    def filter_dict_return(self, D, l, func, alt=None):
        try:
            return filter(lambda Dict: func(Dict, D), l)[0]
        except IndexError:
            return alt

    #Conumse list of dictionaries to create list of items at
    #certain index, and return the first that meets a certain
    #criteria
    def dict_list_filter_at_index(self, l, index, func, alt="None"):
        try:
            v = [D[index] for D in l if func(D[index])][0]
        except IndexError:
            v = alt
        return v

    def dictionary_filter_from_index(self, D, i, key, Boolean=True):
        if D[key] == i:
            return Boolean
        else:
            return not Boolean

    #if you set Boolean to False, it'll filter out any dictionary that has that
    def dictionary_list_filter_from_index(self, l, i, key):
        func = lambda D: self.dictionary_filter_from_index(D, i, key)
        l = filter(func, l)
        return l


    #Take in list of dictionaries and filter them by string
    def dictionary_string_filter(self, l, s):
        l = filter(lambda D: re.search(s, str(D)), l)
        return l


    def dictionary_string_filter_multiple(self, l, *args):
        for arg in args:
            l = self.dictionary_string_filter(l, arg)
        return l


    #Input is a dictionary
    #only keep the desired key and time
    #pop off anything that isn't the key item
    #The Key input can be two things now like 'url,_n' which would mean that those two items would be kept
    #used try because wehn mergin not every one of them will have the key
    #Used by FirebaseSOQL
    def dictionary_strip(self, Dict, Key):
        try:
            Dict = {arg: Dict[arg] for arg in Key}
            return Dict
        except KeyError:
            pass


    def item_string_search(self, D, v):
        if re.search(v, str(D)):
            return True
        else:
            return False

    def list_item_string_search(self, l, *args):
        Func = lambda l, v: filter(lambda D: self.item_string_search(D, v), l)
        for arg in args:
            l = Func(l, arg)
        return l


    def dictionary_date_range_filter(self,
                                     D,
                                     func,
                                     key="TransactionDate",
                                     lower_date="7/21/14",
                                     upper_date="7/21/14"):
        #{u'Description': u'DEPOSIT', u'Text': u'DEPOSIT', u'TransactionDate': u'3/14/14', u'BankRef': u'1423010', u'Amount': u'11427', u'CustomerRef': u'0'}
        #try:

        vala = func(lower_date)
        valb = func(upper_date)
        val = func(D[key])
        if vala <= val <= valb:
            return True
        else:
            return False

            # except AttributeError:
            # 	print "Motha fucking Attributes"
            # 	return False
            # except TypeError:
            # 	#print D
            # 	pass
            #NoneType Error likely: {u'Description': u'Description', u'Text': u'Text', u'TransactionDate': u'Transaction Date', u'BankRef': u'Bank Ref#', u'Amount': u'Amount', u'CustomerRef': u'Customer Ref. #'}

    #More advanced than dictionary_date_range_filter
    def date_filter(self,
                    date="2014-10-10",
                    lower_date="2000-10-10",
                    upper_date="2099-10-10"):
        #{u'Description': u'DEPOSIT', u'Text': u'DEPOSIT', u'TransactionDate': u'3/14/14', u'BankRef': u'1423010', u'Amount': u'11427', u'CustomerRef': u'0'}
        #try:
        if lower_date <= date <= upper_date:
            return True
        else:
            return False


class DictionaryFunctions(DictionaryFilterFunctions):
    pass


#Takes in two dictionaries
def list_common_key_merge():
    l1 = [{'name': 'chris', 'value': '100', 'base': 'electro', 'type': 'new'},
          {'name': 'bob', 'value': '50', 'base': 'electro', 'type': 'new'},
          {'name': 'women', 'value': '10', 'base': 'yea', 'type': 'old'}]
    l2 = [{'commission': '100', 'description': 'lets go', 'type': 'new'},
          {'commission': '20', 'description': 'this is mine',
           'type': 'old'}]  #it will append commission and description for anything with new key or leave as is if not
    l = DictionaryFunctions().list_common_key_merge(l1, l2)
    for i in l:
        print
        i


def table_formulate_from_list():
    l = [{'name': 'chris', 'value': '100', 'base': 'electro', 'type': 'new'},
         {'name': 'bob', 'value': '50', 'base': 'electro', 'type': 'new'},
         {'name': 'women', 'value': '10', 'base': 'yea', 'type': 'old'},
         {'name': 'women', 'value': '40', 'base': 'yea', 'type': 'old'}]


    #takes in Headers=None,**kwargs
    l = DictionaryFunctions().table_formulate_from_list(l, headers=['name', 'value', 'type'],
                                                        name=lambda D: str(D['name']) + '_altered')

    for i in l:
        print
        i


def dict_functional_key_apply_list():
    l = [{'name': 'value'},
         {'name': 'value', 'func': "lambda D,l: [D,DictionaryFunctions().dictionary_combine(D,{'new_key':'name'})]"}]

    l = DictionaryFunctions().dict_functional_key_apply_list(l)
    #print l
    return l


def dict_subdict_collapse():
    D = {'name': 'test',
         'dict': {'namea': 'test2', 'fruit': 'pear', 'layer': {'seconddict': 'namer', 'thriddict': 'ba'}}}
    D = {u'MRR__c': '1127.27', u'Previous_Success_Manager_Percentage__c': 'None', u'OTF__c': 'True',
         'contract_type': 'OTF Contract', u'CloseDate': '2014-10-22', 'Commission_Percentage': 0.055,
         u'Type': 'New Business', u'Name': 'The Grammys 2014',
         'Function': 'lambda D,l: [DictionaryFunctions().dictionary_combine(D,{\'Commission_Date\':tup[0] if re.search(\'[0-9]\',tup[0]) else D[tup[0]],\'Commission_Amount\':float(tup[1])*float(D[\'commission_percentage\'])*float(D[\'Amount\']),\'Commission_Percentage\':float(tup[1])*float(D[\'commission_percentage\'])}) for tup in zip(*map(lambda i: i.split(\',\'),D[\'payment_schedule\'].split(":")))]\n',
         u'StageName': 'Closed Won', u'commission_acceleration_percentage__c': 'None',
         'ownername': " ' '{{ownername}}' != 'Deb Berman'' != 'Deb Berman'",
         u'Has_Previous_Success_Manager__c': 'False', u'Success_Manager__c': 'Chelsea',
         u'Contract_Start_Date__c': '2014-10-22',
         'commission_explanation': 'OTFs closed after October 14th pay 11 percent commission. 50% of this commission is paid upon Close Date and 50% of this commission is paid upon the Contract End Date.',
         u'Contract_Days__c': '160.0', u'is_Opt_Out__c': 'False', u'CloseDate_plus_90__c': '2015-01-20',
         'commission_percentage': 0.11, 'commission_acceleration_percentage': '0.0', u'Probability': '100.0',
         u'Opt_Out_Period__c': '0.0', u'Amount': '6000.0', 'payment_schedule': 'CloseDate,Contract_End_Date__c:.50,.50',
         u'Id': '0064000000WIpjEAAT', u'Opt_Out_Date__c': 'None', 'Commission_Amount': 330.0,
         'Commission_Date': '2015-03-31',
         u'Owner': "{u'attributes': {u'url': u'/services/data/v29.0/sobjects/User/00540000001cc2PAAQ', u'type': u'User'}, u'Name': u'Liz Madsen'}",
         u'attributes': "{u'url': u'/services/data/v29.0/sobjects/Opportunity/0064000000WIpjEAAT', u'type': u'Opportunity'}",
         u'Contract_End_Date__c': '2015-03-31', 'order': '2.5', u'Previous_Success_Manager__c': 'None'}
    print
    D['Owner']
    return

    D = DictionaryFunctions().subdict_collapse(D)
    print
    D
    l = map(str, D.keys())
    l.sort()
    print
    l


#print D['OwnerName']

def merging_multiple_lists():
    l1 = [{'fruit': 'banana', 'category': 'B'}, {'fruit': 'apple', 'category': 'A'}]
    l2 = [{'type': 'new', 'category': 'A'}, {'type': 'old', 'category': 'B'}]
    l3 = [{'order': '2', 'type': 'old'}, {'order': '1', 'type': 'new'}]
    l = DictionaryFunctions().multiple_list_merge2(l1, l2, l3)
    # for i in l:
    #     print i


def dictionary_smash_from_list():
    l1 = [{'category_name': 'Base Pay', 'amount': '200', 'date_monthyear': 'Jan-15', 'random_key': '232'},
          {'category_name': 'Analytics', 'amount': '613225.86', 'date_monthyear': 'Jan-15'},
          {'category_name': 'Commissions', 'amount': '100', 'date_monthyear': 'Jan-15', 'random_key': '232'}]
    l2 = [{'category_name': 'Base Pay', 'amount': '75', 'date_monthyear': 'Jan-15', 'department': 'Sales'},
          {'category_name': 'Base Pay', 'amount': '50', 'date_monthyear': 'Jan-15', 'department': 'Sales'},
          {'category_name': 'Commissions', 'amount': '100', 'date_monthyear': 'Jan-15', 'department': 'Engineering'}]
    l = DictionaryFunctions().dictionary_smash_from_list(l1, l2)
    print
    l
    print
    "\t"
    for i in l:
        print
        i
    return l

def sum_range_test():
    l = [
        {'amount':3,'date':'2015-01-01','type':'New Business'},
        {'amount':10,'date':'2015-04-01','type':'Renewal'},
        {'amount':35,'date':'2015-09-01','type':'New Business'}
    ]
    l = DictionaryFunctions().dictionary_sort_accruing_on_key_conditional(l,'date','amount',type='New Business')
    for i in l:
        print i

def main():

    DictionaryFunctions().group_by_keys()
    return
    sum_range_test()

    return
    dicts = [
        {'name': 'b', 'type': 'new', 'color': 'blue', 'amount': 100},
        {'name': 'c', 'type': 'new', 'color': 'red', 'amount': 100},
        {'name': 'd', 'type': 'old', 'color': 'gold', 'amount': 100},
        {'name': 'e', 'type': 'old', 'color': 'red', 'amount': 100},
        {'name': 'f', 'type': 'old', 'color': 'red', 'amount': 100},
        {'name': 'g', 'type': 'normal', 'color': 'red', 'amount': 100}
    ]

    print DictionaryFunctions().group_by_multiple_keys(dicts, 'type', 'color')

    return

    l = [{'closing_available_balance': '5006393.89', 'closing_ledger_balance': '5006393.89', 'two_day_float': '0.00',
          'total_debits': '1243.18', 'opening_ledger_balance': '4870337.07', 'total_credits': '137300.00',
          'opening_available_balance': '4870337.07', 'date': '2015-07-01', 'transaction_details': [
        {'bank_ref': u'3811276', 'amount': '123550.00', 'dr_cr': 'CR', 'transaction_description': u'REMOTE DEPOSIT',
         'cust_ref': u'0'}, {'bank_ref': u'18652', 'amount': '10000.00', 'dr_cr': 'CR',
                             'transaction_description': u'FOSSIL PARTNERS ACH REQ CURALATE, INC.', 'cust_ref': u'0'},
        {'bank_ref': u'9936', 'amount': '1243.18', 'dr_cr': 'DR',
         'transaction_description': u'BILL.COM PAYABLES CURALATE INC', 'cust_ref': u'0'},
        {'bank_ref': u'21900', 'amount': '3750.00', 'dr_cr': 'CR',
         'transaction_description': u'JIM BEAM BRANDS PAYABLES CURALATE INC', 'cust_ref': u'0'}],
          'one_day_float': '0.00'},
         {'closing_available_balance': '5030457.49', 'closing_ledger_balance': '5030457.49', 'two_day_float': '0.00',
          'total_debits': '17736.40', 'opening_ledger_balance': '5006393.89', 'total_credits': '41800.00',
          'opening_available_balance': '5006393.89', 'date': '2015-07-02', 'transaction_details': [
             {'bank_ref': u'13905', 'amount': '3000.00', 'dr_cr': 'CR',
              'transaction_description': u"THE MEN'S WEARHO CORP PYMNT CURALATE INC", 'cust_ref': u'0'},
             {'bank_ref': u'17828', 'amount': '28800.00', 'dr_cr': 'CR',
              'transaction_description': u'ROCKY BRANDS INC PAYMENTS CURALATE INC.', 'cust_ref': u'0'},
             {'bank_ref': u'8886', 'amount': '17736.40', 'dr_cr': 'DR',
              'transaction_description': u'BILL.COM PAYABLES CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'8685', 'amount': '10000.00', 'dr_cr': 'CR',
              'transaction_description': u'FORMICA CORP PAYABLES CURALATE, INC.', 'cust_ref': u'0'}],
          'one_day_float': '0.00'},
         {'closing_available_balance': '5019962.37', 'closing_ledger_balance': '5019962.37', 'two_day_float': '0.00',
          'total_debits': '28787.47', 'opening_ledger_balance': '5030457.49', 'total_credits': '18292.35',
          'opening_available_balance': '5030457.49', 'date': '2015-07-03', 'transaction_details': [
             {'bank_ref': u'13523', 'amount': '3000.00', 'dr_cr': 'CR',
              'transaction_description': u'CAMPBELL-EWALD AP PAYMENT CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'6077', 'amount': '67.72', 'dr_cr': 'DR',
              'transaction_description': u'ADP PAYROLL FEES ADP - FEES STORABLY INC', 'cust_ref': u'0'},
             {'bank_ref': u'150510', 'amount': '600.00', 'dr_cr': 'DR', 'transaction_description': u'CHECK PAID',
              'cust_ref': u'1027'},
             {'bank_ref': u'4410', 'amount': '15292.35', 'dr_cr': 'CR', 'transaction_description': u'STRIPE TRANSFER X',
              'cust_ref': u'0'}, {'bank_ref': u'782', 'amount': '28119.75', 'dr_cr': 'DR',
                                  'transaction_description': u'BILL.COM PAYABLES CURALATE INC', 'cust_ref': u'0'}],
          'one_day_float': '0.00'},
         {'closing_available_balance': '5026087.37', 'closing_ledger_balance': '5026087.37', 'two_day_float': '0.00',
          'total_debits': '0.00', 'opening_ledger_balance': '5019962.37', 'total_credits': '6125.00',
          'opening_available_balance': '5019962.37', 'date': '2015-07-06', 'transaction_details': [
             {'bank_ref': u'6641', 'amount': '500.00', 'dr_cr': 'CR',
              'transaction_description': u'BILL.COM RECEIVABLE CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'570', 'amount': '5625.00', 'dr_cr': 'CR',
              'transaction_description': u'HEWLETT PACK PO/REMIT CURALATE INC', 'cust_ref': u'0'}],
          'one_day_float': '0.00'},
         {'closing_available_balance': '5027451.98', 'closing_ledger_balance': '5027451.98', 'two_day_float': '0.00',
          'total_debits': '135.39', 'opening_ledger_balance': '5026087.37', 'total_credits': '1500.00',
          'opening_available_balance': '5026087.37', 'date': '2015-07-07', 'transaction_details': [
             {'bank_ref': u'576', 'amount': '1500.00', 'dr_cr': 'CR',
              'transaction_description': u'GE - APPLIANCE PAYMENT CURALATE', 'cust_ref': u'0'},
             {'bank_ref': u'4756', 'amount': '135.39', 'dr_cr': 'DR',
              'transaction_description': u'BILL.COM PAYABLES CURALATE INC', 'cust_ref': u'0'}],
          'one_day_float': '0.00'},
         {'closing_available_balance': '5029284.98', 'closing_ledger_balance': '5029284.98', 'two_day_float': '0.00',
          'total_debits': '0.00', 'opening_ledger_balance': '5027451.98', 'total_credits': '1833.00',
          'opening_available_balance': '5027451.98', 'date': '2015-07-08', 'transaction_details': [
             {'bank_ref': u'9882', 'amount': '750.00', 'dr_cr': 'CR',
              'transaction_description': u'TIFFANY VENDOR PMT CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'10921', 'amount': '1083.00', 'dr_cr': 'CR',
              'transaction_description': u'URBAN OUTFITTERS EDI PYMNTS CURALATE INC', 'cust_ref': u'0'}],
          'one_day_float': '0.00'},
         {'closing_available_balance': '5072720.30', 'closing_ledger_balance': '5072720.30', 'two_day_float': '0.00',
          'total_debits': '264.68', 'opening_ledger_balance': '5029284.98', 'total_credits': '43700.00',
          'opening_available_balance': '5029284.98', 'date': '2015-07-09', 'transaction_details': [
             {'bank_ref': u'5639', 'amount': '200.00', 'dr_cr': 'CR',
              'transaction_description': u'TI SHARED SERVIC 00321992 CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'480', 'amount': '264.68', 'dr_cr': 'DR',
              'transaction_description': u'BILL.COM PAYABLES CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'7512', 'amount': '43500.00', 'dr_cr': 'CR',
              'transaction_description': u'LEVI STRAUSS & C 0001970825 CURALATE INC', 'cust_ref': u'0'}],
          'one_day_float': '0.00'},
         {'closing_available_balance': '4999107.33', 'closing_ledger_balance': '4999107.33', 'two_day_float': '0.00',
          'total_debits': '78331.25', 'opening_ledger_balance': '5072720.30', 'total_credits': '4718.28',
          'opening_available_balance': '5072720.30', 'date': '2015-07-10', 'transaction_details': [
             {'bank_ref': u'6972', 'amount': '1051.61', 'dr_cr': 'CR', 'transaction_description': u'STRIPE TRANSFER X',
              'cust_ref': u'0'}, {'bank_ref': u'2544', 'amount': '45878.33', 'dr_cr': 'DR',
                                  'transaction_description': u'SVB CREDIT CARD PAYMENT INC,CURALATE', 'cust_ref': u'0'},
             {'bank_ref': u'8625', 'amount': '1035.77', 'dr_cr': 'DR',
              'transaction_description': u'BILL.COM PAYABLES CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'5048', 'amount': '3666.67', 'dr_cr': 'CR',
              'transaction_description': u'OVERSTOCK.COM VENDORPYMT CURALATE', 'cust_ref': u'0'},
             {'bank_ref': u'3853', 'amount': '254.08', 'dr_cr': 'DR',
              'transaction_description': u'ADP PAYROLL FEES ADP - FEES STORABLY INC', 'cust_ref': u'0'},
             {'bank_ref': u'15798', 'amount': '31163.07', 'dr_cr': 'DR',
              'transaction_description': u'UNITED HEALTHCAR EDI PAYMTS CURALATE', 'cust_ref': u'0'}],
          'one_day_float': '0.00'},
         {'closing_available_balance': '4881306.79', 'closing_ledger_balance': '4881306.79', 'two_day_float': '0.00',
          'total_debits': '117800.54', 'opening_ledger_balance': '4999107.33', 'total_credits': '0.00',
          'opening_available_balance': '4999107.33', 'date': '2015-07-13', 'transaction_details': [
             {'bank_ref': u'24502', 'amount': '373.17', 'dr_cr': 'DR',
              'transaction_description': u'STANDARD INSURAN EDI PYMNTS CURALATE INC.', 'cust_ref': u'0'},
             {'bank_ref': u'5788', 'amount': '117427.37', 'dr_cr': 'DR',
              'transaction_description': u'BILL.COM PAYABLES CURALATE INC', 'cust_ref': u'0'}],
          'one_day_float': '0.00'},
         {'closing_available_balance': '4856806.66', 'closing_ledger_balance': '4856806.66', 'two_day_float': '0.00',
          'total_debits': '25738.00', 'opening_ledger_balance': '4881306.79', 'total_credits': '1237.87',
          'opening_available_balance': '4881306.79', 'date': '2015-07-14', 'transaction_details': [
             {'bank_ref': u'13007', 'amount': '1237.87', 'dr_cr': 'CR',
              'transaction_description': u'OSP GROUP, INC. EDI PYMNTS CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'11143', 'amount': '25738.00', 'dr_cr': 'DR',
              'transaction_description': u'BILL.COM PAYABLES CURALATE INC', 'cust_ref': u'0'}],
          'one_day_float': '0.00'},
         {'closing_available_balance': '4330808.98', 'closing_ledger_balance': '4330808.98', 'two_day_float': '0.00',
          'total_debits': '568389.68', 'opening_ledger_balance': '4856806.66', 'total_credits': '42392.00',
          'opening_available_balance': '4856806.66', 'date': '2015-07-15', 'transaction_details': [
             {'bank_ref': u'19106', 'amount': '11667.00', 'dr_cr': 'CR',
              'transaction_description': u'URBAN OUTFITTERS EDI PYMNTS CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'12050', 'amount': '12500.00', 'dr_cr': 'CR',
              'transaction_description': u'WIRE IN 150715MMQFMPEC004300201519609074;ORG JP BODEN SERVICES INC.;OBI J P BODEN/URGP/;',
              'cust_ref': u'0'}, {'bank_ref': u'3453', 'amount': '386.99', 'dr_cr': 'DR',
                                  'transaction_description': u'TIME WARNER CABL CABLE PAY CURALATE,*',
                                  'cust_ref': u'0'}, {'bank_ref': u'11745', 'amount': '352.47', 'dr_cr': 'DR',
                                                      'transaction_description': u'TRAVELERS INSUR CL PAYMENT CURALATE, INC.',
                                                      'cust_ref': u'0'},
             {'bank_ref': u'13640', 'amount': '104857.74', 'dr_cr': 'DR',
              'transaction_description': u'ADP TX/FINCL SVC ADP - TAX CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'7792', 'amount': '348820.78', 'dr_cr': 'DR',
              'transaction_description': u'ADP TX/FINCL SVC ADP - TAX CURALATE INC CURALATE', 'cust_ref': u'0'},
             {'bank_ref': u'16198', 'amount': '1225.00', 'dr_cr': 'CR',
              'transaction_description': u'WIRE IN 150715B1Q8982C003613201519612586;ORG FARFETCH UK LIMITED;OBI /INV/10760;REF GBH1',
              'cust_ref': u'0'}, {'bank_ref': u'152', 'amount': '17000.00', 'dr_cr': 'CR',
                                  'transaction_description': u'WIRE IN 150715B1Q8201C000233201519600055;ORG RICHEMONT INTERNATIONAL SA;OBI CHLOE SAS 10',
                                  'cust_ref': u'0'}, {'bank_ref': u'5603', 'amount': '341.57', 'dr_cr': 'DR',
                                                      'transaction_description': u'COMCAST COMCAST CURALATE,CURALATE',
                                                      'cust_ref': u'0'},
             {'bank_ref': u'7611', 'amount': '1690.84', 'dr_cr': 'DR',
              'transaction_description': u'ADP TX/FINCL SVC ADP - TAX CURALATE INC CURALATE', 'cust_ref': u'0'},
             {'bank_ref': u'13641', 'amount': '111939.29', 'dr_cr': 'DR',
              'transaction_description': u'ADP TX/FINCL SVC ADP - TAX CURALATE INC', 'cust_ref': u'0'}],
          'one_day_float': '0.00'},
         {'closing_available_balance': '4350347.93', 'closing_ledger_balance': '4350347.93', 'two_day_float': '0.00',
          'total_debits': '6053.65', 'opening_ledger_balance': '4330808.98', 'total_credits': '25592.60',
          'opening_available_balance': '4330808.98', 'date': '2015-07-16', 'transaction_details': [
             {'bank_ref': u'1036', 'amount': '666.67', 'dr_cr': 'CR',
              'transaction_description': u'IVIVVA USA INC. IVIVVA US- CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'454', 'amount': '23980.00', 'dr_cr': 'CR',
              'transaction_description': u'WIRE IN 151970020700 201519700207;ORG GSM (OPERATIONS) PTY LTD;OBI 40366804;REF 1',
              'cust_ref': u'0'}, {'bank_ref': u'7706', 'amount': '6053.65', 'dr_cr': 'DR',
                                  'transaction_description': u'BILL.COM PAYABLES CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'18014', 'amount': '945.93', 'dr_cr': 'CR',
              'transaction_description': u'ADP TX/FINCL SVC ADP - TAX CURALATE INC', 'cust_ref': u'0'}],
          'one_day_float': '0.00'},
         {'closing_available_balance': '4657664.89', 'closing_ledger_balance': '4657664.89', 'two_day_float': '0.00',
          'total_debits': '66854.76', 'opening_ledger_balance': '4350347.93', 'total_credits': '374171.72',
          'opening_available_balance': '4350347.93', 'date': '2015-07-17', 'transaction_details': [
             {'bank_ref': u'4285673', 'amount': '351694.32', 'dr_cr': 'CR',
              'transaction_description': u'REMOTE DEPOSIT', 'cust_ref': u'0'},
             {'bank_ref': u'8740', 'amount': '3000.00', 'dr_cr': 'CR',
              'transaction_description': u'BILL.COM RECEIVABLE CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'1539', 'amount': '66854.76', 'dr_cr': 'DR',
              'transaction_description': u'BILL.COM PAYABLES CURALATE INC', 'cust_ref': u'0'},
             {'bank_ref': u'1456', 'amount': '2000.00', 'dr_cr': 'CR',
              'transaction_description': u'GUESS INC COLPAY CURALATE', 'cust_ref': u'0'},
             {'bank_ref': u'5513', 'amount': '17477.40', 'dr_cr': 'CR', 'transaction_description': u'STRIPE TRANSFER X',
              'cust_ref': u'0'}], 'one_day_float': '0.00'},
         {'closing_available_balance': '4657664.89', 'closing_ledger_balance': '4657664.89', 'two_day_float': '0.00',
          'total_debits': '0.00', 'opening_ledger_balance': '4657664.89', 'total_credits': '0.00',
          'opening_available_balance': '4657664.89', 'date': '2015-07-20', 'transaction_details': [],
          'one_day_float': '0.00'}]
    DictionaryFunctions().dictionary_flatten_iter_list_smash(l)

    return
    l = dictionary_smash_from_list()

    return
    merging_multiple_lists()

    return
    print
    sys.argv[0]
    return
    print
    os.path.basename(__file__)

    return
    l = [['3', 'name', 1], ['1', 'namb', 2]]
    l = DictionaryFunctions().dictionary_sort_on_key(l, 2, func=float)
    print
    l
    #dict_subdict_collapse()
    return

    print
    dict_functional_key_apply_list()
    return
    table_formulate_from_list()


    #list_common_key_merge()

    return
    D = {'key': '1'}
    l = [{'key': '1', 'fruit': 'apple'}, {'son': 'bear'}, {'key': '1', 'fruit': 'pear'}]

    l = DictionaryFunctions().dict_keys_remove_from_list_keys(D, l)
    print
    l
    for i in l:
        print
        i

    return l
    l = [{'key': '1', 'fruit': 'apple'}, {'son': 'bear'}, {'key': '1', 'fruit': 'pear'}]
    print
    DictionaryFunctions().dict_list_merge_between(l, 'key')

    return

    subli = [{'Upsell': {'account': '0014000000jcsQrAAI',
                         'closedate': '2014-09-10',
                         'id': '0064000000YL09fAAD',
                         'name': 'Ann Taylor 2014 (upsell)',
                         'type': 'Upsell'}},
             {'Renewal': {'account': '0014000000jcsQrAAI',
                          'closedate': '2014-09-10',
                          'id': '0064000000RsgYBAAZ',
                          'name': 'Ann Taylor 2014',
                          'type': 'Renewal'}}]
    print
    DictionaryFunctions().dictionary_list_combine_dict(subli)

    return
    #how to lower all the key names
    l = [{'name': 'nautica 2014 (dashboard + like2buy)', 'API_Access__c': 'false', 'Dashboard__c': 'false',
          'id': '0064000000xhh0qaab', 'Like_2_Buy__c': 'false', 'Fanreel__c': 'true'}]
    normalize_string_func = lambda s: s.lower()
    l = DictionaryFunctions().function_key_name_apply_list(l, normalize_string_func)
    print
    l
    return
    D = {'id': 'okay', 'old_id': 'son said {{id}}', 'calculation': '((4+5.2))'}
    print
    DictionaryFunctions().eval_run_condition(D)
    print
    D

    return
    D1 = {'id': 'okay', 'old_id': 'son said {{id}}'}
    print
    DictionaryFunctions().dictionary_brackets_replace(D1)

    return
    D2 = {'id': 'abc'}
    D1 = {'id': 'son', 'old_id': 'son'}
    print
    DictionaryFunctions().dictionary_combine(D2, D1)
    return

    l = [{'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2}, {'a': 1, 'b': 2}]
    l = DictionaryFunctions().dict_keys_list_ensure(l)
    print
    l

    return
    l = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]

    print
    DictionaryFunctions().list_combine_lists(l, l)

    return

    D = {'a': '1', 'b': '3', 'c': '4'}
    l = DictionaryStructureReformat().function_key_apply(D, float, 'a', 'b')
    print
    l

    return
    print
    DictionaryFunctions().date_filter()


if __name__ == "__main__": main()



#excel_functions.py

"""
The purpose of this python script is to connect to Excel, which is used for the creation of the estaff Dashboard.
This document is simpler and easier to understnad than excel_functions_v1.py (it's predecesser)
"""

from xlwings import Workbook, Sheet, Range, Chart #Utilize xlwings package to open a workbook
from Shippy.API.slack_api import SlackFunctions
import xlwings

class ExcelFunctions(object):
    """
    The purpose of these functions is to provide convenient functions in interacting with excel.
    """
    def __init__(self):
        self.app_target = '/Applications/Microsoft Office 2011/Microsoft Excel.app'
    def workbook_open(self,directory='/Users/Chris/Dropbox/Scott/eStaff Metrics/estaff_dash_charts_q316.xlsx'):
        """
        Simply open an excel workbook - testing if it actually works
        :param directory:
        :return:
        """
        wb = Workbook(directory, app_target=self.app_target)
        return wb

    def worksheet_data_pull(self, worksheet_name='data',directory='/Users/Chris/Dropbox/Scott/eStaff Metrics/estaff_dash_charts_q316.xlsx', range='A1:BZ500'):
        """
        :param worksheet_name:
        :param directory:
        :param range:
        :return: e.g. [[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, u'Goal', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ARR Build', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'closed', 0.0, 24000.0, 24000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'commit', 141600.0, 45600.0, 45600.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'w pipe', 1417031.0, 1145312.0, 1063397.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'pipe tbd', 500.0, 500.0, 600.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'goal', 138461.53846153847, 276923.07692307694, 415384.6153846154, 553846.1538461539, 692307.6923076924, 830769.2307692308, 969230.7692307692, 1107692.3076923077, 1246153.8461538462, 1384615.3846153847, 1523076.9230769232, 1661538.4615384615, 1800000.0, 1800000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ARR Source Marketing', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 30769.23076923077, 61538.46153846154, 92307.69230769231, 123076.92307692308, 153846.15384615384, 184615.38461538462, 215384.61538461538, 246153.84615384616, 276923.07692307694, 307692.3076923077, 338461.53846153844, 369230.76923076925, 400000.0, 400000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 0.0, 24000.0, 24000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ARR Source Outbound', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 92307.69230769231, 184615.38461538462, 276923.07692307694, 369230.76923076925, 461538.46153846156, 553846.1538461539, 646153.8461538462, 738461.5384615385, 830769.2307692308, 923076.9230769231, 1015384.6153846155, 1107692.3076923077, 1200000.0, 1200000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ARR Source Other', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 76.92307692307692, 153.84615384615384, 230.76923076923077, 307.6923076923077, 384.6153846153846, 461.5384615384615, 538.4615384615385, 615.3846153846154, 692.3076923076923, 769.2307692307692, 846.1538461538461, 923.076923076923, 999.9999999999999, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 76.92307692307692, 153.84615384615384, 230.76923076923077, 307.6923076923077, 384.6153846153846, 461.5384615384615, 538.4615384615385, 615.3846153846154, 692.3076923076923, 769.2307692307692, 846.1538461538461, 923.076923076923, 999.9999999999999, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 55.0, 125.0, 200.0, 275.0, 350.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ACV', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 0.0, 24000.0, 24000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'CAC', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 27.0, 35.0, 34.0, 35.0, 35.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Jul', u'Aug', u'Sep', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'three weeks ago', 427269.978, 804920.0, 646437.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'two weeks ago', 566693.62, 483305.0, 525887.5, None, None, 1878627.478, 1575886.12, 1270731.702, 1106716.702, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'last week', 471296.702, 461590.0, 337845.0, None, None, 782042.5, 1052640.0, 1014770.0, 1043312.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'this week', 359486.724, 480939.978, 266290.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Q3', u'Q4', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'three weeks ago', 1878627.478, 782042.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'two weeks ago', 1575886.12, 1052640.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'last week', 1270731.702, 1014770.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'this week', 1106716.702, 1043312.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Total Meetings Set', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 76.92307692307692, 153.84615384615384, 230.76923076923077, 307.6923076923077, 384.6153846153846, 461.5384615384615, 538.4615384615385, 615.3846153846154, 692.3076923076923, 769.2307692307692, 846.1538461538461, 923.076923076923, 999.9999999999999, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 6.0, 20.0, 26.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 6.0, 14.0, 6.0, -26.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Outbound Meetings Set', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 76.92307692307692, 153.84615384615384, 230.76923076923077, 307.6923076923077, 384.6153846153846, 461.5384615384615, 538.4615384615385, 615.3846153846154, 692.3076923076923, 769.2307692307692, 846.1538461538461, 923.076923076923, 999.9999999999999, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 3.0, 12.0, 15.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 3.0, 9.0, 3.0, -15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Inbound Meetings Set', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 76.92307692307692, 153.84615384615384, 230.76923076923077, 307.6923076923077, 384.6153846153846, 461.5384615384615, 538.4615384615385, 615.3846153846154, 692.3076923076923, 769.2307692307692, 846.1538461538461, 923.076923076923, 999.9999999999999, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 2.0, 6.0, 9.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 2.0, 4.0, 3.0, -9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Pipeline Created', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 923076.9230769231, 1846153.8461538462, 2769230.7692307695, 3692307.6923076925, 4615384.615384616, 5538461.538461539, 6461538.461538462, 7384615.384615385, 8307692.307692308, 9230769.230769232, 10153846.153846154, 11076923.076923078, 12000000.0, 12000000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 265000.0, 682000.0, 925000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 265000.0, 417000.0, 243000.0, None, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Pipeline Marketing', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 307692.3076923077, 615384.6153846154, 923076.923076923, 1230769.2307692308, 1538461.5384615385, 1846153.846153846, 2153846.153846154, 2461538.4615384615, 2769230.769230769, 3076923.076923077, 3384615.3846153845, 3692307.692307692, 4000000.0, 4000000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 48000.0, 169000.0, 267000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 48000.0, 121000.0, 98000.0, None, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Pipeline Outbound', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 615384.6153846154, 1230769.2307692308, 1846153.846153846, 2461538.4615384615, 3076923.076923077, 3692307.692307692, 4307692.307692308, 4923076.923076923, 5538461.538461538, 6153846.153846154, 6769230.769230769, 7384615.384615384, 8000000.0, 8000000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 168000.0, 434000.0, 579000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 168000.0, 266000.0, 145000.0, None, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 76.92307692307692, 153.84615384615384, 230.76923076923077, 307.6923076923077, 384.6153846153846, 461.5384615384615, 538.4615384615385, 615.3846153846154, 692.3076923076923, 769.2307692307692, 846.1538461538461, 923.076923076923, 999.9999999999999, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 55.0, 125.0, 200.0, 275.0, 350.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 55.0, 70.0, 75.0, 75.0, 75.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Jul', u'Aug', u'Sep', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 250.0, 300.0, 350.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'atual', 200.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'churn', 116922.0, 128922.0, 152922.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'expected', 456580.0, 537630.0, 552430.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'red', 138520.0, 138520.0, 154520.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'yellow', 507020.0, 410020.0, 369620.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'goal', 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'UPSELL ', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'closed', 0.0, 60638.4, 72838.44, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'commit', 258306.32, 236391.88, 313964.64, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'w pipe', 671792.249, 642774.49, 575154.472, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'new pipe', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'goal', 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 19.2, 19.0, 18.8, 18.6, 18.400000000000002, 18.200000000000003, 18.000000000000004, 17.800000000000004, 17.600000000000005, 17.400000000000006, 17.200000000000006, 17.000000000000007, 16.800000000000008, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 19.1, 18.9, 18.6, 18.3, 18.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 3.0, 3.1, 3.2, 3.3000000000000003, 3.4000000000000004, 3.5000000000000004, 3.6000000000000005, 3.7000000000000006, 3.8000000000000007, 3.900000000000001, 4.000000000000001, 4.1000000000000005, 4.2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 2.9, 2.9, 3.0, 3.1, 3.1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'over 90', 274027.0, 294867.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'July', u'Aug', u'Sep', u'Oct', u'Nov', u'Dec', u' ', u' ', u'  ', u' ', u' ', u' ', u' ', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 34.0, 33.0, 32.0, 31.0, 30.0, 29.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 34.0, 32.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'won', 0.0, 24000.0, 24000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'in redlines', 45600.0, 45600.0, 45600.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'verbal yes', 96000.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Pricing Negotiations', 928088.0, 1287088.0, 1194088.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'DM involved', 2162950.0, 1887950.0, 1888950.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Follow Up Meeting', 1021000.0, 926000.0, 830000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'intro complete', 1008000.0, 767000.0, 693000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'lost', 51000.0, 375000.0, 637000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ARR goal', 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, 5312638.0, 5312638.0, 5312638.0, 5312638.0, 5312638.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Pipeline Created', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'won', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'in redlines', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'verbal yes', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Pricing Negotiations', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'DM involved', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'intro complete', 265000.0, 604000.0, 847000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'lost', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'pipegoal', 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ARR goal', 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'fcst', 20.2, 20.2, 20.1, 20.1, 20.1, 20.3, 20.3, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'fcst', 0.95, 0.95, 0.93, 0.93, 0.95, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'CAC', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'fcst', -0.6, -0.6, -0.5, -0.5, -0.4, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Net Churn', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'fcst', -59616.48, -53826.48, -37026.48, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Head Count', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Staffing', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Engineering', 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 41.0, 41.0, 43.0, 43.0, 46.0, 46.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Product & Design', 7.0, 7.0, 7.0, 6.0, 5.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Sales', 15.0, 15.0, 15.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 17.0, 17.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Sales Development', 17.0, 17.0, 16.0, 16.0, 16.0, 18.0, 18.0, 18.0, 18.0, 20.0, 20.0, 21.0, 21.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Client Success', 16.0, 16.0, 16.0, 17.0, 16.0, 16.0, 16.0, 16.0, 16.0, 17.0, 17.0, 17.0, 17.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Marketing', 14.0, 14.0, 14.0, 14.0, 13.0, 14.0, 13.0, 13.0, 13.0, 15.0, 15.0, 15.0, 15.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Operations', 9.0, 9.0, 9.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Account Management', 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'People', 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Business Development', 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'None', 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Total', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Staffing', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Tech & Product', 49.0, 49.0, 49.0, 48.0, 47.0, 48.0, 48.0, 48.0, 48.0, 50.0, 50.0, 53.0, 53.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Other', 86.0, 86.0, 85.0, 89.0, 87.0, 90.0, 89.0, 89.0, 89.0, 94.0, 94.0, 96.0, 96.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Enterprise Pipeline', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Gross', 6395050.0, 6798350.0, 6976350.0, 7475949.96, 7805949.96, 8388149.96, 8055249.96, 7070999.96, 6824299.96, 6440500.0, 6295500.0, 5943549.96, 5778000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Weighted', 1343517.492, 1506882.492, 1496012.492, 1526612.478, 1659962.478, 1699932.478, 1755157.478, 1631669.978, 1644074.978, 1617155.0, 1600205.0, 1487652.462, 1273730.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'EU Pipeline', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Gross', 3308900.04, 3590900.04, 3758900.04, 3893900.0, 3899900.0, 4265900.0, 4396900.0, 3861650.0, 3803650.0, 3727050.0, 3491650.0, 3441650.0, 3470650.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Weighted', 511785.014, 598785.014, 547335.014, 530035.0, 546735.0, 636285.0, 676185.0, 628397.5, 644747.5, 643287.5, 617047.5, 544397.5, 590847.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Greater 50K', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Gross', 3308900.04, 3590900.04, 3758900.04, 3893900.0, 3899900.0, 4265900.0, 4396900.0, 3861650.0, 3803650.0, 3727050.0, 3491650.0, 3441650.0, 3470650.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Weighted', 511785.014, 598785.014, 547335.014, 530035.0, 546735.0, 636285.0, 676185.0, 628397.5, 644747.5, 643287.5, 617047.5, 544397.5, 590847.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]]
        """
        wb = Workbook(directory, app_target=self.app_target)
        wb.set_current()
        l = Range(worksheet_name, range).value
        return l

    def worksheet_data_push(self,l, worksheet_name='test',directory='/Users/Chris/Dropbox/Scott/eStaff Metrics/estaff_dash_charts_q316_test.xlsx', range='A1:BZ500'):
        """
        :param l: e.g. [['a','b'],['c','d']]
        :param worksheet_name:
        :param directory:
        :param range: e.g. 'A1:BZ500'
        :return:
        """
        wb = Workbook(directory, app_target=self.app_target)
        wb.set_current()
        Range(worksheet_name, range).value = l
        return l

    def worksheet_data_update_by_cell_reference(self, data_point, worksheet_name='test',
                            directory='/Users/Chris/Dropbox/Scott/eStaff Metrics/estaff_dash_charts_q316_test.xlsx',
                            range='A1'):
        """
        :param l: e.g. [['a','b'],['c','d']]
        :param worksheet_name:
        :param directory:
        :param range: e.g. 'A1:BZ500'
        :return:
        """
        wb = Workbook(directory, app_target=self.app_target)
        wb.set_current()
        Range(worksheet_name, range).value = data_point
        #return l


    def worksheet_data_update_by_cell_references(self, tups, worksheet_name='test',directory='/Users/Chris/Dropbox/Scott/eStaff Metrics/estaff_dash_charts_q316_test.xlsx'):
        """
        :param l: e.g. [['a','b'],['c','d']]
        :param worksheet_name:
        :param directory:
        :param range: e.g. 'A1:BZ500'
        :return:
        """
        wb = Workbook(directory, app_target=self.app_target)
        wb.set_current()

        #message= "beginning excel update"
        #SlackFunctions().slack_post(channel="@chriscruz", message=message, username="Panos Model")
        #SlackFunctions().slack_post(channel="@chriscruz", message=message, username="Panos Model")
        for cell_reference,cell_value in tups:
            #message = "Cell: {}\nValue:{}".format(cell_reference,cell_value)
            #SlackFunctions().slack_post(channel="@chriscruz",message=message,username="Panos Model")
            #SlackFunctions().slack_post(channel="@panos",message=message,username="Panos Model")

            print cell_reference,cell_value
            Range(worksheet_name,cell_reference ).value = cell_value
        return tups


    def worksheet_data_update_comment_by_cell_references(self, tups, worksheet_name='test',
                                                 directory='/Users/Chris/Dropbox/Scott/eStaff Metrics/estaff_dash_charts_q316_test.xlsx'):
        """
        :param l: e.g. [['a','b'],['c','d']]
        :param worksheet_name:
        :param directory:
        :param range: e.g. 'A1:BZ500'
        :return:
        """
        wb = Workbook(directory, app_target=self.app_target)
        #wb.set_current()
        #sht.range('A1').api.wrap_text.set(True)

        #sht = xw.Book().sheets[0]

        # Range('A1').api.AddComment()
        # Range('A1').api.Comment.Text('Some Text')

        # message= "beginning excel update"
        # SlackFunctions().slack_post(channel="@chriscruz", message=message, username="Panos Model")
        # SlackFunctions().slack_post(channel="@chriscruz", message=message, username="Panos Model")
        # for cell_reference, cell_value in tups:
        #     Range(worksheet_name,cell_reference).xl_range.AddComment()
        #     Range(worksheet_name,cell_reference).xl_range.Comment.Text(cell_value)
        #     # message = "Cell: {}\nValue:{}".format(cell_reference,cell_value)
        #     # SlackFunctions().slack_post(channel="@chriscruz",message=message,username="Panos Model")
        #     # SlackFunctions().slack_post(channel="@panos",message=message,username="Panos Model")
        #
        #     #print cell_reference, cell_value
        #     #Range(worksheet_name, cell_reference).value = cell_value
        # return tups



def main():
    tups = [('A1','test')]
    ExcelFunctions().worksheet_data_update_comment_by_cell_references(tups,worksheet_name='test',directory='/Users/Chris/Dropbox/Scott/eStaff Metrics/Weekly Estaff Report 030717.xlsx')

    #ExcelFunctions().worksheet_data_update_by_cell_reference('abc',worksheet_name='test',directory='/Users/Chris/Dropbox/Scott/eStaff Metrics/estaff_dash_charts_q316 072516.xlsx',range='A1')

    #ExcelFunctions().worksheet_data_update_by_cell_reference('abc',worksheet_name='test',directory='/Users/Chris/Dropbox/Scott/eStaff Metrics/estaff_dash_charts_q316 072516.xlsx',range='A1')


    #
    # l = [[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, u'Goal', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ARR Build', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'closed', 0.0, 24000.0, 24000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'commit', 141600.0, 45600.0, 45600.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'w pipe', 1417031.0, 1145312.0, 1063397.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'pipe tbd', 500.0, 500.0, 600.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'goal', 138461.53846153847, 276923.07692307694, 415384.6153846154, 553846.1538461539, 692307.6923076924, 830769.2307692308, 969230.7692307692, 1107692.3076923077, 1246153.8461538462, 1384615.3846153847, 1523076.9230769232, 1661538.4615384615, 1800000.0, 1800000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ARR Source Marketing', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 30769.23076923077, 61538.46153846154, 92307.69230769231, 123076.92307692308, 153846.15384615384, 184615.38461538462, 215384.61538461538, 246153.84615384616, 276923.07692307694, 307692.3076923077, 338461.53846153844, 369230.76923076925, 400000.0, 400000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 0.0, 24000.0, 24000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ARR Source Outbound', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 92307.69230769231, 184615.38461538462, 276923.07692307694, 369230.76923076925, 461538.46153846156, 553846.1538461539, 646153.8461538462, 738461.5384615385, 830769.2307692308, 923076.9230769231, 1015384.6153846155, 1107692.3076923077, 1200000.0, 1200000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ARR Source Other', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 76.92307692307692, 153.84615384615384, 230.76923076923077, 307.6923076923077, 384.6153846153846, 461.5384615384615, 538.4615384615385, 615.3846153846154, 692.3076923076923, 769.2307692307692, 846.1538461538461, 923.076923076923, 999.9999999999999, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 76.92307692307692, 153.84615384615384, 230.76923076923077, 307.6923076923077, 384.6153846153846, 461.5384615384615, 538.4615384615385, 615.3846153846154, 692.3076923076923, 769.2307692307692, 846.1538461538461, 923.076923076923, 999.9999999999999, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 55.0, 125.0, 200.0, 275.0, 350.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ACV', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, 40000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 0.0, 24000.0, 24000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'CAC', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 27.0, 35.0, 34.0, 35.0, 35.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Jul', u'Aug', u'Sep', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'three weeks ago', 427269.978, 804920.0, 646437.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'two weeks ago', 566693.62, 483305.0, 525887.5, None, None, 1878627.478, 1575886.12, 1270731.702, 1106716.702, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'last week', 471296.702, 461590.0, 337845.0, None, None, 782042.5, 1052640.0, 1014770.0, 1043312.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'this week', 359486.724, 480939.978, 266290.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Q3', u'Q4', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'three weeks ago', 1878627.478, 782042.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'two weeks ago', 1575886.12, 1052640.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'last week', 1270731.702, 1014770.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'this week', 1106716.702, 1043312.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Total Meetings Set', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 76.92307692307692, 153.84615384615384, 230.76923076923077, 307.6923076923077, 384.6153846153846, 461.5384615384615, 538.4615384615385, 615.3846153846154, 692.3076923076923, 769.2307692307692, 846.1538461538461, 923.076923076923, 999.9999999999999, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 6.0, 20.0, 26.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 6.0, 14.0, 6.0, -26.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Outbound Meetings Set', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 76.92307692307692, 153.84615384615384, 230.76923076923077, 307.6923076923077, 384.6153846153846, 461.5384615384615, 538.4615384615385, 615.3846153846154, 692.3076923076923, 769.2307692307692, 846.1538461538461, 923.076923076923, 999.9999999999999, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 3.0, 12.0, 15.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 3.0, 9.0, 3.0, -15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Inbound Meetings Set', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 76.92307692307692, 153.84615384615384, 230.76923076923077, 307.6923076923077, 384.6153846153846, 461.5384615384615, 538.4615384615385, 615.3846153846154, 692.3076923076923, 769.2307692307692, 846.1538461538461, 923.076923076923, 999.9999999999999, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 2.0, 6.0, 9.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 2.0, 4.0, 3.0, -9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Pipeline Created', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 923076.9230769231, 1846153.8461538462, 2769230.7692307695, 3692307.6923076925, 4615384.615384616, 5538461.538461539, 6461538.461538462, 7384615.384615385, 8307692.307692308, 9230769.230769232, 10153846.153846154, 11076923.076923078, 12000000.0, 12000000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 265000.0, 682000.0, 925000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 265000.0, 417000.0, 243000.0, None, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Pipeline Marketing', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 307692.3076923077, 615384.6153846154, 923076.923076923, 1230769.2307692308, 1538461.5384615385, 1846153.846153846, 2153846.153846154, 2461538.4615384615, 2769230.769230769, 3076923.076923077, 3384615.3846153845, 3692307.692307692, 4000000.0, 4000000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 48000.0, 169000.0, 267000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 48000.0, 121000.0, 98000.0, None, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Pipeline Outbound', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 615384.6153846154, 1230769.2307692308, 1846153.846153846, 2461538.4615384615, 3076923.076923077, 3692307.692307692, 4307692.307692308, 4923076.923076923, 5538461.538461538, 6153846.153846154, 6769230.769230769, 7384615.384615384, 8000000.0, 8000000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 168000.0, 434000.0, 579000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 168000.0, 266000.0, 145000.0, None, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 76.92307692307692, 153.84615384615384, 230.76923076923077, 307.6923076923077, 384.6153846153846, 461.5384615384615, 538.4615384615385, 615.3846153846154, 692.3076923076923, 769.2307692307692, 846.1538461538461, 923.076923076923, 999.9999999999999, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 55.0, 125.0, 200.0, 275.0, 350.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'weekly', 55.0, 70.0, 75.0, 75.0, 75.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Jul', u'Aug', u'Sep', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 250.0, 300.0, 350.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'atual', 200.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'churn', 116922.0, 128922.0, 152922.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'expected', 456580.0, 537630.0, 552430.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'red', 138520.0, 138520.0, 154520.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'yellow', 507020.0, 410020.0, 369620.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'goal', 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, 800000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'UPSELL ', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'closed', 0.0, 60638.4, 72838.44, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'commit', 258306.32, 236391.88, 313964.64, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'w pipe', 671792.249, 642774.49, 575154.472, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'new pipe', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'goal', 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, 1100000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 19.2, 19.0, 18.8, 18.6, 18.400000000000002, 18.200000000000003, 18.000000000000004, 17.800000000000004, 17.600000000000005, 17.400000000000006, 17.200000000000006, 17.000000000000007, 16.800000000000008, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 19.1, 18.9, 18.6, 18.3, 18.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 3.0, 3.1, 3.2, 3.3000000000000003, 3.4000000000000004, 3.5000000000000004, 3.6000000000000005, 3.7000000000000006, 3.8000000000000007, 3.900000000000001, 4.000000000000001, 4.1000000000000005, 4.2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 2.9, 2.9, 3.0, 3.1, 3.1, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'over 90', 274027.0, 294867.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'July', u'Aug', u'Sep', u'Oct', u'Nov', u'Dec', u' ', u' ', u'  ', u' ', u' ', u' ', u' ', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 34.0, 33.0, 32.0, 31.0, 30.0, 29.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'actual', 34.0, 32.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'won', 0.0, 24000.0, 24000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'in redlines', 45600.0, 45600.0, 45600.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'verbal yes', 96000.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Pricing Negotiations', 928088.0, 1287088.0, 1194088.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'DM involved', 2162950.0, 1887950.0, 1888950.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Follow Up Meeting', 1021000.0, 926000.0, 830000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'intro complete', 1008000.0, 767000.0, 693000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'lost', 51000.0, 375000.0, 637000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ARR goal', 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, 1400.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, 5312638.0, 5312638.0, 5312638.0, 5312638.0, 5312638.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Pipeline Created', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'won', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'in redlines', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'verbal yes', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Pricing Negotiations', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'DM involved', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'intro complete', 265000.0, 604000.0, 847000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'lost', 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'pipegoal', 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, 4500.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'ARR goal', 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, 600.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'fcst', 20.2, 20.2, 20.1, 20.1, 20.1, 20.3, 20.3, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'fcst', 0.95, 0.95, 0.93, 0.93, 0.95, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'CAC', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'fcst', -0.6, -0.6, -0.5, -0.5, -0.4, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Net Churn', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'plan', -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'fcst', -59616.48, -53826.48, -37026.48, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Head Count', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Staffing', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Engineering', 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 41.0, 41.0, 43.0, 43.0, 46.0, 46.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Product & Design', 7.0, 7.0, 7.0, 6.0, 5.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Sales', 15.0, 15.0, 15.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 17.0, 17.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Sales Development', 17.0, 17.0, 16.0, 16.0, 16.0, 18.0, 18.0, 18.0, 18.0, 20.0, 20.0, 21.0, 21.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Client Success', 16.0, 16.0, 16.0, 17.0, 16.0, 16.0, 16.0, 16.0, 16.0, 17.0, 17.0, 17.0, 17.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Marketing', 14.0, 14.0, 14.0, 14.0, 13.0, 14.0, 13.0, 13.0, 13.0, 15.0, 15.0, 15.0, 15.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Operations', 9.0, 9.0, 9.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Account Management', 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'People', 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Business Development', 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'None', 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Total', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Staffing', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Tech & Product', 49.0, 49.0, 49.0, 48.0, 47.0, 48.0, 48.0, 48.0, 48.0, 50.0, 50.0, 53.0, 53.0, 0.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Other', 86.0, 86.0, 85.0, 89.0, 87.0, 90.0, 89.0, 89.0, 89.0, 94.0, 94.0, 96.0, 96.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Enterprise Pipeline', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Gross', 6395050.0, 6798350.0, 6976350.0, 7475949.96, 7805949.96, 8388149.96, 8055249.96, 7070999.96, 6824299.96, 6440500.0, 6295500.0, 5943549.96, 5778000.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Weighted', 1343517.492, 1506882.492, 1496012.492, 1526612.478, 1659962.478, 1699932.478, 1755157.478, 1631669.978, 1644074.978, 1617155.0, 1600205.0, 1487652.462, 1273730.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'EU Pipeline', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Gross', 3308900.04, 3590900.04, 3758900.04, 3893900.0, 3899900.0, 4265900.0, 4396900.0, 3861650.0, 3803650.0, 3727050.0, 3491650.0, 3441650.0, 3470650.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Weighted', 511785.014, 598785.014, 547335.014, 530035.0, 546735.0, 636285.0, 676185.0, 628397.5, 644747.5, 643287.5, 617047.5, 544397.5, 590847.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Greater 50K', u'Wk1', u'Wk2', u'Wk3', u'Wk4', u'Wk5', u'Wk6', u'Wk7', u'Wk8', u'Wk9', u'Wk10', u'Wk11', u'Wk12', u'Wk13', None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Gross', 3308900.04, 3590900.04, 3758900.04, 3893900.0, 3899900.0, 4265900.0, 4396900.0, 3861650.0, 3803650.0, 3727050.0, 3491650.0, 3441650.0, 3470650.0, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [u'Weighted', 511785.014, 598785.014, 547335.014, 530035.0, 546735.0, 636285.0, 676185.0, 628397.5, 644747.5, 643287.5, 617047.5, 544397.5, 590847.5, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]]
    # l = [['a','b'],['c','d']]
    # print ExcelFunctions().worksheet_data_push(l,worksheet_name='test',range='A1:BZ500')



if __name__ == "__main__": main()
#excel_functions_v1.py

# https://pypi.python.org/pypi/XlsxWriter#downloads
import xlsxwriter
#https://openpyxl.readthedocs.org/en/latest/
import openpyxl
#https://pypi.python.org/pypi/openpyxl/2.3.0-b1
from openpyxl import Workbook, load_workbook
import csv
from openpyxl.cell import get_column_letter
from openpyxl.compat import range
import re
#http://stackoverflow.com/questions/15905610/graphs-in-xlsx-file-overwrite-by-openpyxl
from Shippy.Functions.text_functions import *
import tessera
import inspect
from Shippy.Functions.list_functions import ListFunctions
from Shippy.Functions.time_functions import TimeFunctions
from Shippy.Functions.dictionary_functions import DictionaryFunctions
from random import shuffle
from Shippy.Functions.text_functions import TextFunctions
import json
#from oauth2client.client import SignedJwtAssertionCredentials
from Shippy.Functions.performance_functions import PerformanceFunctions

from xlwings import Workbook, Sheet, Range, Chart
from Shippy.API.salesforce_api import Query
app_target='/Applications/Microsoft Office 2011/Microsoft Excel.app'


class ConvenienceFunctions(object):
    def append_empty(self,data,append_empty):
        subsub = ['']*len(data[0])
        subsub = [subsub]*append_empty
        data.extend(subsub)
        return data

#app_target='/Applications/Microsoft Excel.app'

class ExcelAPI(ConvenienceFunctions):

    def list_query_calculate(self, l, i, headers, *args):
        Func = TextFunctions().func_get_from_classes("func_get",*args)  #instead pass it into func_get which will determine what to do with it
        v = Func(i, headers)
        return v

    #replace any errors with the originals
    def list_replace_errors(self, v, originals):
        v = [a if a != "404Error" else a.replace("404Error", b) for a, b in zip(v, originals)]
        return v

    def list_values_update_format(self, v):
        v = map(str, v)
        if v[0] == None or v[0] == "" or "|" in v[0] or "404Error" == v[
            0]:  #this is really for when the query is in column 1
            v.pop(0)
        # except TypeError:
        # 	print "float is not iterable process" + str(v)
        return v


    def row_find_from_string(self,l,i):
        for num,subli in enumerate(l):
            if i in subli:
                return num

    # i is the item searching for
    # l is the list of sublists (the whole table)
    def cell_range_triangulate(self,l,i):
        row = self.row_find_from_string(l,i) + 1
        col = l[row-1].index(i) + 1
        col_letter = TextFunctions().number_letter_convert(col)
        s = str(col_letter) + str(int(row))
        return s

    # i is the item searching for
    # l is the list of sublists (the whole table)
    def cell_range_triangulate_for_list(self,l,i,data,row_move = 1, col_move = 1):
        row = self.row_find_from_string(l,i) + 1 + row_move
        col = l[row-1-row_move].index(i) + 1 + col_move
        col_letter = TextFunctions().number_letter_convert(col)

        row2 = row + len(data)
        col2 = col + len(data[0])
        col_letter2 = TextFunctions().number_letter_convert(col2)

        s = str(col_letter) + str(int(row)) + ":" + str(col_letter2) + str(int(row2))
        return s

    def cell_range_calculate(self, l, i, v):
        func = TextFunctions().number_letter_convert
        cell_range = ListFunctions().list_cell_range_triangulate(l, i, v, func=func)
        return cell_range


    def data_format(self,L):
        funca = lambda i: TextFunctions().unicode_guarentee(i,str)  #i if isinstance(i,float) else str(i) #str(i) #
        funcb = lambda i: '' if i == None or i == 'None' else i
        L = [map(lambda i: funcb(funca(i)),subli) for subli in L]
        return L

class ExcelWings(ExcelAPI):
    #Purpose is to test connect
    def excel_workbook_open(self,wb_directory):
        wb = Workbook(wb_directory,app_target=app_target)

    def worksheet_data_pull(self,wb_directory,worksheet,range='A1:BZ500'):
        wb = Workbook(wb_directory,app_target=app_target)
        wb.set_current()
        l = Range(worksheet, range).value
        return l

    def worksheet_data_push(self,wb_directory,worksheet,l,range='A1:BZ500'):
        wb = Workbook(wb_directory,app_target=app_target)
        wb.set_current()
        Range(worksheet, range).value = l
        return l

    # push list of dictionaries to excel worksheet
    def worksheet_data_push_list_dict(self,wb,ws,l,range='A1:BZ500'):
        l = DictionaryFunctions().dictionaries_list_convert(l,headers_sorted=True)
        ConvenienceFunctions().append_empty(l,200)
        self.worksheet_data_push(wb,ws,l,range=range)
        return l

    def worksheet_update(self,wb,ws,func,range='A1:BZ50'):
        L = self.worksheet_data_pull(wb,ws,range=range)
        L = self.data_format(L)
        PerformanceFunctions().code_summary_print(L)
        l = ListFunctions().parse_string_return(L, "|")
        PerformanceFunctions().code_summary_print(l)
        l = [i for i in l if "*" not in i]
        for i in l:
            PerformanceFunctions().code_comment(comment=str(i))
            PerformanceFunctions().code_summary_print(i)
            #print "query: {}".format(i)
            headers = ListFunctions().headers_string_triangulate(L,i)  #finds the headers of the query by checking whether they were in first column
            PerformanceFunctions().code_summary_print(headers)

            values = self.list_query_calculate(L, i, headers, func)
            originals = ListFunctions().values_string_triangulate(L, i)
            values = self.list_replace_errors(values, originals)
            values = self.list_values_update_format(values)
            cell_range = self.cell_range_calculate(L, i, values)
            #print "cell range: \n" + cell_range + "\n"
            print "\tcell_range: {}".format(str(cell_range))
            print "\tvalues being sent to gspread"
            print "\t{}".format(str(values))
            self.worksheet_data_push(wb,ws,[values],range=cell_range)
            #Range(cell_range.split(':')[0]).value = [values]


    # if headers true, keep headeres, and if false, remove and replace with blank
    def data_structure_from_query(self,query,add_headers=True):
        query =  query.split("|")[1]
        headers = map(lambda i: i.strip().replace(".","_"),TextFunctions().string_between_pull(query,start="select ",end=" from").split(","))

        data = Query().query_all_ordered_dict(query)
        data = DictionaryFunctions().dict_keys_list_ensure(data)
        data = DictionaryFunctions().table_formulate_from_list(data,headers=headers,lower_case_key_apply=True)
        if not add_headers:
            data.pop(0)
            data.insert(0,['']*len(data[0]))
        return data

    # finds all the
    def worksheet_table_update_from_query(self,wb,ws,append_empty=100):
        L = self.worksheet_data_pull(wb,ws)
        L = self.data_format(L)
        PerformanceFunctions().code_summary_print(L)
        l = ListFunctions().parse_string_return(L, "|")
        for query in l:
            data = self.data_structure_from_query(query)
            if append_empty:
                subsub = ['']*len(data[0])
                subsub = [subsub]*append_empty
                data.extend(subsub)

            cell_range = self.cell_range_triangulate_for_list(L,query,data) # get the query
            print "data: {}".format(str(data))
            print "cell_range: {}".format(str(cell_range))

            self.worksheet_data_push(wb,ws,data,range=cell_range)

class OpenPYXLFunctionsBase(ExcelWings):
    def worksheet_open(self, filename='/Users/Chris/Desktop/Exec summary dashboard 150803.xlsx', worksheet='Data'):
        wb = load_workbook(filename=filename)
        ws = wb.get_sheet_by_name(name=worksheet)
        return ws

    def worksheet_open_save(self, filename='/Users/Chris/Desktop/Exec summary dashboard 150803.xlsx', worksheet='Data'):
        wb = load_workbook(filename=filename)
        ws = wb.get_sheet_by_name(name=worksheet)
        wb.save(filename)


class OpenPYXLFunctions(
    OpenPYXLFunctionsBase):  #http://stackoverflow.com/questions/4528982/convert-alphabet-letters-to-number-in-python
    #only takes in two letters at a time, so
    def number_from_letters(self, char):
        char = str(char).lower()  #must be converted to lower otherwise char is messed up
        l = list(char)
        l = [ord(i) - 96 for i in l]
        #print l
        if len(l) == 2:
            v = (float(l[0]) * 26) + float(l[1])
        elif len(l) == 3:  #26 letters, each 26 goes through 26 - so its about 676 that the first letter goes through
            v = 26 + 676 + ((l[0] - 1) * 676) + ((l[1] - 1) * 26) + float(l[2])
        return v

    def number_from_letter(self, char):
        char = str(char).lower()  #must be converted to lower otherwise char is messed up
        if len(char) > 1:
            v = self.number_from_letters(char)
        else:
            v = ord(char) - 96
        return int(v)

    # returns two tuples (both for the range and the column)
    # s = (e.g. 'A1:B4')
    def number_range_from_letter_colon(self, s):
        #print "<number_range_from_letter_colon>"
        tup = s.split(":")
        col_range = map(lambda i: ''.join(re.findall(r'[a-zA-Z]', i)), tup) #needs to be joined so that it's one
        #print "\tcol_range: {}".format(str(col_range))
        col_range = map(lambda i: self.number_from_letter(i), col_range)
        #print "\tcol_range: {}".format(str(col_range))
        col_range[1] = col_range[1] + 1  #because it 1 to 10 will update 1 to 9

        row_range = map(lambda i: int(re.findall(r'[\d\,\d]+', i)[0]), tup)
        row_range[1] = row_range[1] + 1  #because it 1 to 10 will update 1 to 9

        return row_range, col_range

    # worksheet update from list
    # l - list is of values
    # cell_range - (e.g. A1:B10)
    def list_write_from_range(self, l, cell_range,ws):
        row_range, col_range = self.number_range_from_letter_colon(cell_range)
        for a, row in enumerate(range(*row_range)):
            for b, col in enumerate(range(*col_range)):
                _ = ws.cell(column=col, row=row, value="%s" % l[
                    (a * len(range(*col_range))) + b])  # it's pulling the index of the list where it would be
        return

    # worksheet update from list
    # l - list is of values
    # cell_range - (e.g. A1:B10)
    def worksheet_list_write_from_range(self, l, cell_range,
                                        filename='/Users/Chris/Desktop/Exec summary dashboard 150803.xlsx',
                                        worksheet='Data'):
        print "excel_functions, <worksheet_list_write_from_range>"
        wb = load_workbook(filename=filename)
        ws = wb.get_sheet_by_name(name=worksheet)
        print "\tfilename: {}".format(str(filename))
        print "\tworksheet: {}".format(str(worksheet))
        print "\tcell_range: {}".format(str(cell_range))
        row_range, col_range = self.number_range_from_letter_colon(cell_range)
        print "\trow_range: {}".format(str(row_range))
        print "\tcol_range: {}".format(str(col_range))
        for a, row in enumerate(range(*row_range)):
            for b, col in enumerate(range(*col_range)):
                try:
                    val = l[(a * len(range(*col_range))) + b]
                except IndexError:
                    val = ""
                print "\t\tupdating value: {}".format(str(val))
                _ = ws.cell(column=col, row=row, value="%s" % val)  # it's pu
        wb.save(filename)
        return




    # this updates a range of cells
    def workbook_test(self,
                      filename='/Users/Chris/Desktop/Exec summary dashboard 150803.xlsx'):  #http://openpyxl.readthedocs.org/en/latest/usage.html
        wb = load_workbook(filename=filename)
        ws = wb.create_sheet(title="Data Test")
        for row in range(10, 20):
            for col in range(27, 54):
                _ = ws.cell(column=col, row=row, value="%s" % get_column_letter(col))
        wb.save(filename)

    # cell - the cell it updates
    # value - the value it updates
    def workbook_worksheet_write(self, cell='A2', value=42,
                                 filename='/Users/Chris/Desktop/Exec summary dashboard 150720 V5.xlsx',
                                 worksheet=None):  #http://stackoverflow.com/questions/13381384/modify-an-existing-excel-file-using-openpyxl-in-python?rq=1
        #wb = Workbook()
        wb = load_workbook(filename=filename)
        if not worksheet:
            ws = wb.active
        else:
            ws = wb.get_sheet_by_name(name=worksheet)
        ws[cell] = value
        #ws.append([1, 2, 3])
        wb.save(filename)

    def workbook_named_range(self, filename='/Users/Chris/Desktop/Exec summary dashboard 150720 V5.xlsx',
                             worksheet='Data',
                             named_range='MRR'):  #http://stackoverflow.com/questions/13381384/modify-an-existing-excel-file-using-openpyxl-in-python?rq=1
        #wb = Workbook()
        wb = load_workbook(filename=filename)
        if not worksheet:
            ws = wb.active
        else:
            ws = wb.get_sheet_by_name(
                name=worksheet)  #http://stackoverflow.com/questions/28896209/read-values-from-named-ranges-with-openpyxl
        l = ws.get_named_range(named_range)
        l = [i.value for i in l]
        return l

    def workbook_named_range_update(self, filename='/Users/Chris/Desktop/Exec summary dashboard 150720 V5.xlsx',
                                    worksheet='Data',
                                    named_range='MRR'):  #http://stackoverflow.com/questions/13381384/modify-an-existing-excel-file-using-openpyxl-in-python?rq=1
        #wb = Workbook()
        wb = load_workbook(filename=filename)
        if not worksheet:
            ws = wb.active
        else:
            ws = wb.get_sheet_by_name(
                name=worksheet)  #http://stackoverflow.com/questions/28896209/read-values-from-named-ranges-with-openpyxl
        l = ws.get_named_range(named_range)
        for i in l:
            print i
            i = 'a'
        #l = [i.value for i in l]
        wb.save(filename)


class ExcelFunctions(OpenPYXLFunctions):
    # Can only create a workbook with this
    # http://stackoverflow.com/questions/18849535/how-to-write-update-data-into-cells-of-existing-xlsx-workbook-using-xlsxwriter-i
    def write_column(self, csvlist, filename="filename.xlsx"):
        workbook = xlsxwriter.Workbook(filename, {'strings_to_numbers': True})
        worksheet = workbook.add_worksheet()
        row = 0
        col = 0
        for i in csvlist:
            worksheet.write(col, row, i)
            col += 1

        workbook.close()


def recreate_worksheet_test():
    wb = Workbook(wb_directory,app_target=app_target)
    wb.set_current()

def main():

    s = "sfdc|select Name,Amount from opportunity where isdeleted = False Limit 1"
    l = ExcelFunctions().data_structure_from_query(s)
    print l
    return
    wb_directory = '/Users/Chris/Desktop/exec_dash.xlsx'
    wb = Workbook(wb_directory,app_target='/Applications/Microsoft Office 2011/Microsoft Excel.app')
    #wb = Workbook(app_target='/Applications/Microsoft Office 2011/Microsoft Excel.app/Contents/MacOS/Microsoft Excel')

    #ExcelFunctions().workbook_named_range_update()


if __name__ == "__main__": main()
#file_functions.py



import sys, json
import os
from os import rename, listdir
from pyPdf import PdfFileWriter, PdfFileReader


class PDFCombine(object):
    # Creating a routine that appends files to the output file
    def append_pdf(self,input,output):
        [output.addPage(input.getPage(page_num)) for page_num in range(input.numPages)]


    # l is the list of files
    # output_name
    def pdf_combine(self,l,output_name):
        # Creating an object where pdf pages are appended to
        output = PdfFileWriter()
        for i in l:
            try:
                self.append_pdf(PdfFileReader(file(i,"rb")),output)
            except:
                print "failed: {}".format(str(i))
        output.write(file(output_name,"wb"))


class PayloadRead(PDFCombine):
    def payload_read(self):
        print "file_functions.py , <payload_read>"
        payload_file = None
        payload = None


        for i in range(len(sys.argv)):
            if sys.argv[i] == "-payload" and (i + 1) < len(sys.argv):
                payload_file = sys.argv[i + 1]
                with open(payload_file,'r') as f:
                    payload = f.read()

        print "\tpayload:\n" + str(payload)
        return payload

class FileWrite(PayloadRead):
    def file_list_from_directory(self,dir):
        l = os.listdir(dir)
        return l


    # condition func will take in the file name
    # manipulation func, will rename it
    def file_rename_from_condition(self,directory,condition_func,manipulation_func):
        for filename in os.listdir(directory):
            if condition_func(filename):
                print "file_name: {}".format(str(filename))

                new_name = manipulation_func(filename)
                print "new_name: {}".format(str(new_name))
                os.rename(directory + '/' + filename,new_name)

    # difference is it takes in attributes
    # http://stackoverflow.com/questions/10960477/how-to-read-file-attributes-in-directory
    # condition_func - must take in the filename attributes
    def file_rename_from_directory(self,old_directory=None,new_directory=None,condition_func=None,manipulation_func=None):
        for filename in os.listdir(old_directory):
            info = os.stat(filename)
            if condition_func(info):
                new_name = manipulation_func(filename)
                os.rename(old_directory + '/' + filename,new_directory + '/' + new_name)

    def file_save(self,file_name,text):
        if "/" not in file_name:
            file_name = '/Users/Chris/Documents/ScriptData/' + file_name
        f = open(file_name, 'w+')
        f.write(str(text))
        print "text_functions.py, <file_save>"
        print "save location: " + str(file_name)
        print "text below:\n" + str(text)
        f.close()

class FileRead(FileWrite):
    def file_read(self,dir):
        try:
            f = open(dir, 'r+')
            f = f.read()
        except IOError:
            dir = '/Users/Chris/Documents/ScriptData/' + dir
            f = open(dir, 'r+')
            f = f.read()
        return f


class FileFunctions(FileRead):
    pass

# this is how to read a file
def file_read(dir = "/Users/Chris/Desktop/Inbox/svb_login_challenge_question.html"):
    r = FileFunctions().file_read(dir)
    print r

def files_directory_read(directory='/Users/Chris/Desktop/sfdc_contracts'):
    for filename in os.listdir(directory):
        print filename
def main():
    file = '/Users/Chris/Desktop/sfdc_contracts/Please_DocuSign_Curalate_Order_Form-_ALOHA_-.pdf'
    new_file = '/Users/Chris/Desktop/test.pdf'
    os.rename(file, new_file)

    #files_directory_read()

    #file_read()




if __name__ == "__main__": main()

#firebase_special_list_functions.py

"""
The purpose is to conume a query string generated by Firebase 
and then spit out a unique list based on a function 
"""



"""
	Here the purpose is to consume whatever query and generate 
	a leaderboard

	Need to import from Sales Daily Report
"""

from Shippy.Functions.SalesReportLeaderBoard import LeaderboardLists
from Shippy.Functions.list_functions import ListFunctions


from Shippy.DailyReports.BrandStrategistReport.BrandStrategistReportMetricTables import *

class BaseSpecialListFunctionsSupport(object):
	#This will find anything within the $
	def DollarCounter(self,val):
		try:
			regex = '.*\$(.*?)\$.*'
			matches = re.search(regex, val)
			return matches.group(1)
		except AttributeError:
			return val #if no parenthesis 


	#purpose is to split out the $functionname$query from the query
	#take in the query without the function name
	def QuerySplitOut(self,string):
		string = string.split("$")
		return string[2]



class BaseSpecialListFunctions(BaseSpecialListFunctionsSupport):
	#IF QUERY IS: $Leaderboard$This_Month
	#Pull out This_Month and stick it in to the TimeRange
	#Return the Leaderboard. Done!
	def Leaderboard(self,string):
		try:
			val = self.QuerySplitOut(string)
		except IndexError: #in case it doesnt have the dollar sign
			val = string
		lst = LeaderboardLists().Leaderboard(val)
		lst = ListFunctions().AppendTotal(lst)
		lst = lst[:-1] #because i dont want the total of all the rows. it will be added later
		return lst

	#to use this, you just gotta put
	#$MetricTable$BrandStrategist
	def MetricTable(self,string):
		string = self.QuerySplitOut(string)

		print string
		lst = MetricTables().Metrics(Owner=string)
		return lst
	
def main():
	print BaseSpecialListFunctions().MetricTable("$hello$Liz Madsen")

	#print BaseSpecialListFunctions().Leaderboard('This_Month')


if __name__ == "__main__": main()

#html_functions.py

import re
import ast
from collections import defaultdict, Counter
import itertools
import operator
from operator import itemgetter, attrgetter
from itertools import chain, groupby, product
import sys
import traceback
import os
import inspect
import dateutil.parser  #used for string_to_date_try
import shlex
from Shippy.Functions.performance_functions import PerformanceFunctions
from Shippy.Functions.list_functions import ListFunctions
from Shippy.Functions.dictionary_functions import DictionaryFunctions
from Shippy.Functions.text_functions import TextFunctions
"""
A library designed to turn Python Tables into HTML Structures
"""
class HTMLMetricFormat(object):
    # def increase_decrease_metric_html_base(self,main_number,percentage_change,increase=True):
    #     if increase:
    #         image_source = "https://www.dropbox.com/s/eikktshml5dayzc/up_green_arrow.png?raw=1"
    #         color = "208f16"
    #     else:
    #         image_source = "https://www.dropbox.com/s/ktz9csn9651cwpi/down_red_arrow.png?raw=1"
    #         color = "ad212c"
    #     html = """
    #     <span style="font-size:1.5em ">
    #     {}
    #      </span>
    #     <span style="padding-left:0px">
    #      <img src="{}" height="10px" width="15px">
    #      </span>
    #      <span style="font-size:14px;color:#{};line-height:20px;font-family:Helvetica Neue,&#39;Helvetica Neue&#39;,Helvetica,Arial,Lucida Grande,Lucida Sans,Lucida Sans Unicode,Verdana,sans-serif">
    #     {}
    #     </span>""".format(main_number,image_source,color,percentage_change)
    #     return html

    def increase_decrease_metric_html_base(self,main_number,percentage_change,increase=True):
        if increase:
            image_source = "+"#"#"https://www.dropbox.com/s/eikktshml5dayzc/up_green_arrow.png?raw=1"
            color = "208f16"
        else:
            image_source = "-"#"#"https://www.dropbox.com/s/ktz9csn9651cwpi/down_red_arrow.png?raw=1"
            color = "ad212c"
        html = """
        <span style="font-size:1.5em ">
        {}
         </span>
         <span padding:0 style="font-size:10px;color:#{};line-height:20px;font-family:Helvetica Neue,&#39;Helvetica Neue&#39;,Helvetica,Arial,Lucida Grande,Lucida Sans,Lucida Sans Unicode,Verdana,sans-serif">
        {}{}
        </span>""".format(main_number,color,image_source,percentage_change)
        return html

    def increase_decrease_metric_html(self,new_value,old_value,number_format_func=None,percentage_number_func=None):
        percentage_change = abs((float(new_value) - float(old_value))/float(old_value))
        positive = float(new_value) >= float(old_value)
        if not number_format_func:
            number_format_func = lambda i: TextFunctions().format_determine(i,format='number_no_decimal')
        if not percentage_number_func:
            percentage_number_func = lambda i: TextFunctions().format_determine(i, format="percent_no_decimal")
        main_number = number_format_func(new_value)
        percentage = percentage_number_func(percentage_change)
        html = self.increase_decrease_metric_html_base(main_number,percentage,increase=positive)
        return html


class HTMLRowTable(HTMLMetricFormat):
    #l = ListFunctions().list_reordered(l, HeaderOrder)

    def html_header_row(self,item_list):
        """
        <tr class="receipt-bold">
        <td style="font-family: sans-serif; vertical-align: top; padding: 5px; font-size: 18px; border-bottom: 2px solid #333; border-top: 2px solid #333; font-weight: 600;" valign="top">Total</td>
        <td class="receipt-figure" style="font-family: sans-serif; vertical-align: top; padding: 5px; font-size: 18px; border-bottom: 2px solid #333; text-align: right; border-top: 2px solid #333; font-weight: 600;" valign="top" align="right">$42.00</td>
        </tr>
        :param item_list:
        :return:

        """
    def html_email_row_header(self,item_list,header_style=None,first_item_html = """<td style="font-family: sans-serif; font-size: 14px; vertical-align: top; border-bottom: 1px solid #eee; padding: 5px;" valign="top">{}</td>""",remaining_items_html="""<td class="receipt-figure" style="font-family: sans-serif; font-size: 14px; vertical-align: top; border-bottom: 1px solid #eee; padding: 5px; text-align: right;" valign="top" align="right">{}</td>"""):
        """
            <tr>
            <td style="font-family: sans-serif; font-size: 14px; vertical-align: top; border-bottom: 1px solid #eee; padding: 5px;" valign="top">Something</td>
            <td class="receipt-figure" style="font-family: sans-serif; font-size: 14px; vertical-align: top; border-bottom: 1px solid #eee; padding: 5px; text-align: right;" valign="top" align="right">20.00</td>
            </tr>
        :param dict:
        :return:
        """
        #first_item = """<td style="font-family: sans-serif; font-size: 14px; vertical-align: top; border-bottom: 1px solid #eee; padding: 5px;" valign="top">{}</td>""".format(item_list[0])
        first_item = first_item_html.format(item_list[0])
        #remaining_items_format = """<td class="receipt-figure" style="font-family: sans-serif; font-size: 14px; vertical-align: top; border-bottom: 1px solid #eee; padding: 5px; text-align: right;" valign="top" align="right">{}</td>"""
        remaining_items = map(lambda i: remaining_items_html.format(TextFunctions().unicode_check_fix(i)), [item_list[1:]])
        item_html_list = [first_item] + remaining_items
        html_items = ''.join(item_html_list)
        if not header_style:
            full_item_html_list = "<tr>{}</tr>".format(html_items)
        else:
            full_item_html_list = header_style+"{}</tr>".format(html_items)
        return full_item_html_list

    def html_email_row(self,item_list,header_style=None,first_item_html = """<td style="font-family: sans-serif; font-size: 14px; vertical-align: top; border-bottom: 1px solid #eee; padding: 5px;" valign="top">{}</td>""",remaining_items_html="""<td class="receipt-figure" style="font-family: sans-serif; font-size: 14px; vertical-align: top; border-bottom: 1px solid #eee; padding: 5px; text-align: right;" valign="top" align="right">{}</td>"""):
        """
            <tr>
            <td style="font-family: sans-serif; font-size: 14px; vertical-align: top; border-bottom: 1px solid #eee; padding: 5px;" valign="top">Something</td>
            <td class="receipt-figure" style="font-family: sans-serif; font-size: 14px; vertical-align: top; border-bottom: 1px solid #eee; padding: 5px; text-align: right;" valign="top" align="right">20.00</td>
            </tr>
        :param dict:
        :return:
        """
        #first_item = """<td style="font-family: sans-serif; font-size: 14px; vertical-align: top; border-bottom: 1px solid #eee; padding: 5px;" valign="top">{}</td>""".format(item_list[0])
        first_item = first_item_html.format(item_list[0])
        #remaining_items_format = """<td class="receipt-figure" style="font-family: sans-serif; font-size: 14px; vertical-align: top; border-bottom: 1px solid #eee; padding: 5px; text-align: right;" valign="top" align="right">{}</td>"""
        remaining_items = map(lambda i: remaining_items_html.format(TextFunctions().unicode_check_fix(i)), item_list[1:])
        item_html_list = [first_item] + remaining_items
        html_items = ''.join(item_html_list)
        if not header_style:
            full_item_html_list = "<tr>{}</tr>".format(html_items)
        else:
            full_item_html_list = header_style+"{}</tr>".format(html_items)
        return full_item_html_list

    def html_email_table(self,array,headers=[('actual_key_name','new_key_name')],order_key=None,reverse=True,func_tups=None):
        lol = DictionaryFunctions().dictionaries_to_list_convert_formatted_headers(array,headers)
        headers = lol[0]
        body_rows = lol[1:]
        header_style = """<tr class="receipt-bold">"""
        first_item_header_style = """<td style="font-family: sans-serif; vertical-align: top; padding: 5px; font-size: 15px; border-bottom: 2px solid #333; border-top: 2px solid #333; font-weight: 600;" valign="top">{}</td>"""
        remaining_items_header_style = """<td class="receipt-figure" style="font-family: sans-serif; vertical-align: top; padding: 5px; font-size: 18px; border-bottom: 2px solid #333; text-align: right; border-top: 2px solid #333; font-weight: 600;" valign="top" align="right">{}</td>"""
        header_html = self.html_email_row(headers,header_style=header_style,first_item_html=first_item_header_style,remaining_items_html=remaining_items_header_style)

        #PerformanceFunctions().input_print(body_rows)
        #body_rows = [[u'Other', u'LANDMARK              415-981-8850 Expense|MTB', u'2016-11-17', u'850.0'], [u'Amazon', u'AMAZON MKTPLACE PMTS  AMZN.COM/BILL Expense|MTB', u'2016-11-22', u'62.78'], [u'Other', u'INTERNATIONAL FEE     - PHASE ONE A Expense|MTB', u'2016-12-09', u'0.5'], [u'Uber', u'UBER TECHNOLOGIES INC 866-576-1039 Expense|MTB', u'2016-12-06', u'7.73'], [u'Uber', u'UBER   US DEC12 S5PDP HELP.UBER.COM Expense|MTB', u'2016-12-13', u'7.6'], [u'Amazon', u'AMAZON VIDEO ON DEMANDAMZN.COM/BILL Expense|MTB', u'2016-11-22', u'12.71'], [u'Uber', u'UBER   US NOV26 UEMLP HELP.UBER.COM Expense|MTB', u'2016-11-28', u'7.43'], [u'Payroll', u'Jessica Lyles | 21917.34|Salary & Wage Expense', u'2016-11-28', u'3959.0'], [u'Other', u'venmo|VENMO                 855-812-4430|Deborah Chiaravalloti|for Home Care Assistance November Blogs [12 Posts]|venmo expense uncategorized', u'2016-11-25', u'360.0'], [u'Peco', u'PECO PAYMENT          800-494-4000 Expense|MTB', u'2016-11-30', u'57.6'], [u'Deposit', u'INTUIT PYMT SOLN DEPOSIT    524771990534310 Revenue|MTB', u'2016-12-08', u'2500.0'], [u'Amazon', u'AMAZON MKTPLACE PMTS  AMZN.COM/BILL Expense|MTB', u'2016-12-05', u'93.67'], [u'Uber', u'venmo|VENMO                 855-812-4430|James Adams|for Ubers - City Fitness Shoot|venmo expense uncategorized', u'2016-11-16', u'16.9'], [u'Uber', u'UBER   US NOV30 RJDCH HELP.UBER.COM Expense|MTB', u'2016-12-01', u'6.97'], [u'City Fitness', u'ABC*CITY FITNESS      888-8279262 Expense|MTB', u'2016-11-25', u'49.99'], [u'Amtrak', u'AMTRAK .COM 3190726099WASHINGTON Expense|MTB', u'2016-11-16', u'72.0'], [u'Other', u'PAYPAL INST XFER            UPWRKESCROW Expense|MTB', u'2016-11-16', u'513.75'], [u'Acme', u'PIN #0291 ACME        PHILADELPHIA Expense|MTB', u'2016-12-07', u'3.01'], [u'Amtrak', u'AMTRAK .COM 3460678078WASHINGTON Expense|MTB', u'2016-12-13', u'55.0'], [u'Other', u'WWW AEROTECHNIC COM   732-4690519 Expense|MTB', u'2016-11-14', u'42.45'], [u'Uber', u'UBER TECHNOLOGIES INC 866-576-1039 Expense|MTB', u'2016-11-25', u'9.99'], [u'Other', u'ROSIES               NEW YORK Expense|MTB', u'2016-11-21', u'97.1'], [u'Uber', u"venmo|VENMO                 855-812-4430|Hannah Candelaria| uber,for tuesday's construction site shoot|venmo expense uncategorized", u'2016-11-14', u'5.75'], [u'Uber', u'UBER   US NOV29 2FA3E HELP.UBER.COM Expense|MTB', u'2016-11-30', u'5.83'], [u'City Fitness', u'venmo|VENMO                 855-812-4430|James Adams|For the City Fitness shoots.|venmo expense uncategorized', u'2016-11-25', u'300.0'], [u'Spotify', u'SPOTIFY USA           646-8375380 Expense|MTB', u'2016-11-28', u'16.19'], [u'Snap Kitchen', u'SNAP KITCHEN 064      PHILADELPHIA Expense|MTB', u'2016-12-12', u'6.99'], [u'Deposit', u'MOBILE DEPOSIT - XXXXXXXXX2525 Revenue|MTB', u'2016-12-13', u'4000.0'], [u'Deposit', u'M&T ATM CHECK DEPOSIT                  SA0698 ? Revenue|MTB', u'2016-11-29', u'11600.0'], [u'Upwork', u'Preapproved Payment Sent | Upwork Escrow Inc. | Completed|PAYPAL INST XFER            UPWRKESCROW|PayPal|Independent Contractor Expense', u'2016-11-30', u'565.13'], [u'Uber', u'UBER   US DEC07 SOLKB HELP.UBER.COM Expense|MTB', u'2016-12-08', u'8.87'], [u'Uber', u'UBER   US NOV18 7XNZV HELP.UBER.COM Expense|MTB', u'2016-11-21', u'7.2'], [u'Uber', u'UBER TECHNOLOGIES INC 866-576-1039 Expense|MTB', u'2016-11-21', u'24.4'], [u'Uber', u'UBER TECHNOLOGIES INC 866-576-1039 Expense|MTB', u'2016-11-14', u'10.65'], [u'Uber', u'UBER   US DEC12 JM2I7 HELP.UBER.COM Expense|MTB', u'2016-12-13', u'8.86'], [u'Uber', u'UBER   US NOV13 VI6QS HELP.UBER.COM Expense|MTB', u'2016-11-14', u'6.88'], [u'Other', u'FACEBK KQ85ZAEAS2     650-6187714 Expense|MTB', u'2016-12-01', u'124.5'], [u'Uber', u'UBER   US NOV12 CWAML HELP.UBER.COM Expense|MTB', u'2016-11-14', u'19.01'], [u'Uber', u'UBER   US NOV25 3J6GG HELP.UBER.COM Expense|MTB', u'2016-11-28', u'19.08'], [u'Other', u'venmo|VENMO                 855-812-4430|Chris Cruz|for Financial Report|venmo expense uncategorized', u'2016-11-14', u'600.0'], [u'Other', u'venmo|VENMO                 855-812-4430|Hannah Candelaria|for cora shoot 11/12 props and lunch|venmo expense uncategorized', u'2016-11-16', u'97.26'], [u'Craigslist', u'CRAIGSLIST.ORG        415-399-5200 Expense|MTB', u'2016-11-14', u'35.0'], [u'Uber', u'UBER   US DEC11 WVGLG HELP.UBER.COM Expense|MTB', u'2016-12-12', u'45.1'], [u'Uber', u'UBER   US NOV30 6TMAH HELP.UBER.COM Expense|MTB', u'2016-12-01', u'20.09'], [u'Payroll', u'Jessica Lyles | 1635.84|Payroll Tax Expense', u'2016-11-28', u'305.69'], [u'Uber', u'UBER   US NOV15 ZRVKN HELP.UBER.COM Expense|MTB', u'2016-11-16', u'8.74'], [u'Uber', u'UBER   US NOV28 ZQRVW HELP.UBER.COM Expense|MTB', u'2016-11-29', u'9.1'], [u'Amtrak', u'AMTRAK .COM 3220704121WASHINGTON Expense|MTB', u'2016-11-21', u'108.0'], [u'Uber', u'UBER   US NOV21 TWQQZ HELP.UBER.COM Expense|MTB', u'2016-11-22', u'16.21'], [u'Google', u'GOOGLE *SVCSAPPS_PALETCC@GOOGLE.COM Expense|MTB', u'2016-12-02', u'180.0'], [u'BIGSTOCKPHOTO', u'STK*BIGSTOCKPHOTO.COM 855-272-5125 Expense|MTB', u'2016-12-12', u'79.0'], [u'Other', u'OTG MANAGEMENT EWR  LLNEWARK Expense|MTB', u'2016-11-25', u'47.06'], [u'Other', u'EUROPEAN REPUBLIC     PHILADELPHIA Expense|MTB', u'2016-12-07', u'17.37'], [u'Other', u'WEB XFER TO CHK   00009849627667 Expense|MTB', u'2016-12-06', u'500.0'], [u'Amazon', u'AMAZON VIDEO ON DEMANDAMZN.COM/BILL Expense|MTB', u'2016-11-21', u'3.17'], [u'Uber', u'UBER   US NOV18 RH7CP HELP.UBER.COM Expense|MTB', u'2016-11-21', u'9.11'], [u'Uber', u'UBER   US NOV11 TX2QP HELP.UBER.COM Expense|MTB', u'2016-11-14', u'10.02'], [u'Other', u'PAYPAL INST XFER            KYFRA LLC Expense|MTB', u'2016-12-07', u'100.0'], [u'Uber', u'UBER   US NOV17 I6A3E HELP.UBER.COM Expense|MTB', u'2016-11-18', u'5.75'], [u'Other', u'PAYPAL INST XFER            UPWRKESCROW Expense|MTB', u'2016-12-12', u'565.13'], [u'Other', u'CHECK 0055 Expense|MTB', u'2016-12-02', u'419.35'], [u'Deposit', u'MOBILE DEPOSIT - XXXXXXXXX1358 Revenue|MTB', u'2016-12-12', u'8624.37'], [u'Amazon', u'AMAZON MKTPLACE PMTS  AMZN.COM/BILL Expense|MTB', u'2016-12-02', u'38.54'], [u'Amazon', u'AMAZON.COM            AMZN.COM/BILL Expense|MTB', u'2016-12-05', u'21.19'], [u'Other', u'PAYPAL INST XFER            ADOBESYSTEM Expense|MTB', u'2016-12-07', u'75.59'], [u'Amtrak', u'AMTRAK .COM 3320717068WASHINGTON Expense|MTB', u'2016-11-29', u'110.0'], [u'Uber', u'UBER   US NOV17 K5KC6 HELP.UBER.COM Expense|MTB', u'2016-11-18', u'11.69'], [u'Payroll', u'Keenan Marshall | 1635.84|Payroll Tax Expense', u'2016-11-28', u'146.18'], [u'Uber', u'UBER   US DEC07 QRE26 HELP.UBER.COM Expense|MTB', u'2016-12-08', u'9.34'], [u'Uber', u'UBER   US DEC05 AIS2L HELP.UBER.COM Expense|MTB', u'2016-12-06', u'8.14'], [u'Upwork', u'Preapproved Payment Sent | Upwork Escrow Inc. | Completed|PAYPAL INST XFER            UPWRKESCROW|PayPal|Independent Contractor Expense', u'2016-11-14', u'513.75'], [u'Other', u'Express Checkout Payment Sent | BestBuy.com | Completed|PAYPAL INST XFER            BESTBUY COM|PayPal|Computer Equipment Expense', u'2016-11-30', u'593.99'], [u'Payroll', u'Keenan Marshall | 21917.34|Salary & Wage Expense', u'2016-11-28', u'2000.0'], [u'Instagress', u'PAYPAL INST XFER            INSTAGRESS Expense|MTB', u'2016-11-14', u'71.99'], [u'Uber', u'UBER   US NOV12 T5ADM HELP.UBER.COM Expense|MTB', u'2016-11-14', u'5.75'], [u'Other', u'THE DANDELION         267-238-5502 Expense|MTB', u'2016-12-01', u'78.92'], [u'Uber', u'venmo|VENMO                 855-812-4430|Hannah Candelaria|for ubers to/from cf gradho, groupex shoot|venmo expense uncategorized', u'2016-11-14', u'53.58'], [u'Uber', u'UBER TECHNOLOGIES INC 866-576-1039 Expense|MTB', u'2016-12-06', u'6.58'], [u'15FIVE', u'15FIVE                415-935-4836 Expense|MTB', u'2016-12-05', u'1440.0'], [u'Uber', u'UBER   US DEC02 KGTFN HELP.UBER.COM Expense|MTB', u'2016-12-05', u'6.8'], [u'Google', u'GOOGLE *GOOGLE STORAGE855-492-5538 Expense|MTB', u'2016-11-29', u'9.99'], [u'Other', u'WEB XFER TO CHK   00009849627667 Expense|MTB', u'2016-12-09', u'500.0'], [u'Uber', u'UBER TECHNOLOGIES INC 866-576-1039 Expense|MTB', u'2016-11-21', u'9.48'], [u'Uber', u'UBER   US DEC09 Y6Q4X HELP.UBER.COM Expense|MTB', u'2016-12-12', u'11.02'], [u'Amazon', u'AMAZON MKTPLACE PMTS  AMZN.COM/BILL Expense|MTB', u'2016-12-01', u'2224.94'], [u'Other', u'PHASE ONE AS          FREDERIKSBERG Expense|MTB', u'2016-12-09', u'15.0'], [u'Amazon', u'AMAZON MKTPLACE PMTS  AMZN.COM/BILL Expense|MTB', u'2016-11-14', u'84.05'], [u'Other', u'venmo|VENMO                 855-812-4430|Deborah Chiaravalloti|for Home Care Assistance Blogs December|venmo expense uncategorized', u'2016-12-09', u'630.0'], [u'Uber', u'UBER   US NOV29 VQLME HELP.UBER.COM Expense|MTB', u'2016-11-30', u'11.24'], [u'Amazon', u'AMAZON MKTPLACE PMTS  AMZN.COM/BILL Expense|MTB', u'2016-11-14', u'22.94'], [u'Uber', u'UBER   US DEC02 KUMNW HELP.UBER.COM Expense|MTB', u'2016-12-05', u'7.46'], [u'La Colombe', u'SQ *LA COLOMBE - FI   PHILADELPHIA Expense|MTB', u'2016-12-08', u'7.0'], [u'Uber', u'UBER   US NOV30 MV77C HELP.UBER.COM Expense|MTB', u'2016-12-01', u'6.68'], [u'Other', u'WEB XFER TO CHK   00009849627667 Expense|MTB', u'2016-11-21', u'4500.0'], [u'Other', u'ROCKET LAWYER         800-5189251 Expense|MTB', u'2016-11-16', u'20.0'], [u'Uber', u'UBER   US NOV16 CRICY HELP.UBER.COM Expense|MTB', u'2016-11-17', u'16.94'], [u'Uber', u'UBER   US NOV20 VPF3L HELP.UBER.COM Expense|MTB', u'2016-11-21', u'40.09'], [u'Craigslist', u'CRAIGSLIST.ORG        415-399-5200 Expense|MTB', u'2016-11-14', u'35.0'], [u'Amazon', u'AMAZON.COM AMZN.COM BIAMZN.COM/BILL Expense|MTB', u'2016-11-14', u'143.35'], [u'Payroll', u'Oskar Kalinowski | 21917.34|Salary & Wage Expense', u'2016-11-28', u'3541.67'], [u'Uber', u'venmo|VENMO                 855-812-4430|James Adams|for Uber Everywhere [MyZone Shoot]|venmo expense uncategorized', u'2016-12-12', u'14.21'], [u'Uber', u'UBER   US NOV18 SQXOZ HELP.UBER.COM Expense|MTB', u'2016-11-21', u'18.67'], [u'Amazon', u'AMAZON.COM            AMZN.COM/BILL Expense|MTB', u'2016-11-14', u'45.17'], [u'Other', u'TREDICI ENOTECA       PHILADELPHIA Expense|MTB', u'2016-12-05', u'10.0'], [u'Amazon', u'AMAZON MKTPLACE PMTS  AMZN.COM/BILL Expense|MTB', u'2016-11-23', u'58.63'], [u'Other', u'WRAP SHACK ON THE SQUAPHILADELPHIA Expense|MTB', u'2016-11-17', u'11.67'], [u'Uber', u'UBER   US NOV17 P3OXQ HELP.UBER.COM Expense|MTB', u'2016-11-18', u'10.04'], [u'Other', u'FACEBK XE5VUAEBS2     650-6187714 Expense|MTB', u'2016-11-28', u'50.05'], [u'Uber', u'UBER   US NOV11 X7NU3 HELP.UBER.COM Expense|MTB', u'2016-11-14', u'8.38'], [u'Other', u'LANDMARK              415-981-8850 Expense|MTB', u'2016-11-17', u'665.0'], [u'Coffee', u'SQ *MENAGERIE COFFE   PHILADELPHIA Expense|MTB', u'2016-12-06', u'7.75'], [u'Amtrak', u'AMTRAK .COM 3190605069WASHINGTON Expense|MTB', u'2016-11-16', u'108.0'], [u'Payroll', u'Jeremy Keys | 21917.34|Salary & Wage Expense', u'2016-11-28', u'4333.34'], [u'Uber', u'UBER   US DEC05 4PG3N HELP.UBER.COM Expense|MTB', u'2016-12-06', u'6.85'], [u'La Colombe', u'SQ *LA COLOMBE - FISHTPHILADELPHIA Expense|MTB', u'2016-11-14', u'8.0'], [u'Uber', u'UBER   US DEC08 NUD6M HELP.UBER.COM Expense|MTB', u'2016-12-09', u'8.44'], [u'Solo Real Estate', u'JG REAL ESTATE L WEB PMTS   KL5KG3 Expense|MTB', u'2016-11-30', u'1550.0'], [u'Uber', u'UBER   US DEC10 TWS2R HELP.UBER.COM Expense|MTB', u'2016-12-12', u'48.63'], [u'Uber', u'UBER   US NOV16 DFV47 HELP.UBER.COM Expense|MTB', u'2016-11-17', u'8.97'], [u'TRYCAVIAR', u'TRYCAVIAR.COM MELTKRAFTRYCAVIAR.COM Expense|MTB', u'2016-12-01', u'24.5'], [u'Coffee', u'SQ *REANIMATOR COFF   PHILADELPHIA Expense|MTB', u'2016-12-05', u'5.5'], [u'Uber', u'UBER   US DEC09 TUYRN HELP.UBER.COM Expense|MTB', u'2016-12-12', u'56.72'], [u'BIGSTOCKPHOTO', u'STK*BIGSTOCKPHOTO.COM 855-272-5125 Expense|MTB', u'2016-11-14', u'79.0'], [u'Uber', u'UBER   US NOV18 O6SXE HELP.UBER.COM Expense|MTB', u'2016-11-21', u'111.37'], [u'Coffee', u'FRONT STREET CAFE     PHILADELPHIA Expense|MTB', u'2016-11-14', u'72.64'], [u'Other', u'OPA                   PHILADELPHIA Expense|MTB', u'2016-11-14', u'32.1'], [u'Bench Accounting', u'BENCH ACCOUNTING  INC.888-760-1940 Expense|MTB', u'2016-11-30', u'135.0'], [u'Other', u'PRIME FRESH MEMBERSHIPAMZN.COM/PRME Expense|MTB', u'2016-12-06', u'14.99'], [u'Deposit', u'M&T ATM CHECK DEPOSIT                  SA0698 ? Revenue|MTB', u'2016-11-15', u'2000.0'], [u'Other', u'WEB XFER TO CHK   00009849627667 Expense|MTB', u'2016-12-14', u'300.0'], [u'Payroll', u'Oskar Kalinowski | 1635.84|Payroll Tax Expense', u'2016-11-28', u'269.81'], [u'Other', u'CHECK 0143 Expense|MTB', u'2016-12-05', u'1155.95'], [u'POKE BOWL', u'POKE BOWL             PHILADELPHIA Expense|MTB', u'2016-11-14', u'12.77'], [u'TRIOS TRATTORIA ', u'SQ *TRIOS TRATTORIA   PHILADELPHIA Expense|MTB', u'2016-12-07', u'12.86'], [u'Uber', u'UBER   US NOV13 YU4R3 HELP.UBER.COM Expense|MTB', u'2016-11-14', u'19.21'], [u'Other', u'VENMO                 855-812-4430 Expense|MTB', u'2016-11-23', u'45.46'], [u'Deposit', u'M&T ATM CHECK DEPOSIT                  SA1141 ? Revenue|MTB', u'2016-12-12', u'7800.0'], [u'Blick Art', u'BLICK ART 800-447-1892PHILADELPHIA Expense|MTB', u'2016-12-12', u'28.98'], [u'Uber', u'venmo|Hannah Candelaria|for ubers this week and car wash|venmo expense uncategorized', u'2016-11-18', u'45.46'], [u'Payroll', u'Jeremy Keys | 1635.84|Payroll Tax Expense', u'2016-11-28', u'315.34'], [u'TRYCAVIAR', u'TRYCAVIAR.COM CHEU NOOTRYCAVIAR.COM Expense|MTB', u'2016-12-05', u'39.75'], [u'Target', u'TARGET STORE-                    12/08 I79954 ? Expense|MTB', u'2016-12-08', u'40.85'], [u'Coffee', u'FRONT STREET CAFE     PHILADELPHIA Expense|MTB', u'2016-12-12', u'56.49'], [u'Uber', u'UBER   US DEC08 4O3IR HELP.UBER.COM Expense|MTB', u'2016-12-09', u'18.47'], [u'Other', u'WPY*VANESSA PLOTKIN ME855-469-3729 Expense|MTB', u'2016-12-13', u'200.0'], [u'INTUIT PYMT', u'INTUIT PYMT SOLN TRAN FEE   524771990534310 Expense|MTB', u'2016-12-08', u'85.25'], [u'Other', u'SQ *STREETSIDE        PHILADELPHIA Expense|MTB', u'2016-11-14', u'13.04'], [u'Mulerhins', u'WM MULERHINS          PHILADELPHIA Expense|MTB', u'2016-11-14', u'18.4'], [u'Uber', u'UBER   US DEC07 YQNME HELP.UBER.COM Expense|MTB', u'2016-12-08', u'6.7'], [u'Amazon', u'AMAZONPRIME MEMBERSHIPAMZN.COM/PRME Expense|MTB', u'2016-11-22', u'11.65'], [u'Uber', u'UBER   US NOV28 5A4MN HELP.UBER.COM Expense|MTB', u'2016-11-29', u'4.76'], [u'Upwork', u'Preapproved Payment Sent | Upwork Escrow Inc. | Completed|PAYPAL *UPWRKESCROW   402-935-7733|PayPal|Independent Contractor Expense', u'2016-11-21', u'565.13'], [u'Deposit', u'DEPOSIT Revenue|MTB', u'2016-12-08', u'7350.0'], [u'Other', u'Web Accept Payment Sent | Julie Lichtman | Completed|PAYPAL INST XFER            SWEATANDGLO|PayPal|Awaiting Category - Expense', u'2016-11-14', u'200.00'], [u'Streak', u'STREAK.COM            877-887-7815 Expense|MTB', u'2016-11-30', u'19.0'], [u'Other', u"venmo|VENMO                 855-812-4430|Rachel Kline|for Gas for wasting your time Friday. I'm gonna beat Keenan up.|venmo expense uncategorized", u'2016-11-14', u'30.0'], [u'Snap Kitchen', u'SNAP KITCHEN 064      PHILADELPHIA Expense|MTB', u'2016-12-02', u'9.91'], [u'Amazon', u'AMAZON MKTPLACE PMTS  AMZN.COM/BILL Expense|MTB', u'2016-11-14', u'39.42'], [u'Other', u'PIN WHOLEFDS PCC #10 2PHILADELPHIA Expense|MTB', u'2016-12-09', u'33.43'], [u'Uber', u'UBER   US DEC12 FKKHB HELP.UBER.COM Expense|MTB', u'2016-12-13', u'5.25'], [u'Uber', u'UBER   US NOV14 7Q6X7 HELP.UBER.COM Expense|MTB', u'2016-11-15', u'101.32'], [u'Other', u'PAY@HANDY.COM DEC05   855-216-0216 Expense|MTB', u'2016-12-05', u'90.0'], [u'Coffee', u'SQ *REANIMATOR COFF   PHILADELPHIA Expense|MTB', u'2016-12-05', u'21.85'], [u'Uber', u'UBER   US NOV29 Z6GXZ HELP.UBER.COM Expense|MTB', u'2016-11-30', u'32.32'], [u'Amtrak', u'AMTRAK .COM 3430645066WASHINGTON Expense|MTB', u'2016-12-12', u'90.0'], [u'Other', u'PGW EZ-PAY            215-235-1000 Expense|MTB', u'2016-11-30', u'31.67'], [u'Other', u'PIN PAPER SOURCE PHILAPHILADELPHIA Expense|MTB', u'2016-12-09', u'109.02'], [u'Payroll', u'Hannah Candelaria | 21917.34|Salary & Wage Expense', u'2016-11-28', u'3500.0'], [u'Uber', u'UBER   US NOV17 WO4S7 HELP.UBER.COM Expense|MTB', u'2016-11-18', u'6.03'], [u'Uber', u'UBER   US DEC08 YFTDS HELP.UBER.COM Expense|MTB', u'2016-12-09', u'7.59'], [u'Coffee', u'SQ *REANIMATOR COFF   PHILADELPHIA Expense|MTB', u'2016-12-07', u'9.5'], [u'Amazon', u'AMAZON MKTPLACE PMTS  AMZN.COM/BILL Expense|MTB', u'2016-11-29', u'72.43'], [u'Coffee', u'MOOD CAFE             PHILADELPHIA Expense|MTB', u'2016-12-05', u'23.36'], [u'Amazon', u'AMAZON VIDEO ON DEMANDAMZN.COM/BILL Expense|MTB', u'2016-12-12', u'29.67'], [u'Instacart', u'INSTACART             888-246-7822 Expense|MTB', u'2016-12-02', u'30.09'], [u'Coffee', u'REANIMATORCOFFEE.COM  REANIMATORCOF Expense|MTB', u'2016-11-14', u'174.0'], [u'Uber', u'UBER   US NOV23 E3UY5 HELP.UBER.COM Expense|MTB', u'2016-11-25', u'22.11'], [u'Other', u'WEB XFER TO CHK   00009849627667 Expense|MTB', u'2016-11-30', u'275.0'], [u'LivHome', u'venmo|VENMO                 855-812-4430|Deborah Chiaravalloti|for LivHOME Blogs|venmo expense uncategorized', u'2016-11-25', u'120.0'], [u'Snap Kitchen', u'SNAP KITCHEN 064      PHILADELPHIA Expense|MTB', u'2016-11-14', u'7.55'], [u'Deposit', u'DEPOSIT - DETAIL NOT YET AVAILABLE Revenue|MTB', u'2016-12-14', u'2000.0'], [u'Other', u'venmo|VENMO                 855-812-4430|Raquel Redmond|Recipes \\ud83c\\udf7d|venmo expense uncategorized', u'2016-11-23', u'100.0'], [u'Amazon', u'AMAZON MKTPLACE PMTS  AMZN.COM/BILL Expense|MTB', u'2016-11-14', u'12.99'], [u'QDOBA', u'QDOBA #152            PHILADELPHIA Expense|MTB', u'2016-12-06', u'8.42'], [u'Uber', u'UBER   US DEC08 V5RSF HELP.UBER.COM Expense|MTB', u'2016-12-09', u'6.41'], [u'Payroll', u'Rachel Hara | 1635.84|Payroll Tax Expense', u'2016-11-28', u'330.15'], [u'La Colombe', u'SQ *LA COLOMBE - FISHTPHILADELPHIA Expense|MTB', u'2016-11-30', u'23.41'], [u'Uber', u'UBER   US DEC08 MZN5A HELP.UBER.COM Expense|MTB', u'2016-12-09', u'6.72'], [u'Coffee', u'SQ *REANIMATOR COFFEE Expense|MTB', u'2016-12-14', u'17.0'], [u'Amazon', u'AMAZON VIDEO ON DEMANDAMZN.COM/BILL Expense|MTB', u'2016-12-12', u'15.89'], [u'Upwork', u'Preapproved Payment Sent | Upwork Escrow Inc. | Completed|PAYPAL INST XFER            UPWRKESCROW|PayPal|Independent Contractor Expense', u'2016-11-14', u'513.75'], [u'Payroll', u'Rachel Hara | 21917.34|Salary & Wage Expense', u'2016-11-28', u'4583.33'], [u'Payroll', u'Hannah Candelaria | 1635.84|Payroll Tax Expense', u'2016-11-28', u'268.67']]
        #PerformanceFunctions().input_print(headers)
        #headers = ['Name', 'Details', 'Date', 'Amount']
        if order_key:
            key_index = headers.index(order_key)
            body_rows = DictionaryFunctions().dictionary_sort_on_key(body_rows,key_index,reverse=reverse)
        if func_tups:
            for func_key_name,func in func_tups:
                key_index = headers.index(func_key_name)
                for body_row in body_rows:
                    body_row[key_index] = func(body_row[key_index])


        body_html = "".join([self.html_email_row(row) for row in body_rows])
        html = header_html + body_html
        return html

    def html_metrics_table_header(self,subli):
        surrounding_html = """<thead><tr>{}</tr></thead>"""
        row_html = """<th width="25%" valign="top" align="left" style="margin:0;padding:5px 3.33333333% 5px 0;font-weight:400;font-size:0.8em;color:#888888">{}</th>"""
        first_item_row_html = """<th width="25%" valign="top" align="left" style="margin:0;padding:5px 3.33333333% 5px 0;font-weight:400;font-size:0.8em;color:#888888">{}</th>"""

        headers_first_item = first_item_row_html.format(subli[0])
        headers_after_first_item = ''.join([row_html.format(i) for i in subli[1:]])
        headers = headers_first_item + headers_after_first_item
        html_section = surrounding_html.format(headers)
        return html_section

    def html_metrics_table_row(self,subli):
        surrounding_html = "<tr>{}</tr>"
        row_column_html = """<td valign="top" width="25%"><p style="margin:0;padding:7px 18px 7px 0;font-weight:400;width:100%;text-overflow:ellipsis">{}</p></td>"""
        row_html = ''.join([row_column_html.format(i) for i in subli])
        html_section = surrounding_html.format(row_html)
        return html_section

    def html_metrics_table_rows(self,list_of_lists):
        surrounding_html = "<tbody>{}</tbody>"
        rows_html = "".join([self.html_metrics_table_row(subli) for subli in list_of_lists])
        html_section = surrounding_html.format(rows_html)
        return html_section

    def html_metrics_table(self,list_of_lists):
        #[['Name', 'Category', 'Date', 'Amount'], [u'Deposit', u'Other', '10/24/2016', '20,000'], [u'Deposit', u'Other', '11/08/2016', '19,834.64'], [u'Deposit', u'Other', '09/07/2016', '19,134'], [u'Deposit', u'Other', '07/18/2016', '18,884'], [u'Deposit', u'Other', '11/03/2016', '17,450'], [u'Deposit', u'Other', '08/15/2016', '14,749.99'], [u'Deposit', u'Other', '03/17/2016', '14,464.98'], [u'Deposit', u'Other', '04/13/2016', '12,000'], [u'Deposit', u'Other', '10/13/2016', '11,884'], [u'Deposit', u'Other', '11/29/2016', '11,600'], [u'Deposit', u'Other', '02/09/2016', '10,600'], [u'Deposit', u'Other', '04/11/2016', '10,184'], [u'Deposit', u'Other', '08/25/2016', '10,000'], [u'Deposit', u'Other', '12/12/2016', '8,624.37'], [u'Deposit', u'Other', '01/26/2016', '8,600'], [u'Deposit', u'Other', '03/09/2016', '8,600'], [u'Deposit', u'Other', '08/08/2016', '8,384'], [u'Deposit', u'Other', '10/03/2016', '8,300'], [u'Deposit', u'Other', '06/13/2016', '8,184'], [u'Deposit', u'Other', '05/10/2016', '8,184'], [u'Deposit', u'Other', '06/09/2016', '8,000'], [u'Deposit', u'Other', '05/17/2016', '7,999.96'], [u'Deposit', u'Other', '12/12/2016', '7,800'], [u'Deposit', u'Other', '01/26/2016', '7,533.33'], [u'Deposit', u'Other', '12/08/2016', '7,350'], [u'Deposit', u'Other', '09/07/2016', '7,000'], [u'Deposit', u'Other', '02/29/2016', '6,333.32'], [u'Deposit', u'Other', '03/10/2016', '6,100'], [u'Deposit', u'Other', '04/04/2016', '6,100'], [u'Deposit', u'Other', '02/03/2016', '6,000'], [u'Other', u'Other', '10/04/2016', '6,000'], [u'Deposit', u'Other', '06/14/2016', '6,000'], [u'Deposit', u'Other', '01/07/2016', '6,000'], [u'Deposit', u'Other', '05/09/2016', '6,000'], [u'Deposit', u'Other', '06/06/2016', '5,962.50'], [u'Deposit', u'Other', '10/07/2016', '5,782.05'], [u'Deposit', u'Other', '08/01/2016', '5,000'], [u'Contractor', u'Payroll', '05/02/2016', '5,000'], [u'Other', u'Other', '10/21/2016', '5,000'], [u'Deposit', u'Other', '06/27/2016', '4,750'], [u'Payroll', u'Payroll', '10/28/2016', '4,583.33'], [u'Contractor', u'Payroll', '08/03/2016', '4,583.33'], [u'Payroll', u'Payroll', '11/28/2016', '4,583.33'], [u'Payroll', u'Payroll', '09/28/2016', '4,583.33'], [u'Other', u'Other', '11/21/2016', '4,500'], [u'Payroll', u'Payroll', '10/28/2016', '4,333.34'], [u'Payroll', u'Payroll', '11/28/2016', '4,333.34'], [u'Contractor', u'Payroll', '08/22/2016', '4,333.33'], [u'Deposit', u'Other', '08/31/2016', '4,210'], [u'Contractor', u'Payroll', '06/30/2016', '4,200'], [u'Contractor', u'Payroll', '05/04/2016', '4,200'], [u'Contractor', u'Payroll', '08/01/2016', '4,200'], [u'Deposit', u'Other', '11/01/2016', '4,000'], [u'Deposit', u'Other', '12/13/2016', '4,000'], [u'Deposit', u'Other', '09/27/2016', '4,000'], [u'Payroll', u'Payroll', '11/28/2016', '3,959'], [u'Payroll', u'Payroll', '10/28/2016', '3,959'], [u'Payroll', u'Payroll', '09/28/2016', '3,600.01'], [u'Payroll', u'Payroll', '11/28/2016', '3,541.67'], [u'Payroll', u'Payroll', '10/28/2016', '3,541.67'], [u'Contractor', u'Payroll', '08/29/2016', '3,500'], [u'Contractor', u'Payroll', '05/26/2016', '3,500'], [u'Contractor', u'Payroll', '06/30/2016', '3,500'], [u'Payroll', u'Payroll', '10/28/2016', '3,500'], [u'Payroll', u'Payroll', '11/28/2016', '3,500'], [u'Contractor', u'Payroll', '05/03/2016', '3,500'], [u'Payroll', u'Payroll', '09/28/2016', '3,500'], [u'Contractor', u'Payroll', '06/20/2016', '3,150'], [u'Deposit', u'Other', '06/30/2016', '3,000'], [u'Other', u'Other', '10/05/2016', '3,000'], [u'Other', u'Other', '08/29/2016', '3,000'], [u'Deposit', u'Other', '03/02/2016', '3,000'], [u'Other', u'Other', '10/26/2016', '2,899.60'], [u'Other', u'Other', '10/11/2016', '2,751.51'], [u'Deposit', u'Other', '03/16/2016', '2,750'], [u'Deposit', u'Other', '01/13/2016', '2,750'], [u'Payroll', u'Payroll', '09/28/2016', '2,740.85'], [u'City Fitness', u'Payroll', '08/10/2016', '2,500'], [u'Deposit', u'Other', '12/08/2016', '2,500'], [u'Deposit', u'Other', '09/06/2016', '2,500'], [u'Deposit', u'Other', '08/15/2016', '2,500'], [u'Deposit', u'Other', '11/09/2016', '2,500'], [u'Deposit', u'Other', '09/09/2016', '2,500'], [u'Deposit', u'Other', '08/22/2016', '2,500'], [u'Deposit', u'Other', '10/20/2016', '2,500'], [u'Payroll', u'Payroll', '09/28/2016', '2,400'], [u'Contractor', u'Payroll', '08/30/2016', '2,250'], [u'Amazon', u'Office and Kitchen Supplies', '12/01/2016', '2,224.94'], [u'Payroll', u'Payroll', '10/28/2016', '2,000'], [u'Deposit', u'Other', '08/01/2016', '2,000'], [u'Payroll', u'Payroll', '11/28/2016', '2,000'], [u'Deposit', u'Other', '12/14/2016', '2,000'], [u'Deposit', u'Other', '11/15/2016', '2,000'], [u'Payroll', u'Payroll', '09/28/2016', '2,000'], [u'Deposit', u'Other', '06/07/2016', '1,987.50'], [u'Brendan Lowry', u'Payroll', '10/27/2016', '1,899.10'], [u'MyCityMoves', u'Other', '02/25/2016', '1,881.65'], [u'Sullivan Strategic', u'Professional Services', '04/18/2016', '1,750'], [u'TripAdvisor', u'Travel', '09/14/2016', '1,555.25'], [u'Solo Real Estate', u'Rent', '11/30/2016', '1,550'], [u'Solo Real Estate', u'Rent', '11/03/2016', '1,550'], [u'Deposit', u'Other', '05/18/2016', '1,500'], [u'Endeavor Athletic', u'Payroll', '04/15/2016', '1,500'], [u'Google', u'Technology', '05/23/2016', '1,500'], [u'Contractor', u'Technology', '07/05/2016', '1,500'], [u'Other', u'Other', '11/09/2016', '1,500'], [u'15FIVE', u'Technology', '12/05/2016', '1,440'], [u'Sullivan Strategic', u'Professional Services', '11/09/2016', '1,412.25'], [u'Solo Real Estate', u'Rent', '01/05/2016', '1,389'], [u'Solo Real Estate', u'Rent', '05/02/2016', '1,389'], [u'Solo Real Estate', u'Rent', '03/31/2016', '1,389'], [u'Solo Real Estate', u'Rent', '05/31/2016', '1,389'], [u'Solo Real Estate', u'Rent', '09/30/2016', '1,350'], [u'Solo Real Estate', u'Rent', '08/31/2016', '1,350'], [u'Solo Real Estate', u'Rent', '06/30/2016', '1,350'], [u'Solo Real Estate', u'Rent', '03/02/2016', '1,350'], [u'Solo Real Estate', u'Rent', '08/02/2016', '1,350'], [u'Solo Real Estate', u'Rent', '02/02/2016', '1,350'], [u'Other', u'Office and Kitchen Supplies', '10/27/2016', '1,344.61'], [u'Upwork', u'Payroll', '09/26/2016', '1,284.38'], [u'Other', u'Other', '10/11/2016', '1,200'], [u'Deposit', u'Other', '01/14/2016', '1,200'], [u'Other', u'Insurance', '12/05/2016', '1,155.95'], [u'Upwork', u'Payroll', '10/18/2016', '1,130.25'], [u'Pioneer Credit Recover', u'Professional Services', '08/23/2016', '1,123.42'], [u'Apple Store', u'Technology', '05/26/2016', '1,078.92'], [u'Staples', u'Office and Kitchen Supplies', '06/27/2016', '1,068.34'], [u'Contractor', u'Payroll', '05/27/2016', '1,050'], [u'Contractor', u'Technology', '03/11/2016', '1,000'], [u'Headstrong Foundation', u'Other', '07/01/2016', '1,000'], [u'FRANKFORD HALL', u'Other', '09/30/2016', '1,000'], [u'LMS Legal', u'Legal', '08/30/2016', '1,000'], [u'LMS Legal', u'Legal', '06/28/2016', '1,000'], [u'Deposit', u'Other', '03/28/2016', '937.50'], [u'Contractor', u'Payroll', '03/02/2016', '850'], [u'Other', u'Payroll', '11/17/2016', '850'], [u'Contractor', u'Payroll', '05/02/2016', '850'], [u'Contractor', u'Payroll', '02/01/2016', '850'], [u'Contractor', u'Payroll', '04/04/2016', '850'], [u'Independence Blue Cross', u'Insurance', '09/01/2016', '838.44'], [u'Independence Blue Cross', u'Insurance', '09/28/2016', '838.44'], [u'Contractor', u'Payroll', '07/29/2016', '750'], [u'Contractor', u'Payroll', '01/08/2016', '718'], [u'Hartford', u'Insurance', '09/13/2016', '712'], [u'Amazon', u'Office and Kitchen Supplies', '01/28/2016', '709'], [u'City Fitness', u'Payroll', '08/17/2016', '700'], [u'Other', u'Other', '11/03/2016', '669'], [u'Other', u'Payroll', '11/17/2016', '665'], [u'Upwork', u'Payroll', '08/05/2016', '642.19'], [u'Upwork', u'Payroll', '08/30/2016', '642.19'], [u'Upwork', u'Payroll', '08/01/2016', '642.19'], [u'Upwork', u'Payroll', '06/24/2016', '642.19'], [u'Home Care Assistance Blogs', u'Payroll', '12/09/2016', '630'], [u'Hartford', u'Insurance', '02/16/2016', '626.60'], [u'Media Temple', u'Technology', '05/31/2016', '600'], [u'Other', u'Professional Services', '11/14/2016', '600'], [u'Contractor', u'Payroll', '08/01/2016', '600'], [u'Elysian Fields', u'Professional Services', '01/21/2016', '600'], [u'Other', u'Other', '04/12/2016', '600'], [u'Elysian Fields', u'Professional Services', '03/08/2016', '600'], [u'Contractor', u'Payroll', '10/26/2016', '596'], [u'Other', u'Technology', '11/30/2016', '593.99'], [u'TUMI STORES', u'Other', '08/24/2016', '588.60'], [u'Upwork', u'Payroll', '11/30/2016', '565.13'], [u'Upwork', u'Payroll', '11/02/2016', '565.13'], [u'Upwork', u'Payroll', '11/21/2016', '565.13'], [u'Upwork', u'Other', '12/12/2016', '565.13'], [u'Airbnb', u'Travel', '04/20/2016', '560'], [u'Upwork', u'Payroll', '11/14/2016', '513.75'], [u'Upwork', u'Payroll', '11/16/2016', '513.75'], [u'Contractor', u'Payroll', '03/14/2016', '500'], [u'Other', u'Other', '12/06/2016', '500'], [u'Deposit', u'Other', '01/08/2016', '500'], [u'MyCityMoves', u'Payroll', '04/12/2016', '500'], [u'Contractor', u'Payroll', '05/02/2016', '500'], [u'Contractor', u'Payroll', '02/09/2016', '500'], [u'City Fitness', u'Payroll', '07/11/2016', '500'], [u'Other', u'Other', '12/09/2016', '500'], [u'Contractor', u'Payroll', '07/01/2016', '500'], [u'Contractor', u'Payroll', '07/01/2016', '500'], [u'Other', u'Other', '10/25/2015', '500'], [u'Contractor', u'Payroll', '09/23/2016', '500'], [u'MyCityMoves', u'Technology', '04/07/2016', '499'], [u'Other', u'Other', '04/14/2016', '450'], [u'Other', u'Other', '01/08/2016', '450'], [u'LivHome', u'Payroll', '02/03/2016', '420'], [u'LivHome', u'Payroll', '02/10/2016', '420'], [u'Hartford', u'Insurance', '07/13/2016', '419.40'], [u'Other', u'Other', '12/02/2016', '419.35'], [u'LivHome', u'Payroll', '05/02/2016', '400'], [u'Contractor', u'Payroll', '06/02/2016', '400'], [u'Contractor', u'Payroll', '05/18/2016', '400'], [u'LMS Legal', u'Legal', '08/19/2016', '400'], [u'Amazon', u'Office and Kitchen Supplies', '10/11/2016', '384.94'], [u'LivHome', u'Payroll', '01/11/2016', '380'], [u'LivHome', u'Payroll', '04/11/2016', '380'], [u'Adorama', u'Office and Kitchen Supplies', '09/26/2016', '361.95'], [u'Lomographic', u'Office and Kitchen Supplies', '09/11/2016', '360.70'], [u'Other', u'Payroll', '11/25/2016', '360'], [u'LivHome', u'Payroll', '03/07/2016', '360'], [u'Payroll', u'Tax', '09/28/2016', '357.59'], [u'Posner Artwork', u'Other', '11/07/2016', '350'], [u'Contractor', u'Payroll', '03/16/2016', '350'], [u'Retreat', u'Other', '06/16/2016', '350'], [u'Other', u'Other', '10/11/2016', '350'], [u'Wegmans', u'Office and Kitchen Supplies', '06/08/2016', '347.48'], [u'Other', u'Other', '10/28/2016', '340'], [u'Indohair', u'Other', '09/15/2016', '340'], [u'Payroll', u'Tax', '10/28/2016', '336.75'], [u'Payroll', u'Tax', '10/28/2016', '336.37'], [u'Payroll', u'Tax', '11/28/2016', '330.15'], [u'Amtrak', u'Travel', '06/13/2016', '330'], [u'Payroll', u'Tax', '10/28/2016', '328.08'], [u'Other', u'Other', '11/09/2015', '325'], [u'Other', u'Other', '11/25/2015', '325'], [u'Payroll', u'Tax', '11/28/2016', '315.34'], [u'Peco', u'Utilities', '09/29/2016', '307.68'], [u'Payroll', u'Tax', '11/28/2016', '305.69'], [u'MyCityMoves', u'Payroll', '04/28/2016', '300'], [u'Contractor', u'Payroll', '07/05/2016', '300'], [u'City Fitness', u'Other', '11/25/2016', '300'], [u'Contractor', u'Payroll', '07/25/2016', '300'], [u'Other', u'Other', '12/14/2016', '300'], [u'MyCityMoves', u'Payroll', '04/15/2016', '300'], [u'MyCityMoves', u'Payroll', '04/12/2016', '300'], [u'MyCityMoves', u'Payroll', '04/26/2016', '300'], [u'Contractor', u'Payroll', '03/17/2016', '300'], [u'MyCityMoves', u'Payroll', '04/07/2016', '300'], [u'MyCityMoves', u'Payroll', '04/08/2016', '300'], [u'MyCityMoves', u'Payroll', '04/15/2016', '300'], [u'Endeavor Athletic', u'Payroll', '07/05/2016', '300'], [u'MyCityMoves', u'Payroll', '04/07/2016', '300'], [u'MyCityMoves', u'Payroll', '04/07/2016', '300'], [u'1000Bulbs', u'Office and Kitchen Supplies', '02/01/2016', '299.36'], [u'Payroll', u'Tax', '09/28/2016', '298.32'], [u'Peco', u'Utilities', '09/01/2016', '290.62'], [u'Payroll', u'Tax', '10/28/2016', '290.04'], [u'Payroll', u'Tax', '09/28/2016', '290.04'], [u'Payroll', u'Tax', '10/28/2016', '283.21'], [u'City Fitness', u'Payroll', '03/03/2016', '281.25'], [u'Other', u'Other', '11/30/2016', '275'], [u'Bench Accounting', u'Professional Services', '08/08/2016', '270'], [u'Payroll', u'Tax', '11/28/2016', '269.81'], [u'Payroll', u'Tax', '11/28/2016', '268.67'], [u'Snap Kitchen', u'Food and Entertainment', '06/27/2016', '265.97'], [u'Comcast', u'Utilities', '02/08/2016', '261.70'], [u'United Airlines', u'Travel', '03/11/2016', '257.20'], [u'United Airlines', u'Travel', '03/11/2016', '257.20'], [u'Other', u'Office and Kitchen Supplies', '03/14/2016', '253.80'], [u'Contractor', u'Payroll', '06/01/2016', '250'], [u'Contractor', u'Payroll', '07/01/2016', '250'], [u'Sire Press', u'Other', '06/13/2016', '250'], [u'Other', u'Other', '10/24/2016', '250'], [u'Contractor', u'Technology', '03/02/2016', '246'], [u'Other', u'Other', '11/08/2016', '240'], [u'Contractor', u'Payroll', '05/04/2016', '240'], [u'Other', u'Other', '11/10/2016', '240'], [u'Target', u'Office and Kitchen Supplies', '03/15/2016', '235.66'], [u'Payroll', u'Tax', '09/28/2016', '227.13'], [u'Adorama', u'Office and Kitchen Supplies', '05/02/2016', '226.72'], [u'Peco', u'Utilities', '08/01/2016', '222.45'], [u'Other', u'Technology', '05/09/2016', '219.95'], [u'Adorama', u'Office and Kitchen Supplies', '05/03/2016', '213.15'], [u'Amazon', u'Office and Kitchen Supplies', '09/12/2016', '209.35'], [u'Instacart', u'Office and Kitchen Supplies', '05/09/2016', '206.27'], [u'AMERICAN AIR', u'Travel', '08/12/2016', '204.10'], [u'Instacart', u'Office and Kitchen Supplies', '09/26/2016', '203.56'], [u'Google', u'Technology', '10/03/2016', '200.33'], [u'Other', u'Technology', '05/20/2016', '200'], [u'Vanessa Plotkin', u'Other', '12/13/2016', '200'], [u'Contractor', u'Payroll', '06/28/2016', '200'], [u'Other', u'Other', '06/17/2016', '200'], [u'Other', u'Insurance', '11/04/2016', '200'], [u'Other', u'Other', '11/14/2016', '200'], [u'Contractor', u'Payroll', '08/04/2016', '200'], [u'Payroll', u'Tax', '09/28/2016', '198.88'], [u'Other', u'Utilities', '08/01/2016', '194.70'], [u'Ad Age', u'Other', '08/17/2016', '189'], [u'Google', u'Technology', '11/03/2016', '185.79'], [u'Upwork', u'Payroll', '03/02/2016', '183.33'], [u'AMERICAN AIR', u'Travel', '08/03/2016', '183.10'], [u'Wayfair', u'Office and Kitchen Supplies', '03/02/2016', '181.96'], [u'Other', u'Office and Kitchen Supplies', '03/07/2016', '181.35'], [u'Google', u'Technology', '12/02/2016', '180'], [u'Other', u'Office and Kitchen Supplies', '10/04/2016', '174.30'], [u'Coffee', u'Food and Entertainment', '11/14/2016', '174'], [u'Hotel', u'Travel', '07/05/2016', '174'], [u'Google', u'Technology', '09/06/2016', '173.86'], [u'Amazon', u'Office and Kitchen Supplies', '08/23/2016', '169'], [u'Other', u'Food and Entertainment', '06/13/2016', '168.82'], [u'Payroll', u'Tax', '09/28/2016', '165.74'], [u'Other', u'Technology', '06/20/2016', '161.99'], [u'INTUIT PYMT', u'Office and Kitchen Supplies', '06/27/2016', '161.75'], [u'Mulerhins', u'Food and Entertainment', '05/02/2016', '161.44'], [u'Google', u'Technology', '08/03/2016', '160'], [u'Google', u'Technology', '07/05/2016', '157.33'], [u'Retreat', u'Payroll', '10/11/2016', '156.69'], [u'Other', u'Food and Entertainment', '06/17/2016', '156.64'], [u'QDOBA', u'Food and Entertainment', '09/01/2016', '152.70'], [u'Endeavor Athletic', u'Other', '04/27/2016', '150'], [u'Payroll', u'Payroll', '11/07/2016', '150'], [u'Contractor', u'Payroll', '02/05/2016', '150'], [u'Instacart', u'Office and Kitchen Supplies', '10/26/2016', '150'], [u'City Fitness', u'Payroll', '04/18/2016', '150'], [u'Other', u'Technology', '01/22/2016', '148.99'], [u'Other', u'Technology', '05/02/2016', '148.37'], [u'Payroll', u'Tax', '11/28/2016', '146.18'], [u'Payroll', u'Tax', '10/28/2016', '146.17'], [u'Upwork', u'Payroll', '02/05/2016', '145'], [u'Peco', u'Utilities', '03/25/2016', '143.51'], [u'Amazon', u'Office and Kitchen Supplies', '11/14/2016', '143.35'], [u'Peco', u'Utilities', '10/25/2016', '140.85'], [u'IRS', u'Payroll', '01/14/2016', '140'], [u'Instacart', u'Office and Kitchen Supplies', '09/12/2016', '139.32'], [u'Other', u'Technology', '08/22/2016', '137.87'], [u'Amazon', u'Office and Kitchen Supplies', '06/20/2016', '136.74'], [u'Contractor', u'Payroll', '02/01/2016', '135'], [u'Bench Accounting', u'Professional Services', '08/01/2016', '135'], [u'Bench Accounting', u'Professional Services', '10/31/2016', '135'], [u'Bench Accounting', u'Professional Services', '11/30/2016', '135'], [u'Bench Accounting', u'Professional Services', '05/02/2016', '135'], [u'Bench Accounting', u'Professional Services', '09/30/2016', '135'], [u'Bench Accounting', u'Professional Services', '08/30/2016', '135'], [u'Hotel', u'Food and Entertainment', '04/25/2016', '135'], [u'Bench Accounting', u'Professional Services', '06/30/2016', '135'], [u'Bench Accounting', u'Professional Services', '05/31/2016', '135'], [u'Peco', u'Utilities', '06/30/2016', '134.12'], [u'Instacart', u'Office and Kitchen Supplies', '06/20/2016', '133.74'], [u'Aiga Philadelphia', u'Other', '03/21/2016', '130'], [u'Spirit Airlines', u'Travel', '08/03/2016', '128.09'], [u'Comcast', u'Utilities', '08/31/2016', '126.10'], [u'Comcast', u'Utilities', '03/31/2016', '126.10'], [u'Comcast', u'Utilities', '05/31/2016', '126.10'], [u'Comcast', u'Utilities', '03/02/2016', '126.10'], [u'Comcast', u'Utilities', '05/02/2016', '126.10'], [u'Comcast', u'Utilities', '07/01/2016', '126.10'], [u'Comcast', u'Utilities', '09/29/2016', '126.10'], [u'Comcast', u'Utilities', '08/01/2016', '126.10'], [u'Other', u'Travel', '10/31/2016', '125.99'], [u'Google', u'Technology', '06/06/2016', '125.45'], [u'Other', u'Other', '06/07/2016', '125'], [u'KENSINGTON QUARTERS', u'Food and Entertainment', '10/24/2016', '124.84'], [u'Other', u'Technology', '12/01/2016', '124.50'], [u'Wine and Spirts', u'Food and Entertainment', '10/11/2016', '123.97'], [u'Instacart', u'Office and Kitchen Supplies', '08/01/2016', '123.47'], [u'LivHome', u'Payroll', '11/25/2016', '120'], [u'Amazon', u'Office and Kitchen Supplies', '05/13/2016', '119.35'], [u'Instacart', u'Office and Kitchen Supplies', '07/05/2016', '117.83'], [u'Martha', u'Food and Entertainment', '05/16/2016', '115'], [u'Coffee', u'Food and Entertainment', '06/20/2016', '115'], [u'Amazon', u'Office and Kitchen Supplies', '10/27/2016', '114.98'], [u'Instacart', u'Office and Kitchen Supplies', '08/29/2016', '113.65'], [u'Mulerhins', u'Food and Entertainment', '10/24/2016', '112.42'], [u'Other', u'Office and Kitchen Supplies', '08/23/2016', '112.32'], [u'KENSINGTON QUARTERS', u'Food and Entertainment', '03/28/2016', '112.28'], [u'Uber', u'Travel', '11/21/2016', '111.37'], [u'Amtrak', u'Travel', '11/29/2016', '110'], [u'Paper Source', u'Office and Kitchen Supplies', '12/09/2016', '109.02'], [u'LE PETIT FOUR WEST', u'Food and Entertainment', '04/25/2016', '108.74'], [u'Amtrak', u'Travel', '11/07/2016', '108'], [u'Amtrak', u'Travel', '11/16/2016', '108'], [u'Amtrak', u'Travel', '11/21/2016', '108'], [u'FISHTOWN SOCIAL', u'Food and Entertainment', '03/18/2016', '107.72'], [u'Peco', u'Utilities', '05/18/2016', '107.56'], [u'SAMPAN DOUBLE KNOT', u'Food and Entertainment', '09/12/2016', '106.52'], [u'1000Bulbs', u'Office and Kitchen Supplies', '02/02/2016', '106.24'], [u'Mulerhins', u'Food and Entertainment', '05/02/2016', '105.50'], [u'IRS', u'Payroll', '01/14/2016', '105'], [u'Other', u'Food and Entertainment', '03/14/2016', '105'], [u'Waterless Works', u'Payroll', '02/25/2016', '105'], [u'RYBREW PHILADELPHIA', u'Food and Entertainment', '08/15/2016', '104.71'], [u'Blick Art', u'Other', '01/25/2016', '102.83'], [u'Mulerhins', u'Food and Entertainment', '08/29/2016', '102.60'], [u'Mulerhins', u'Food and Entertainment', '07/21/2016', '102.08'], [u'Mulerhins', u'Food and Entertainment', '05/12/2016', '101.72'], [u'Amazon', u'Office and Kitchen Supplies', '05/12/2016', '101.54'], [u'Uber', u'Travel', '11/15/2016', '101.32'], [u'Handy Charges', u'Utilities', '02/26/2016', '101'], [u'Handy Charges', u'Utilities', '01/05/2016', '101'], [u'Handy Charges', u'Utilities', '01/29/2016', '101'], [u'Handy Charges', u'Utilities', '06/20/2016', '101'], [u'Handy Charges', u'Utilities', '03/28/2016', '101'], [u'Handy Charges', u'Utilities', '05/24/2016', '101'], [u'TRYCAVIAR', u'Food and Entertainment', '08/08/2016', '100.86'], [u'Other', u'Other', '12/07/2016', '100'], [u'Contractor', u'Payroll', '07/05/2016', '100'], [u'Dollar Photo Club', u'Other', '01/27/2016', '100'], [u'Contractor', u'Payroll', '05/31/2016', '100'], [u'Contractor', u'Payroll', '07/01/2016', '100'], [u'PeopleForBikes', u'Other', '05/26/2016', '100'], [u'Kyle Cuffie Scott', u'Other', '06/20/2016', '100'], [u'Other', u'Other', '11/23/2016', '100'], [u'Sotavento', u'Food and Entertainment', '07/11/2016', '99.48'], [u'TRYCAVIAR', u'Food and Entertainment', '08/18/2016', '99.01'], [u'Other', u'Utilities', '11/07/2016', '99'], [u'Amazon', u'Office and Kitchen Supplies', '09/28/2016', '98.95'], [u'Other', u'Other', '11/16/2016', '97.26'], [u'Other', u'Other', '11/21/2016', '97.10'], [u'Cherry Hill Win', u'Food and Entertainment', '06/08/2016', '96.26'], [u'Amazon', u'Office and Kitchen Supplies', '12/05/2016', '93.67'], [u'Other', u'Utilities', '05/27/2016', '92.95'], [u'LA FITORA', u'Food and Entertainment', '07/11/2016', '92.83'], [u'Mulerhins', u'Food and Entertainment', '06/30/2016', '90.40'], [u'Other', u'Utilities', '12/05/2016', '90'], [u'Amtrak', u'Travel', '12/12/2016', '90'], [u'Other', u'Travel', '10/31/2016', '90'], [u'Amazon', u'Office and Kitchen Supplies', '11/07/2016', '89.99'], [u'Wine and Spirts', u'Food and Entertainment', '03/07/2016', '89.60'], [u'Byblos', u'Food and Entertainment', '09/12/2016', '89.42'], [u'Other', u'Office and Kitchen Supplies', '05/06/2016', '88.52'], [u'Amtrak', u'Travel', '08/08/2016', '88'], [u'Mulerhins', u'Food and Entertainment', '05/16/2016', '87.90'], [u'GRUBHUB', u'Food and Entertainment', '02/08/2016', '87.82'], [u'Other', u'Office and Kitchen Supplies', '08/29/2016', '87.30'], [u'Other', u'Utilities', '09/12/2016', '87'], [u'Handy Charges', u'Utilities', '08/15/2016', '87'], [u'Other', u'Utilities', '10/11/2016', '87'], [u'Handy Charges', u'Utilities', '07/18/2016', '87'], [u'Handy Charges', u'Utilities', '04/25/2016', '87'], [u'Instacart', u'Office and Kitchen Supplies', '05/17/2016', '86.46'], [u'Amazon', u'Office and Kitchen Supplies', '10/14/2016', '85.90'], [u'Other', u'Office and Kitchen Supplies', '02/22/2016', '85.32'], [u'Other', u'Office and Kitchen Supplies', '03/09/2016', '85.32'], [u'INTUIT PYMT', u'Office and Kitchen Supplies', '09/06/2016', '85.25'], [u'INTUIT PYMT', u'Office and Kitchen Supplies', '10/20/2016', '85.25'], [u'INTUIT PYMT', u'Other', '11/09/2016', '85.25'], [u'INTUIT PYMT', u'Office and Kitchen Supplies', '08/15/2016', '85.25'], [u'INTUIT PYMT', u'Other', '12/08/2016', '85.25'], [u'INTUIT PYMT', u'Office and Kitchen Supplies', '08/22/2016', '85.25'], [u'INTUIT PYMT', u'Office and Kitchen Supplies', '09/09/2016', '85.25'], [u'Mulerhins', u'Food and Entertainment', '05/09/2016', '85.12'], [u'Mulerhins', u'Food and Entertainment', '08/10/2016', '84.64'], [u'Amazon', u'Office and Kitchen Supplies', '02/03/2016', '84.42'], [u'Amazon', u'Office and Kitchen Supplies', '11/14/2016', '84.05'], [u'RED OWL AND STRATUS', u'Food and Entertainment', '04/18/2016', '81.02'], [u'Wine and Spirts', u'Food and Entertainment', '08/26/2016', '80.98'], [u'LivHome', u'Payroll', '07/27/2016', '80'], [u'Contractor', u'Payroll', '08/03/2016', '80'], [u'LivHome', u'Payroll', '09/02/2016', '80'], [u'LivHome', u'Payroll', '05/31/2016', '80'], [u'Contractor', u'Payroll', '09/06/2016', '80'], [u'Contractor', u'Payroll', '06/02/2016', '80'], [u'City Fitness', u'Other', '09/08/2015', '80'], [u'LivHome', u'Payroll', '07/01/2016', '80'], [u'City Fitness', u'Other', '09/08/2015', '80'], [u'Amazon', u'Office and Kitchen Supplies', '08/22/2016', '79.92'], [u'Mulerhins', u'Food and Entertainment', '06/13/2016', '79.38'], [u'BIGSTOCKPHOTO', u'Other', '06/15/2016', '79'], [u'BIGSTOCKPHOTO', u'Other', '07/15/2016', '79'], [u'BIGSTOCKPHOTO', u'Other', '04/19/2016', '79'], [u'BIGSTOCKPHOTO', u'Other', '12/12/2016', '79'], [u'BIGSTOCKPHOTO', u'Other', '09/13/2016', '79'], [u'BIGSTOCKPHOTO', u'Other', '11/14/2016', '79'], [u'Other', u'Food and Entertainment', '04/25/2016', '79'], [u'BIGSTOCKPHOTO', u'Other', '10/13/2016', '79'], [u'BIGSTOCKPHOTO', u'Other', '05/16/2016', '79'], [u'BIGSTOCKPHOTO', u'Other', '08/15/2016', '79'], [u'Other', u'Food and Entertainment', '12/01/2016', '78.92'], [u'Wine and Spirts', u'Food and Entertainment', '08/29/2016', '78.81'], [u'Target', u'Office and Kitchen Supplies', '06/27/2016', '77.26'], [u'Amazon', u'Office and Kitchen Supplies', '05/12/2016', '76.97'], [u'Martha', u'Food and Entertainment', '01/11/2016', '76.50'], [u'Kinfolk', u'Food and Entertainment', '05/10/2016', '76'], [u'Taproom', u'Food and Entertainment', '08/24/2016', '75.86'], [u'Instacart', u'Office and Kitchen Supplies', '08/01/2016', '75.61'], [u'Adobe Systems', u'Other', '12/07/2016', '75.59'], [u'Retreat', u'Travel', '10/19/2016', '75.56'], [u'Mulerhins', u'Food and Entertainment', '08/17/2016', '75.50'], [u'Mulerhins', u'Food and Entertainment', '06/17/2016', '75.04'], [u'Contractor', u'Payroll', '03/30/2016', '75'], [u'Upwork', u'Payroll', '03/17/2016', '75'], [u'City Fitness', u'Payroll', '09/29/2016', '75'], [u'City Fitness', u'Payroll', '08/17/2016', '75'], [u'Contractor', u'Payroll', '05/27/2016', '75'], [u'Contractor', u'Payroll', '01/29/2016', '75'], [u'Adobe Systems', u'Technology', '03/06/2016', '74.19'], [u'Adobe Systems', u'Technology', '10/06/2016', '74.19'], [u'Adobe Systems', u'Technology', '05/06/2016', '74.19'], [u'Adobe Systems', u'Technology', '02/06/2016', '74.19'], [u'Adobe Systems', u'Technology', '06/06/2016', '74.19'], [u'Adobe Systems', u'Technology', '04/06/2016', '74.19'], [u'Adobe Systems', u'Technology', '07/06/2016', '74.19'], [u'Adobe Systems', u'Technology', '09/06/2016', '74.19'], [u'Adobe Systems', u'Technology', '08/06/2016', '74.19'], [u'Adobe Systems', u'Technology', '11/07/2016', '74.19'], [u'KHYBER PASS PUB', u'Food and Entertainment', '02/16/2016', '74.06'], [u'TRYCAVIAR', u'Food and Entertainment', '05/16/2016', '73.71'], [u'Amazon', u'Office and Kitchen Supplies', '05/24/2016', '72.97'], [u'Coffee', u'Food and Entertainment', '11/14/2016', '72.64'], [u'Amazon', u'Office and Kitchen Supplies', '11/29/2016', '72.43'], [u'Blick Art', u'Payroll', '05/20/2016', '72.30'], [u'Amtrak', u'Travel', '11/08/2016', '72'], [u'Amtrak', u'Travel', '11/16/2016', '72'], [u'Amtrak', u'Travel', '10/04/2016', '72'], [u'Instagress', u'Other', '11/09/2016', '71.99'], [u'Instagress', u'Office and Kitchen Supplies', '11/14/2016', '71.99'], [u'Instacart', u'Office and Kitchen Supplies', '08/17/2016', '71.73'], [u'Coffee', u'Food and Entertainment', '10/03/2016', '71.72'], [u'Bell Cab Management', u'Travel', '04/22/2016', '71.70'], [u'Peco', u'Utilities', '01/19/2016', '70.84'], [u'Martha', u'Food and Entertainment', '08/29/2016', '70'], [u'Mulerhins', u'Food and Entertainment', '04/13/2016', '70'], [u'Modell', u'Other', '04/20/2016', '69.99'], [u'Amazon', u'Office and Kitchen Supplies', '05/25/2016', '69.84'], [u'Amazon', u'Office and Kitchen Supplies', '05/25/2016', '69.84'], [u'Other', u'Office and Kitchen Supplies', '05/16/2016', '69.25'], [u'Other', u'Utilities', '05/02/2016', '69.12'], [u'Instacart', u'Office and Kitchen Supplies', '03/14/2016', '68.71'], [u'Johnny Brenda', u'Food and Entertainment', '04/29/2016', '68.70'], [u'Global Beer', u'Food and Entertainment', '09/26/2016', '68.58'], [u'Amazon', u'Office and Kitchen Supplies', '11/03/2016', '68.45'], [u'fiverr', u'Payroll', '01/14/2016', '68.25'], [u'Instacart', u'Office and Kitchen Supplies', '03/03/2016', '67.95'], [u'Other', u'Food and Entertainment', '09/19/2016', '66.76'], [u'CEDAR POINT BAR', u'Food and Entertainment', '06/15/2016', '66.16'], [u'Wine and Spirts', u'Food and Entertainment', '09/26/2016', '65.85'], [u'Uber', u'Travel', '04/22/2016', '64.52'], [u'Other', u'Food and Entertainment', '04/25/2016', '64.50'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '08/01/2016', '64.23'], [u'Google', u'Technology', '05/03/2016', '63.99'], [u'COSI', u'Food and Entertainment', '08/24/2016', '63.01'], [u'Amazon', u'Office and Kitchen Supplies', '11/22/2016', '62.78'], [u'Instacart', u'Office and Kitchen Supplies', '02/01/2016', '62.68'], [u'Other', u'Utilities', '01/19/2016', '62.63'], [u'Other', u'Utilities', '10/25/2016', '62.35'], [u'Taproom', u'Food and Entertainment', '01/25/2016', '62.08'], [u'Amazon', u'Office and Kitchen Supplies', '05/25/2016', '61.87'], [u'Acme', u'Office and Kitchen Supplies', '05/20/2016', '61.70'], [u'Other', u'Food and Entertainment', '04/22/2016', '60.87'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '09/01/2016', '60.82'], [u'Marriott', u'Travel', '09/22/2016', '60.63'], [u'Coffee', u'Food and Entertainment', '07/27/2016', '60.08'], [u'Other', u'Food and Entertainment', '04/25/2016', '60'], [u'Google', u'Technology', '03/04/2016', '60'], [u'Mulerhins', u'Food and Entertainment', '05/27/2016', '60'], [u'Google', u'Technology', '04/04/2016', '60'], [u'Amazon', u'Office and Kitchen Supplies', '05/12/2016', '59.99'], [u'GRAN CAFFE', u'Food and Entertainment', '07/29/2016', '59.61'], [u'Amazon', u'Office and Kitchen Supplies', '03/18/2016', '59.47'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '03/21/2016', '59.35'], [u'Instacart', u'Office and Kitchen Supplies', '03/21/2016', '59.20'], [u'Amazon', u'Office and Kitchen Supplies', '11/23/2016', '58.63'], [u'Snap Kitchen', u'Food and Entertainment', '08/26/2016', '57.69'], [u'Peco', u'Utilities', '11/30/2016', '57.60'], [u'THE COUNTER', u'Food and Entertainment', '04/25/2016', '57.50'], [u'Peco', u'Utilities', '06/01/2016', '57.17'], [u'Uber', u'Travel', '12/12/2016', '56.72'], [u'Other', u'Utilities', '06/16/2016', '56.58'], [u'Coffee', u'Food and Entertainment', '12/12/2016', '56.49'], [u'FEDEXOFFICE', u'Other', '04/14/2016', '56.48'], [u'Mulerhins', u'Food and Entertainment', '05/09/2016', '56.40'], [u'Other', u'Food and Entertainment', '10/26/2016', '56.14'], [u'Google', u'Technology', '02/02/2016', '56.12'], [u'Other', u'Travel', '07/11/2016', '55.35'], [u'Amtrak', u'Travel', '10/03/2016', '55'], [u'Amtrak', u'Travel', '08/01/2016', '55'], [u'Spirit Airlines', u'Travel', '09/08/2016', '55'], [u'Amtrak', u'Travel', '07/25/2016', '55'], [u'Contractor', u'Payroll', '08/31/2016', '55'], [u'Amtrak', u'Travel', '12/13/2016', '55'], [u'Amtrak', u'Travel', '09/23/2016', '55'], [u'Amtrak', u'Travel', '12/15/2016', '55'], [u'Coffee', u'Food and Entertainment', '05/06/2016', '54.71'], [u'Uber', u'Travel', '09/02/2016', '54.70'], [u'PPA', u'Food and Entertainment', '05/16/2016', '54.65'], [u'MOOD INDIAN', u'Food and Entertainment', '04/04/2016', '54.33'], [u'Bourbon', u'Food and Entertainment', '04/12/2016', '54.28'], [u'Other', u'Technology', '08/26/2016', '53.99'], [u'Other', u'Technology', '08/26/2016', '53.99'], [u'Wine and Spirts', u'Food and Entertainment', '01/27/2016', '53.98'], [u'Mulerhins', u'Food and Entertainment', '10/17/2016', '53.72'], [u'Uber', u'Travel', '11/14/2016', '53.58'], [u'KENSINGTON QUARTERS', u'Food and Entertainment', '08/19/2016', '53.44'], [u'Retreat', u'Office and Kitchen Supplies', '10/14/2016', '53.34'], [u'Lyft', u'Travel', '04/25/2016', '53.11'], [u'Instacart', u'Office and Kitchen Supplies', '06/23/2016', '53.08'], [u'TRYCAVIAR', u'Food and Entertainment', '05/18/2016', '53.02'], [u'Other', u'Food and Entertainment', '10/26/2016', '52.44'], [u'POKE BOWL', u'Food and Entertainment', '09/08/2016', '52.16'], [u'Amazon', u'Office and Kitchen Supplies', '05/12/2016', '51.06'], [u'French Toast', u'Payroll', '07/22/2016', '50.75'], [u'Wine and Spirts', u'Food and Entertainment', '03/28/2016', '50.74'], [u'Other', u'Technology', '11/28/2016', '50.05'], [u'Other', u'Food and Entertainment', '04/22/2016', '50'], [u'Other', u'Food and Entertainment', '03/22/2016', '50'], [u'RED OWL AND STRATUS', u'Food and Entertainment', '05/05/2016', '50'], [u'City Fitness', u'Other', '04/25/2016', '49.99'], [u'City Fitness', u'Other', '11/25/2016', '49.99'], [u'City Fitness', u'Other', '05/24/2016', '49.99'], [u'City Fitness', u'Other', '09/26/2016', '49.99'], [u'City Fitness', u'Other', '02/24/2016', '49.99'], [u'City Fitness', u'Other', '08/24/2016', '49.99'], [u'City Fitness', u'Other', '10/24/2016', '49.99'], [u'City Fitness', u'Other', '01/25/2016', '49.99'], [u'City Fitness', u'Other', '06/24/2016', '49.99'], [u'City Fitness', u'Other', '03/24/2016', '49.99'], [u'City Fitness', u'Other', '07/25/2016', '49.99'], [u'Acme', u'Office and Kitchen Supplies', '06/28/2016', '49.96'], [u'PHILLYS STYLE BAGELS', u'Food and Entertainment', '06/28/2016', '49.49'], [u'Coffee', u'Food and Entertainment', '10/11/2016', '49.45'], [u'Mulerhins', u'Food and Entertainment', '08/15/2016', '49.07'], [u'United Airlines', u'Travel', '04/26/2016', '49'], [u'Uber', u'Travel', '12/12/2016', '48.63'], [u'Amazon', u'Office and Kitchen Supplies', '06/02/2016', '48.42'], [u'Other', u'Utilities', '06/20/2016', '47.95'], [u'Adorama', u'Office and Kitchen Supplies', '08/15/2016', '47.74'], [u'Johnny Brenda', u'Food and Entertainment', '03/11/2016', '47.60'], [u'Wine and Spirts', u'Food and Entertainment', '05/24/2016', '47.50'], [u'Wine and Spirts', u'Food and Entertainment', '05/09/2016', '47.50'], [u'Acme', u'Office and Kitchen Supplies', '08/29/2016', '47.48'], [u'Other', u'Other', '11/25/2016', '47.06'], [u'Independence Beer', u'Food and Entertainment', '05/23/2016', '46.80'], [u'Mulerhins', u'Food and Entertainment', '05/13/2016', '46.80'], [u'Lowes', u'Office and Kitchen Supplies', '08/23/2016', '46.42'], [u'TRYCAVIAR', u'Food and Entertainment', '05/16/2016', '46.05'], [u'Other', u'Food and Entertainment', '03/22/2016', '46.05'], [u'Uber', u'Travel', '07/25/2016', '46'], [u'Lyft', u'Travel', '04/22/2016', '45.92'], [u'Instacart', u'Office and Kitchen Supplies', '04/08/2016', '45.89'], [u'Uber', u'Travel', '11/18/2016', '45.46'], [u'Other', u'Other', '11/23/2016', '45.46'], [u'Instacart', u'Office and Kitchen Supplies', '10/03/2016', '45.37'], [u'Wine and Spirts', u'Food and Entertainment', '09/16/2016', '45.33'], [u'Blick Art', u'Other', '10/11/2016', '45.20'], [u'Amazon', u'Office and Kitchen Supplies', '11/14/2016', '45.17'], [u'Uber', u'Travel', '12/12/2016', '45.10'], [u'FISHTOWN SOCIAL', u'Food and Entertainment', '09/23/2016', '44.88'], [u'Uber', u'Travel', '09/21/2016', '44.85'], [u'PARC', u'Food and Entertainment', '08/29/2016', '44.78'], [u'Other', u'Food and Entertainment', '04/25/2016', '44.66'], [u'Uber', u'Travel', '07/05/2016', '44.57'], [u'TRYCAVIAR', u'Food and Entertainment', '06/20/2016', '44.20'], [u'THE COUNTER', u'Food and Entertainment', '09/08/2016', '42.97'], [u'Lyft', u'Travel', '07/13/2016', '42.90'], [u'Mulerhins', u'Food and Entertainment', '04/11/2016', '42.88'], [u'Coffee', u'Food and Entertainment', '06/27/2016', '42.55'], [u'Other', u'Other', '11/14/2016', '42.45'], [u'TRYCAVIAR', u'Food and Entertainment', '05/23/2016', '42.27'], [u'Other', u'Office and Kitchen Supplies', '04/28/2016', '42.12'], [u'Other', u'Food and Entertainment', '01/04/2016', '42.07'], [u'Gladstones', u'Food and Entertainment', '09/08/2016', '42.05'], [u'Instacart', u'Office and Kitchen Supplies', '03/07/2016', '42.01'], [u'Uber', u'Travel', '11/07/2016', '41.69'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '02/08/2016', '41.44'], [u'Amazon', u'Office and Kitchen Supplies', '06/01/2016', '41.33'], [u'Instacart', u'Office and Kitchen Supplies', '01/12/2016', '41.13'], [u'Other', u'Office and Kitchen Supplies', '05/06/2016', '41.02'], [u'Coffee', u'Food and Entertainment', '06/07/2016', '41'], [u'Target', u'Office and Kitchen Supplies', '12/08/2016', '40.85'], [u'Other', u'Utilities', '09/01/2016', '40.68'], [u'Barnesnoble', u'Other', '08/26/2016', '40.58'], [u'Instagress', u'Other', '09/12/2016', '40.49'], [u'Instagress', u'Other', '06/29/2016', '40.49'], [u'Instagress', u'Other', '04/11/2016', '40.49'], [u'Instagress', u'Other', '06/06/2016', '40.49'], [u'Instagress', u'Other', '08/15/2016', '40.49'], [u'Instagress', u'Other', '03/04/2016', '40.49'], [u'Uber', u'Travel', '11/21/2016', '40.09'], [u'LivHome', u'Payroll', '09/30/2016', '40'], [u'Other', u'Food and Entertainment', '04/25/2016', '40'], [u'City Fitness', u'Other', '09/08/2015', '40'], [u'Contractor', u'Payroll', '07/05/2016', '40'], [u'Other', u'Food and Entertainment', '04/27/2016', '40'], [u'Communication Arts', u'Other', '08/22/2016', '40'], [u'City Fitness', u'Other', '09/17/2015', '40'], [u'TRYCAVIAR', u'Food and Entertainment', '12/05/2016', '39.75'], [u'Global Beer', u'Food and Entertainment', '08/29/2016', '39.42'], [u'Amazon', u'Office and Kitchen Supplies', '11/14/2016', '39.42'], [u'Other', u'Travel', '10/11/2016', '39.17'], [u'Other', u'Utilities', '08/02/2016', '39.08'], [u'Acme', u'Office and Kitchen Supplies', '03/17/2016', '39.01'], [u'City Fitness', u'Other', '03/23/2016', '39'], [u'Acme', u'Office and Kitchen Supplies', '06/06/2016', '38.68'], [u'Amazon', u'Office and Kitchen Supplies', '12/02/2016', '38.54'], [u'Lyft', u'Travel', '05/02/2016', '38.50'], [u'TRYCAVIAR', u'Food and Entertainment', '05/24/2016', '38.49'], [u'Coffee', u'Food and Entertainment', '07/01/2016', '38.48'], [u'Uber', u'Travel', '08/03/2016', '38.40'], [u'Coffee', u'Food and Entertainment', '04/25/2016', '38.14'], [u'Amazon', u'Office and Kitchen Supplies', '10/07/2016', '38.12'], [u'Acme', u'Office and Kitchen Supplies', '03/16/2016', '38.03'], [u'Mulerhins', u'Food and Entertainment', '10/21/2016', '38'], [u'Other', u'Food and Entertainment', '03/14/2016', '37.86'], [u'Instacart', u'Office and Kitchen Supplies', '03/28/2016', '37.80'], [u'TRYCAVIAR', u'Food and Entertainment', '11/09/2016', '37.23'], [u'Amazon', u'Office and Kitchen Supplies', '09/12/2016', '36.33'], [u'Global Beer', u'Food and Entertainment', '05/09/2016', '36.18'], [u'Global Beer', u'Food and Entertainment', '05/31/2016', '36.18'], [u'Contractor', u'Payroll', '02/08/2016', '36.18'], [u'Other', u'Food and Entertainment', '04/25/2016', '36'], [u'TRYCAVIAR', u'Food and Entertainment', '08/01/2016', '35.97'], [u'Other', u'Office and Kitchen Supplies', '03/28/2016', '35.63'], [u'Other', u'Food and Entertainment', '08/01/2016', '35.63'], [u'Other', u'Food and Entertainment', '06/28/2016', '35.63'], [u'Other', u'Food and Entertainment', '04/18/2016', '35.14'], [u'Craigslist', u'Other', '11/14/2016', '35'], [u'Craigslist', u'Other', '09/01/2016', '35'], [u'Craigslist', u'Other', '07/29/2016', '35'], [u'Craigslist', u'Other', '09/01/2016', '35'], [u'Craigslist', u'Other', '03/23/2016', '35'], [u'Craigslist', u'Other', '04/18/2016', '35'], [u'Craigslist', u'Other', '07/29/2016', '35'], [u'Craigslist', u'Other', '10/07/2016', '35'], [u'Craigslist', u'Other', '04/18/2016', '35'], [u'Craigslist', u'Other', '03/16/2016', '35'], [u'Craigslist', u'Other', '03/23/2016', '35'], [u'Craigslist', u'Other', '10/07/2016', '35'], [u'Craigslist', u'Other', '05/27/2016', '35'], [u'Craigslist', u'Other', '09/02/2016', '35'], [u'Craigslist', u'Other', '09/28/2016', '35'], [u'Craigslist', u'Other', '10/07/2016', '35'], [u'Craigslist', u'Other', '11/14/2016', '35'], [u'Other', u'Technology', '04/15/2016', '34.99'], [u'TRYCAVIAR', u'Food and Entertainment', '06/06/2016', '34.71'], [u'Other', u'Food and Entertainment', '10/11/2016', '34.35'], [u'MOOD INDIAN', u'Food and Entertainment', '04/11/2016', '34.34'], [u'Coffee', u'Food and Entertainment', '10/25/2016', '34.21'], [u'Other', u'Office and Kitchen Supplies', '05/19/2016', '33.98'], [u'Other', u'Other', '01/19/2016', '33.88'], [u'Uber', u'Travel', '08/08/2016', '33.63'], [u'Whole Foods', u'Office and Kitchen Supplies', '12/09/2016', '33.43'], [u'Barnesnoble', u'Other', '08/22/2016', '33.43'], [u'Uber', u'Travel', '05/04/2016', '33.37'], [u'Coffee', u'Food and Entertainment', '09/07/2016', '33.25'], [u'Coffee', u'Food and Entertainment', '05/12/2016', '33'], [u'TRYCAVIAR', u'Food and Entertainment', '05/25/2016', '32.71'], [u'Other', u'Technology', '04/11/2016', '32.35'], [u'Uber', u'Travel', '11/30/2016', '32.32'], [u'Other', u'Other', '11/14/2016', '32.10'], [u'Other', u'Utilities', '08/01/2016', '32.07'], [u'Other', u'Food and Entertainment', '06/20/2016', '32.04'], [u'Google', u'Technology', '01/04/2016', '31.92'], [u'IRS', u'Professional Services', '01/22/2016', '31.87'], [u'Johnny Brenda', u'Food and Entertainment', '03/10/2016', '31.78'], [u'Other', u'Other', '11/30/2016', '31.67'], [u'Bourbon', u'Food and Entertainment', '08/30/2016', '31.55'], [u'TRYCAVIAR', u'Food and Entertainment', '06/13/2016', '31.45'], [u'Apple Store', u'Technology', '06/17/2016', '31.32'], [u'Uber', u'Travel', '09/26/2016', '31.21'], [u'Other', u'Office and Kitchen Supplies', '04/30/2016', '31.05'], [u'PHILLYS STYLE BAGELS', u'Food and Entertainment', '06/20/2016', '31'], [u'Coffee', u'Food and Entertainment', '08/01/2016', '30.98'], [u'Coffee', u'Food and Entertainment', '09/26/2016', '30.92'], [u'Snap Kitchen', u'Food and Entertainment', '08/22/2016', '30.82'], [u'Bourbon', u'Food and Entertainment', '03/14/2016', '30.72'], [u'Uber', u'Travel', '11/07/2016', '30.71'], [u'Uber', u'Travel', '08/29/2016', '30.54'], [u'Coffee', u'Food and Entertainment', '01/29/2016', '30.48'], [u'Uber', u'Travel', '09/20/2016', '30.40'], [u'Yummy Foods', u'Food and Entertainment', '04/25/2016', '30.13'], [u'Instacart', u'Office and Kitchen Supplies', '12/02/2016', '30.09'], [u'Other', u'Food and Entertainment', '04/25/2016', '30'], [u'PHILLYS STYLE BAGELS', u'Food and Entertainment', '05/16/2016', '30'], [u'Other', u'Travel', '11/14/2016', '30'], [u'Amazon', u'Office and Kitchen Supplies', '06/02/2016', '30'], [u'Sire Press', u'Other', '06/14/2016', '30'], [u'Other', u'Food and Entertainment', '04/25/2016', '30'], [u'Other', u'Other', '01/20/2016', '29.95'], [u'KENSINGTON QUARTERS', u'Food and Entertainment', '08/16/2016', '29.93'], [u'Other', u'Food and Entertainment', '04/25/2016', '29.71'], [u'Target', u'Office and Kitchen Supplies', '01/12/2016', '29.70'], [u'Amazon', u'Office and Kitchen Supplies', '12/12/2016', '29.67'], [u'Uber', u'Travel', '03/07/2016', '29.52'], [u'Other', u'Food and Entertainment', '04/14/2016', '29.51'], [u'Other', u'Food and Entertainment', '07/15/2016', '29.49'], [u'Rocketgenius', u'Technology', '02/01/2016', '29.25'], [u'Other', u'Food and Entertainment', '03/31/2016', '29.16'], [u'Coffee', u'Food and Entertainment', '08/18/2016', '29.09'], [u'Amazon', u'Office and Kitchen Supplies', '05/02/2016', '29'], [u'Blick Art', u'Other', '12/12/2016', '28.98'], [u'Wayfair', u'Office and Kitchen Supplies', '03/02/2016', '28.98'], [u'Amazon', u'Office and Kitchen Supplies', '09/13/2016', '28.98'], [u'Uber', u'Travel', '02/08/2016', '28.95'], [u'Taxi', u'Travel', '07/05/2016', '28.95'], [u'Uber', u'Travel', '04/26/2016', '28.95'], [u'GRUBHUB', u'Food and Entertainment', '01/19/2016', '28.73'], [u'Other', u'Food and Entertainment', '03/30/2016', '28.67'], [u'TRYCAVIAR', u'Food and Entertainment', '05/17/2016', '28.67'], [u'Coffee', u'Food and Entertainment', '10/07/2016', '28.46'], [u'Other', u'Office and Kitchen Supplies', '05/23/2016', '28.41'], [u'Other', u'Food and Entertainment', '09/06/2016', '28.24'], [u'Coffee', u'Food and Entertainment', '09/28/2016', '28.18'], [u'Other', u'Food and Entertainment', '01/04/2016', '28.04'], [u'Other', u'Other', '05/02/2016', '28.03'], [u'Parking', u'Travel', '04/18/2016', '28'], [u'COSI', u'Food and Entertainment', '02/09/2016', '28'], [u'Parking', u'Travel', '04/18/2016', '28'], [u'Other', u'Food and Entertainment', '04/27/2016', '28'], [u'Amazon', u'Office and Kitchen Supplies', '05/02/2016', '27.90'], [u'Acme', u'Office and Kitchen Supplies', '04/05/2016', '27.82'], [u'Other', u'Office and Kitchen Supplies', '05/09/2016', '27.79'], [u'Uber', u'Travel', '05/04/2016', '27.70'], [u'Uber', u'Travel', '08/29/2016', '27.68'], [u'TRYCAVIAR', u'Food and Entertainment', '05/31/2016', '27.41'], [u'Coffee', u'Food and Entertainment', '07/27/2016', '27.32'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '05/25/2016', '27.29'], [u'Coffee', u'Food and Entertainment', '09/30/2016', '27.02'], [u'Other', u'Food and Entertainment', '04/26/2016', '27'], [u'French Toast', u'Other', '03/02/2016', '26.95'], [u'Coffee', u'Food and Entertainment', '01/13/2016', '26.68'], [u'Joe Rittenhouse', u'Food and Entertainment', '08/30/2016', '26.45'], [u'La Colombe', u'Food and Entertainment', '03/14/2016', '26.08'], [u'Amazon', u'Office and Kitchen Supplies', '09/12/2016', '25.98'], [u'Other', u'Other', '05/19/2016', '25.98'], [u'GRUBHUB', u'Food and Entertainment', '04/18/2016', '25.85'], [u'Uber', u'Travel', '07/11/2016', '25.76'], [u'Other', u'Travel', '05/09/2016', '25.75'], [u'Other', u'Travel', '07/25/2016', '25.75'], [u'NJT NY PENN ST', u'Travel', '05/09/2016', '25.75'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '03/17/2016', '25.62'], [u'Uber', u'Travel', '02/08/2016', '25.57'], [u'Contractor', u'Payroll', '10/31/2016', '25.56'], [u'Amazon', u'Office and Kitchen Supplies', '10/24/2016', '25.43'], [u'Other', u'Technology', '11/10/2016', '25.42'], [u'Coffee', u'Food and Entertainment', '09/23/2016', '25.01'], [u'United Airlines', u'Travel', '04/21/2016', '25'], [u'United Airlines', u'Travel', '04/26/2016', '25'], [u'AMERICAN AIR', u'Travel', '08/12/2016', '25'], [u'United Airlines', u'Travel', '04/22/2016', '25'], [u'Sire Press', u'Other', '06/14/2016', '25'], [u'Uber', u'Travel', '02/08/2016', '25'], [u'Parking', u'Technology', '05/23/2016', '25'], [u'United Airlines', u'Travel', '04/26/2016', '25'], [u'PHILLYS STYLE BAGELS', u'Food and Entertainment', '05/09/2016', '25'], [u'Uber', u'Travel', '04/21/2016', '24.90'], [u'Coffee', u'Food and Entertainment', '04/08/2016', '24.90'], [u'PPA', u'Food and Entertainment', '05/16/2016', '24.84'], [u'Uber', u'Travel', '08/25/2016', '24.71'], [u'Uber', u'Travel', '04/22/2016', '24.69'], [u'TRYCAVIAR', u'Food and Entertainment', '06/27/2016', '24.67'], [u'Parking', u'Technology', '06/01/2016', '24.50'], [u'TRYCAVIAR', u'Food and Entertainment', '12/01/2016', '24.50'], [u'Acme', u'Office and Kitchen Supplies', '07/29/2016', '24.50'], [u'Coffee', u'Food and Entertainment', '10/11/2016', '24.47'], [u'Amazon', u'Office and Kitchen Supplies', '05/13/2016', '24.44'], [u'Uber', u'Travel', '11/21/2016', '24.40'], [u'Amazon', u'Office and Kitchen Supplies', '09/15/2016', '24.37'], [u'Other', u'Office and Kitchen Supplies', '03/07/2016', '24.25'], [u'POKE BOWL', u'Food and Entertainment', '06/23/2016', '24.22'], [u'GRUBHUB', u'Food and Entertainment', '01/19/2016', '24.21'], [u'Other', u'Food and Entertainment', '04/18/2016', '23.96'], [u'Coffee', u'Food and Entertainment', '04/18/2016', '23.86'], [u'Instagress', u'Other', '01/25/2016', '23.74'], [u'Other', u'Food and Entertainment', '06/24/2016', '23.60'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '08/29/2016', '23.58'], [u'Uber', u'Travel', '04/18/2016', '23.52'], [u'Amazon', u'Office and Kitchen Supplies', '03/22/2016', '23.49'], [u'La Colombe', u'Food and Entertainment', '11/30/2016', '23.41'], [u'Coffee', u'Food and Entertainment', '12/05/2016', '23.36'], [u'Coffee', u'Food and Entertainment', '04/25/2016', '23.31'], [u'Other', u'Food and Entertainment', '11/04/2016', '23.29'], [u'Uber', u'Travel', '08/29/2016', '23.26'], [u'SAMPAN DOUBLE KNOT', u'Food and Entertainment', '05/12/2016', '23'], [u'Johnny Brenda', u'Food and Entertainment', '05/17/2016', '23'], [u'USPS', u'Office and Kitchen Supplies', '05/05/2016', '22.95'], [u'Amazon', u'Office and Kitchen Supplies', '11/14/2016', '22.94'], [u'Uber', u'Travel', '10/24/2016', '22.81'], [u'Uber', u'Travel', '04/25/2016', '22.80'], [u'Uber', u'Travel', '09/06/2016', '22.60'], [u'Uber', u'Travel', '09/08/2016', '22.56'], [u'Contractor', u'Payroll', '06/27/2016', '22.50'], [u'Instagress', u'Other', '04/18/2016', '22.49'], [u'Lyft', u'Travel', '05/18/2016', '22.48'], [u'Stripp Cold', u'Food and Entertainment', '08/29/2016', '22.36'], [u'Coffee', u'Food and Entertainment', '03/28/2016', '22.36'], [u'Uber', u'Travel', '10/21/2016', '22.26'], [u'Lyft', u'Travel', '06/20/2016', '22.16'], [u'Uber', u'Travel', '11/25/2016', '22.11'], [u'Wawa', u'Travel', '06/07/2016', '22'], [u'Uber', u'Travel', '10/31/2016', '21.98'], [u'Uber', u'Travel', '04/27/2016', '21.93'], [u'Uber', u'Travel', '09/01/2016', '21.92'], [u'Coffee', u'Food and Entertainment', '08/10/2016', '21.85'], [u'Coffee', u'Food and Entertainment', '12/05/2016', '21.85'], [u'Fika London', u'Food and Entertainment', '07/18/2016', '21.84'], [u'Uber', u'Travel', '08/25/2016', '21.79'], [u'Uber', u'Travel', '09/20/2016', '21.64'], [u'French Toast', u'Office and Kitchen Supplies', '03/02/2016', '21.58'], [u'Other', u'Office and Kitchen Supplies', '05/25/2016', '21.57'], [u'Other', u'Food and Entertainment', '04/26/2016', '21.48'], [u'Coffee', u'Food and Entertainment', '01/27/2016', '21.36'], [u'Acme', u'Office and Kitchen Supplies', '01/14/2016', '21.30'], [u'Coffee', u'Food and Entertainment', '03/17/2016', '21.28'], [u'Uber', u'Travel', '09/02/2016', '21.28'], [u'Amazon', u'Office and Kitchen Supplies', '12/05/2016', '21.19'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '08/12/2016', '21.18'], [u'Uber', u'Travel', '08/16/2016', '21.15'], [u'Other', u'Office and Kitchen Supplies', '07/27/2016', '21.11'], [u'Google', u'Technology', '05/23/2016', '21.06'], [u'Uber', u'Travel', '04/18/2016', '20.91'], [u'FRANKFORD HALL', u'Food and Entertainment', '09/16/2016', '20.74'], [u'La Colombe', u'Food and Entertainment', '08/15/2016', '20.65'], [u'Acme', u'Office and Kitchen Supplies', '07/19/2016', '20.59'], [u'Acme', u'Office and Kitchen Supplies', '08/10/2016', '20.55'], [u'Amazon', u'Office and Kitchen Supplies', '02/01/2016', '20.54'], [u'Amazon', u'Office and Kitchen Supplies', '05/03/2016', '20.52'], [u'Snap Kitchen', u'Food and Entertainment', '04/27/2016', '20.49'], [u'Amazon', u'Office and Kitchen Supplies', '06/30/2016', '20.47'], [u'Other', u'Food and Entertainment', '04/14/2016', '20.41'], [u'Coffee', u'Food and Entertainment', '03/03/2016', '20.41'], [u'Uber', u'Travel', '08/16/2016', '20.24'], [u'Other', u'Food and Entertainment', '06/15/2016', '20.20'], [u'MOOD INDIAN', u'Food and Entertainment', '03/04/2016', '20.17'], [u'MOOD INDIAN', u'Food and Entertainment', '07/20/2016', '20.17'], [u'SAMPAN DOUBLE KNOT', u'Food and Entertainment', '06/20/2016', '20.16'], [u'Uber', u'Travel', '12/01/2016', '20.09'], [u'Acme', u'Office and Kitchen Supplies', '03/22/2016', '20.04'], [u'Other', u'Food and Entertainment', '04/25/2016', '20'], [u'Other', u'Professional Services', '11/16/2016', '20'], [u'Other', u'Other', '10/12/2016', '20'], [u'Contractor', u'Payroll', '01/11/2016', '20'], [u'LivHome', u'Payroll', '01/07/2016', '20'], [u'Acme', u'Office and Kitchen Supplies', '08/08/2016', '19.99'], [u'COSI', u'Food and Entertainment', '02/10/2016', '19.95'], [u'Uber', u'Travel', '08/25/2016', '19.92'], [u'PPA', u'Food and Entertainment', '05/06/2016', '19.87'], [u'Uber', u'Travel', '09/23/2016', '19.78'], [u'Lyft', u'Travel', '04/25/2016', '19.69'], [u'Uber', u'Travel', '09/20/2016', '19.64'], [u'Uber', u'Travel', '01/25/2016', '19.64'], [u'Fred 62', u'Food and Entertainment', '04/26/2016', '19.63'], [u'Coffee', u'Food and Entertainment', '10/18/2016', '19.55'], [u'Coffee', u'Food and Entertainment', '03/07/2016', '19.55'], [u'Coffee', u'Food and Entertainment', '12/14/2016', '19.55'], [u'Coffee', u'Food and Entertainment', '01/19/2016', '19.55'], [u'Coffee', u'Food and Entertainment', '03/25/2016', '19.55'], [u'Coffee', u'Food and Entertainment', '09/14/2016', '19.55'], [u'Coffee', u'Food and Entertainment', '02/16/2016', '19.55'], [u'Uber', u'Travel', '03/18/2016', '19.54'], [u'Amazon', u'Office and Kitchen Supplies', '03/22/2016', '19.48'], [u'Coffee', u'Food and Entertainment', '08/17/2016', '19.36'], [u'La Colombe', u'Food and Entertainment', '01/19/2016', '19.23'], [u'Uber', u'Travel', '11/14/2016', '19.21'], [u'MOOD INDIAN', u'Food and Entertainment', '08/22/2016', '19.17'], [u'MOOD INDIAN', u'Food and Entertainment', '04/28/2016', '19.17'], [u'Foodery', u'Food and Entertainment', '04/21/2016', '19.14'], [u'Coffee', u'Food and Entertainment', '01/04/2016', '19.12'], [u'Uber', u'Travel', '11/28/2016', '19.08'], [u'Snap Kitchen', u'Food and Entertainment', '10/19/2016', '19.08'], [u'Uber', u'Travel', '11/14/2016', '19.01'], [u'PHILLYS STYLE BAGELS', u'Food and Entertainment', '09/19/2016', '19'], [u'Streak', u'Technology', '03/30/2016', '19'], [u'Streak', u'Technology', '06/30/2016', '19'], [u'Streak', u'Technology', '08/30/2016', '19'], [u'Streak', u'Technology', '10/31/2016', '19'], [u'Streak', u'Other', '11/30/2016', '19'], [u'Streak', u'Technology', '05/02/2016', '19'], [u'Streak', u'Technology', '03/01/2016', '19'], [u'Streak', u'Technology', '05/31/2016', '19'], [u'Acme', u'Office and Kitchen Supplies', '05/26/2016', '19'], [u'Streak', u'Technology', '09/30/2016', '19'], [u'Streak', u'Technology', '08/01/2016', '19'], [u'Amazon', u'Office and Kitchen Supplies', '03/18/2016', '18.98'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '01/13/2016', '18.95'], [u'Uber', u'Travel', '08/17/2016', '18.88'], [u'Uber', u'Travel', '10/19/2016', '18.84'], [u'Uber', u'Travel', '05/31/2016', '18.80'], [u'Uber', u'Travel', '11/07/2016', '18.70'], [u'Uber', u'Travel', '11/21/2016', '18.67'], [u'Uber', u'Travel', '11/07/2016', '18.57'], [u'La Colombe', u'Food and Entertainment', '09/26/2016', '18.55'], [u'Other', u'Office and Kitchen Supplies', '03/14/2016', '18.49'], [u'Uber', u'Travel', '05/31/2016', '18.48'], [u'Uber', u'Travel', '10/27/2016', '18.47'], [u'Uber', u'Travel', '12/09/2016', '18.47'], [u'Coffee', u'Food and Entertainment', '05/06/2016', '18.40'], [u'Coffee', u'Food and Entertainment', '06/03/2016', '18.40'], [u'Coffee', u'Food and Entertainment', '04/28/2016', '18.40'], [u'Mulerhins', u'Other', '11/14/2016', '18.40'], [u'Coffee', u'Food and Entertainment', '05/19/2016', '18.40'], [u'Uber', u'Travel', '09/06/2016', '18.37'], [u'Barnesnoble', u'Office and Kitchen Supplies', '03/01/2016', '18.31'], [u'Coffee', u'Food and Entertainment', '05/12/2016', '18.30'], [u'Amazon', u'Office and Kitchen Supplies', '03/18/2016', '18.10'], [u'La Colombe', u'Food and Entertainment', '05/02/2016', '18.08'], [u'Amazon', u'Office and Kitchen Supplies', '03/22/2016', '17.99'], [u'Amazon', u'Office and Kitchen Supplies', '05/25/2016', '17.99'], [u'Lyft', u'Travel', '05/09/2016', '17.98'], [u'Uber', u'Travel', '04/25/2016', '17.98'], [u'Uber', u'Travel', '04/18/2016', '17.91'], [u'Uber', u'Travel', '10/06/2016', '17.90'], [u'Acme', u'Office and Kitchen Supplies', '06/14/2016', '17.86'], [u'Coffee', u'Food and Entertainment', '04/22/2016', '17.82'], [u'Uber', u'Travel', '09/26/2016', '17.80'], [u'Snap Kitchen', u'Food and Entertainment', '06/13/2016', '17.79'], [u'TRYCAVIAR', u'Food and Entertainment', '05/19/2016', '17.74'], [u'TRYCAVIAR', u'Food and Entertainment', '08/17/2016', '17.74'], [u'Other', u'Travel', '02/16/2016', '17.73'], [u'Uber', u'Travel', '04/25/2016', '17.52'], [u'Coffee', u'Food and Entertainment', '10/24/2016', '17.42'], [u'Uber', u'Travel', '08/29/2016', '17.38'], [u'Other', u'Other', '12/07/2016', '17.37'], [u'Snap Kitchen', u'Food and Entertainment', '08/05/2016', '17.26'], [u'La Colombe', u'Food and Entertainment', '03/31/2016', '17.25'], [u'VideoSmith', u'Office and Kitchen Supplies', '03/24/2016', '17.17'], [u'Other', u'Food and Entertainment', '04/11/2016', '17.16'], [u'Acme', u'Office and Kitchen Supplies', '05/16/2016', '17.11'], [u'Other', u'Technology', '01/19/2016', '17'], [u'Retreat', u'Payroll', '10/20/2016', '17'], [u'walgreens', u'Payroll', '05/20/2016', '17'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '07/26/2016', '16.98'], [u'Other', u'Food and Entertainment', '04/25/2016', '16.95'], [u'Uber', u'Travel', '11/17/2016', '16.94'], [u'Other', u'Food and Entertainment', '07/18/2016', '16.92'], [u'Uber', u'Travel', '11/16/2016', '16.90'], [u'Uber', u'Travel', '09/07/2016', '16.52'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '02/02/2016', '16.50'], [u'Uber', u'Travel', '10/28/2016', '16.48'], [u'Other', u'Food and Entertainment', '10/11/2016', '16.41'], [u'Uber', u'Travel', '04/26/2016', '16.38'], [u'Lyft', u'Travel', '05/23/2016', '16.35'], [u'Uber', u'Travel', '04/25/2016', '16.32'], [u'Uber', u'Travel', '11/22/2016', '16.21'], [u'Spotify', u'Technology', '11/28/2016', '16.19'], [u'Spotify', u'Technology', '08/26/2016', '16.19'], [u'Spotify', u'Technology', '10/26/2016', '16.19'], [u'Spotify', u'Technology', '09/26/2016', '16.19'], [u'Snap Kitchen', u'Food and Entertainment', '06/27/2016', '16.18'], [u'Uber', u'Travel', '04/25/2016', '16.03'], [u'Hotel', u'Travel', '04/26/2016', '16'], [u'Uber', u'Travel', '08/17/2016', '16'], [u'Amazon', u'Office and Kitchen Supplies', '06/16/2016', '15.99'], [u'Amazon', u'Office and Kitchen Supplies', '03/23/2016', '15.90'], [u'Uber', u'Travel', '03/30/2016', '15.89'], [u'Amazon', u'Office and Kitchen Supplies', '12/12/2016', '15.89'], [u'Snap Kitchen', u'Food and Entertainment', '09/01/2016', '15.88'], [u'Uber', u'Travel', '02/16/2016', '15.88'], [u'DESANO', u'Food and Entertainment', '04/26/2016', '15.81'], [u'Uber', u'Travel', '09/06/2016', '15.79'], [u'fiverr', u'Payroll', '04/12/2016', '15.75'], [u'Uber', u'Travel', '10/06/2016', '15.72'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '02/19/2016', '15.65'], [u'Coffee', u'Food and Entertainment', '09/08/2016', '15.48'], [u'Uber', u'Travel', '04/25/2016', '15.43'], [u'Lyft', u'Travel', '06/03/2016', '15.26'], [u'Lyft', u'Travel', '05/09/2016', '15.22'], [u'POKE BOWL', u'Food and Entertainment', '07/22/2016', '15.21'], [u'Uber', u'Travel', '08/29/2016', '15.12'], [u'Uber', u'Travel', '11/08/2016', '15.09'], [u'Wawa', u'Food and Entertainment', '10/14/2016', '15.01'], [u'Other', u'Office and Kitchen Supplies', '09/08/2016', '15'], [u'Other', u'Office and Kitchen Supplies', '10/11/2016', '15'], [u'Parking', u'Technology', '05/23/2016', '15'], [u'Other', u'Food and Entertainment', '04/25/2016', '15'], [u'Frederiksberg ', u'Other', '11/09/2016', '15'], [u'Handy Charges', u'Utilities', '02/26/2016', '15'], [u'Media Temple', u'Technology', '09/12/2016', '15'], [u'Frederiksberg ', u'Other', '12/09/2016', '15'], [u'Parking', u'Technology', '09/02/2016', '15'], [u'Prime Fresh', u'Office and Kitchen Supplies', '11/07/2016', '14.99'], [u'Prime Fresh', u'Office and Kitchen Supplies', '12/06/2016', '14.99'], [u'Other', u'Food and Entertainment', '06/23/2016', '14.96'], [u'La Colombe', u'Food and Entertainment', '07/20/2016', '14.95'], [u'Uber', u'Travel', '08/15/2016', '14.85'], [u'Uber', u'Travel', '08/25/2016', '14.85'], [u'Uber', u'Travel', '08/25/2016', '14.85'], [u'Uber', u'Travel', '04/18/2016', '14.74'], [u'Uber', u'Travel', '10/07/2016', '14.69'], [u'Fred 62', u'Food and Entertainment', '04/26/2016', '14.63'], [u'Uber', u'Travel', '09/12/2016', '14.58'], [u'Other', u'Food and Entertainment', '06/16/2016', '14.47'], [u'Lyft', u'Travel', '05/31/2016', '14.43'], [u'Uber', u'Travel', '11/03/2016', '14.42'], [u'Uber', u'Travel', '11/08/2015', '14.42'], [u'Contractor', u'Payroll', '09/29/2016', '14.41'], [u'Uber', u'Travel', '02/12/2016', '14.40'], [u'Lyft', u'Travel', '06/03/2016', '14.39'], [u'Uber', u'Travel', '11/08/2016', '14.35'], [u'Uber', u'Travel', '06/13/2016', '14.35'], [u'Lyft', u'Travel', '06/16/2016', '14.30'], [u'Acme', u'Office and Kitchen Supplies', '04/27/2016', '14.29'], [u'POKE BOWL', u'Food and Entertainment', '06/02/2016', '14.28'], [u'PPA', u'Food and Entertainment', '04/21/2016', '14.28'], [u'Uber', u'Travel', '12/12/2016', '14.21'], [u'Uber', u'Travel', '10/24/2016', '14.15'], [u'Uber', u'Travel', '08/29/2016', '14.08'], [u'Other', u'Food and Entertainment', '03/15/2016', '14.02'], [u'Acme', u'Office and Kitchen Supplies', '03/28/2016', '13.97'], [u'Uber', u'Travel', '09/15/2016', '13.94'], [u'Contractor', u'Payroll', '09/01/2016', '13.91'], [u'Uber', u'Travel', '01/25/2016', '13.87'], [u'Uber', u'Travel', '09/06/2016', '13.83'], [u'Uber', u'Travel', '06/20/2016', '13.80'], [u'Uber', u'Travel', '04/25/2016', '13.79'], [u'Lyft', u'Travel', '06/03/2016', '13.73'], [u'Uber', u'Travel', '04/25/2016', '13.63'], [u'Other', u'Office and Kitchen Supplies', '05/23/2016', '13.59'], [u'Lyft', u'Travel', '04/27/2016', '13.49'], [u'Uber', u'Travel', '11/08/2016', '13.48'], [u'Uber', u'Travel', '09/28/2016', '13.48'], [u'Other', u'Travel', '07/18/2016', '13.48'], [u'Uber', u'Travel', '01/19/2016', '13.38'], [u'POKE BOWL', u'Food and Entertainment', '09/28/2016', '13.35'], [u'Other', u'Office and Kitchen Supplies', '01/08/2016', '13.35'], [u'Lyft', u'Travel', '05/31/2016', '13.26'], [u'Lyft', u'Travel', '05/02/2016', '13.25'], [u'Uber', u'Travel', '04/18/2016', '13.24'], [u'Lyft', u'Travel', '04/28/2016', '13.24'], [u'Coffee', u'Food and Entertainment', '05/10/2016', '13.16'], [u'Uber', u'Travel', '09/06/2016', '13.05'], [u'Amazon', u'Office and Kitchen Supplies', '05/12/2016', '13.05'], [u'Other', u'Other', '11/14/2016', '13.04'], [u'Amazon', u'Office and Kitchen Supplies', '11/14/2016', '12.99'], [u'Uber', u'Travel', '04/25/2016', '12.98'], [u'Uber', u'Travel', '07/08/2016', '12.96'], [u'Lyft', u'Travel', '05/06/2016', '12.96'], [u'Uber', u'Travel', '08/24/2016', '12.95'], [u'Lyft', u'Travel', '06/20/2016', '12.93'], [u'Lyft', u'Travel', '07/11/2016', '12.90'], [u'Uber', u'Travel', '03/07/2016', '12.89'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '07/21/2016', '12.86'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '12/07/2016', '12.86'], [u'Acme', u'Office and Kitchen Supplies', '02/02/2016', '12.83'], [u'Uber', u'Travel', '04/25/2016', '12.80'], [u'Acme', u'Office and Kitchen Supplies', '09/26/2016', '12.80'], [u'Uber', u'Travel', '04/29/2016', '12.78'], [u'POKE BOWL', u'Food and Entertainment', '11/14/2016', '12.77'], [u'Amazon', u'Office and Kitchen Supplies', '08/22/2016', '12.71'], [u'Amazon', u'Office and Kitchen Supplies', '11/22/2016', '12.71'], [u'Uber', u'Travel', '01/27/2016', '12.67'], [u'Uber', u'Travel', '08/26/2016', '12.67'], [u'Coffee', u'Food and Entertainment', '06/28/2016', '12.65'], [u'Uber', u'Travel', '03/11/2016', '12.64'], [u'Uber', u'Travel', '10/31/2016', '12.54'], [u'Uber', u'Travel', '02/18/2016', '12.52'], [u'Lyft', u'Travel', '06/20/2016', '12.46'], [u'Uber', u'Travel', '08/26/2016', '12.42'], [u'Coffee', u'Food and Entertainment', '08/17/2016', '12.42'], [u'Other', u'Food and Entertainment', '03/10/2016', '12.40'], [u'Uber', u'Travel', '09/12/2016', '12.39'], [u'PHILLYS STYLE BAGELS', u'Food and Entertainment', '06/21/2016', '12.35'], [u'Uber', u'Travel', '08/08/2016', '12.34'], [u'Lyft', u'Travel', '06/20/2016', '12.30'], [u'Lyft', u'Travel', '06/03/2016', '12.29'], [u'Uber', u'Travel', '08/26/2016', '12.24'], [u'Uber', u'Travel', '05/19/2016', '12.12'], [u'Amazon', u'Office and Kitchen Supplies', '05/13/2016', '12.11'], [u'Uber', u'Travel', '04/22/2016', '12.11'], [u'Coffee', u'Food and Entertainment', '11/02/2016', '12.08'], [u'Coffee', u'Food and Entertainment', '11/01/2016', '12.08'], [u'Uber', u'Travel', '08/29/2016', '12.07'], [u'Zaros', u'Food and Entertainment', '05/10/2016', '12.05'], [u'Foodery', u'Food and Entertainment', '07/25/2016', '12.02'], [u'Acme', u'Office and Kitchen Supplies', '06/07/2016', '11.89'], [u'Lyft', u'Travel', '06/17/2016', '11.89'], [u'Uber', u'Travel', '08/24/2016', '11.83'], [u'Uber', u'Travel', '11/08/2016', '11.80'], [u'Uber', u'Travel', '08/26/2016', '11.78'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '07/19/2016', '11.73'], [u'Uber', u'Travel', '08/15/2016', '11.71'], [u'Uber', u'Travel', '11/18/2016', '11.69'], [u'Acme', u'Office and Kitchen Supplies', '03/30/2016', '11.68'], [u'Uber', u'Travel', '05/25/2016', '11.68'], [u'Uber', u'Travel', '06/17/2016', '11.67'], [u'Other', u'Food and Entertainment', '11/17/2016', '11.67'], [u'Amazon', u'Office and Kitchen Supplies', '10/24/2016', '11.65'], [u'Amazon', u'Office and Kitchen Supplies', '11/22/2016', '11.65'], [u'Amazon', u'Office and Kitchen Supplies', '09/22/2016', '11.65'], [u'Uber', u'Travel', '08/23/2016', '11.64'], [u'Uber', u'Travel', '09/30/2016', '11.61'], [u'Uber', u'Travel', '08/15/2016', '11.60'], [u'Macmart', u'Food and Entertainment', '05/20/2016', '11.58'], [u'Uber', u'Travel', '03/07/2016', '11.57'], [u'Other', u'Office and Kitchen Supplies', '02/22/2016', '11.54'], [u'Uber', u'Travel', '07/25/2016', '11.53'], [u'Snap Kitchen', u'Food and Entertainment', '11/09/2016', '11.53'], [u'Uber', u'Travel', '02/16/2016', '11.53'], [u'La Colombe', u'Food and Entertainment', '02/16/2016', '11.50'], [u'La Colombe', u'Food and Entertainment', '06/30/2016', '11.50'], [u'Joe Rittenhouse', u'Food and Entertainment', '08/26/2016', '11.50'], [u'POKE BOWL', u'Food and Entertainment', '07/19/2016', '11.49'], [u'POKE BOWL', u'Food and Entertainment', '08/10/2016', '11.49'], [u'POKE BOWL', u'Food and Entertainment', '06/21/2016', '11.49'], [u'POKE BOWL', u'Food and Entertainment', '08/16/2016', '11.49'], [u'POKE BOWL', u'Food and Entertainment', '06/14/2016', '11.49'], [u'Other', u'Travel', '01/26/2016', '11.48'], [u'Uber', u'Travel', '02/08/2016', '11.46'], [u'Uber', u'Travel', '03/14/2016', '11.43'], [u'Uber', u'Travel', '07/01/2016', '11.42'], [u'Uber', u'Travel', '09/08/2016', '11.34'], [u'Lyft', u'Travel', '05/23/2016', '11.34'], [u'Retreat', u'Payroll', '10/14/2016', '11.29'], [u'Lyft', u'Travel', '08/22/2016', '11.27'], [u'Uber', u'Travel', '10/31/2016', '11.25'], [u'Uber', u'Travel', '11/30/2016', '11.24'], [u'Uber', u'Travel', '09/07/2016', '11.21'], [u'Uber', u'Travel', '09/06/2016', '11.21'], [u'Uber', u'Travel', '06/20/2016', '11.21'], [u'Uber', u'Travel', '02/19/2016', '11.19'], [u'Uber', u'Travel', '06/27/2016', '11.13'], [u'Uber', u'Travel', '10/11/2016', '11.10'], [u'Uber', u'Travel', '10/11/2016', '11.07'], [u'Amazon', u'Office and Kitchen Supplies', '05/16/2016', '11.02'], [u'Uber', u'Travel', '12/12/2016', '11.02'], [u'DEVILS ALLEY', u'Food and Entertainment', '05/23/2016', '11'], [u'Amazon', u'Office and Kitchen Supplies', '06/02/2016', '11'], [u'Coffee', u'Food and Entertainment', '04/26/2016', '11'], [u'Amazon', u'Office and Kitchen Supplies', '06/02/2016', '11'], [u'Uber', u'Travel', '02/26/2016', '10.99'], [u'Uber', u'Travel', '08/15/2016', '10.98'], [u'Uber', u'Travel', '08/17/2016', '10.96'], [u'Amazon', u'Office and Kitchen Supplies', '10/17/2016', '10.95'], [u'Uber', u'Travel', '03/14/2016', '10.92'], [u'Uber', u'Travel', '08/24/2016', '10.92'], [u'Lyft', u'Travel', '05/19/2016', '10.85'], [u'Uber', u'Travel', '08/24/2016', '10.84'], [u'PARC', u'Other', '05/03/2016', '10.80'], [u'AC MOORE', u'Office and Kitchen Supplies', '01/14/2016', '10.78'], [u'Uber', u'Travel', '08/01/2016', '10.73'], [u'Uber', u'Travel', '07/07/2016', '10.67'], [u'Other', u'Food and Entertainment', '08/16/2016', '10.67'], [u'Uber', u'Travel', '05/02/2016', '10.66'], [u'Uber', u'Travel', '11/14/2016', '10.65'], [u'TRIOS TRATTORIA ', u'Food and Entertainment', '04/26/2016', '10.63'], [u'Uber', u'Travel', '09/19/2016', '10.62'], [u'fiverr', u'Payroll', '05/16/2016', '10.50'], [u'Other', u'Food and Entertainment', '04/25/2016', '10.50'], [u'Lyft', u'Travel', '05/10/2016', '10.49'], [u'Uber', u'Travel', '02/16/2016', '10.48'], [u'Uber', u'Travel', '07/08/2016', '10.45'], [u'Uber', u'Travel', '08/23/2016', '10.40'], [u'Snap Kitchen', u'Food and Entertainment', '08/10/2016', '10.24'], [u'Snap Kitchen', u'Food and Entertainment', '09/29/2016', '10.24'], [u'Uber', u'Travel', '09/19/2016', '10.22'], [u'Lyft', u'Travel', '05/26/2016', '10.16'], [u'Lyft', u'Travel', '04/25/2016', '10.15'], [u'La Colombe', u'Food and Entertainment', '07/21/2016', '10.07'], [u'Uber', u'Travel', '08/23/2016', '10.06'], [u'Uber', u'Travel', '10/11/2016', '10.06'], [u'Uber', u'Travel', '10/04/2016', '10.05'], [u'Uber', u'Travel', '11/18/2016', '10.04'], [u'Other', u'Food and Entertainment', '03/01/2016', '10.02'], [u'Uber', u'Travel', '11/14/2016', '10.02'], [u'Other', u'Other', '12/05/2016', '10'], [u'Other', u'Travel', '07/25/2016', '10'], [u'Coffee', u'Food and Entertainment', '06/21/2016', '10'], [u'Other', u'Food and Entertainment', '04/25/2016', '10'], [u'Uber', u'Travel', '01/04/2016', '10'], [u'Google', u'Technology', '05/31/2016', '9.99'], [u'Google', u'Technology', '03/28/2016', '9.99'], [u'Uber', u'Travel', '09/09/2016', '9.99'], [u'Uber', u'Travel', '11/25/2016', '9.99'], [u'Google', u'Technology', '01/28/2016', '9.99'], [u'Google', u'Technology', '02/29/2016', '9.99'], [u'Google', u'Technology', '07/28/2016', '9.99'], [u'Google', u'Technology', '10/31/2016', '9.99'], [u'Google', u'Technology', '09/29/2016', '9.99'], [u'Google', u'Technology', '04/28/2016', '9.99'], [u'Google', u'Technology', '06/28/2016', '9.99'], [u'Google', u'Technology', '11/29/2016', '9.99'], [u'Amazon', u'Office and Kitchen Supplies', '06/20/2016', '9.99'], [u'Google', u'Technology', '08/29/2016', '9.99'], [u'Acme', u'Office and Kitchen Supplies', '11/03/2016', '9.98'], [u'Uber', u'Travel', '08/24/2016', '9.98'], [u'Other', u'Food and Entertainment', '04/20/2016', '9.98'], [u'Uber', u'Travel', '04/13/2016', '9.98'], [u'Uber', u'Travel', '04/06/2016', '9.95'], [u'JustFly', u'Travel', '09/07/2016', '9.95'], [u'Uber', u'Travel', '08/22/2016', '9.93'], [u'Snap Kitchen', u'Food and Entertainment', '12/02/2016', '9.91'], [u'Uber', u'Travel', '09/06/2016', '9.90'], [u'Uber', u'Travel', '09/07/2016', '9.85'], [u'Uber', u'Travel', '09/01/2016', '9.85'], [u'USPS', u'Office and Kitchen Supplies', '04/04/2016', '9.80'], [u'Uber', u'Travel', '09/12/2016', '9.80'], [u'Uber', u'Travel', '08/22/2016', '9.80'], [u'Lyft', u'Travel', '05/06/2016', '9.69'], [u'Other', u'Office and Kitchen Supplies', '06/27/2016', '9.68'], [u'Uber', u'Travel', '01/19/2016', '9.62'], [u'Foodery', u'Food and Entertainment', '06/16/2016', '9.59'], [u'Amazon', u'Office and Kitchen Supplies', '06/02/2016', '9.58'], [u'Uber', u'Travel', '09/01/2016', '9.56'], [u'Uber', u'Travel', '03/03/2016', '9.52'], [u'Uber', u'Travel', '08/01/2016', '9.51'], [u'Coffee', u'Food and Entertainment', '08/30/2016', '9.50'], [u'SAMPAN DOUBLE KNOT', u'Food and Entertainment', '04/18/2016', '9.50'], [u'Coffee', u'Food and Entertainment', '12/07/2016', '9.50'], [u'Uber', u'Travel', '11/21/2016', '9.48'], [u'Lyft', u'Travel', '06/13/2016', '9.43'], [u'Uber', u'Travel', '09/14/2016', '9.43'], [u'USPS', u'Office and Kitchen Supplies', '04/19/2016', '9.40'], [u'USPS', u'Office and Kitchen Supplies', '09/23/2016', '9.40'], [u'Uber', u'Travel', '09/23/2016', '9.37'], [u'Uber', u'Travel', '04/25/2016', '9.35'], [u'Uber', u'Travel', '12/08/2016', '9.34'], [u'Uber', u'Travel', '07/25/2016', '9.33'], [u'Uber', u'Travel', '04/29/2016', '9.33'], [u'Uber', u'Travel', '07/22/2016', '9.32'], [u'Uber', u'Travel', '08/19/2016', '9.31'], [u'Uber', u'Travel', '06/15/2016', '9.30'], [u'Lyft', u'Travel', '05/02/2016', '9.30'], [u'Uber', u'Travel', '05/09/2016', '9.29'], [u'Uber', u'Travel', '08/15/2016', '9.26'], [u'Uber', u'Travel', '04/25/2016', '9.24'], [u'Uber', u'Travel', '04/25/2016', '9.23'], [u'Uber', u'Travel', '05/23/2016', '9.21'], [u'Uber', u'Travel', '10/21/2016', '9.20'], [u'Other', u'Food and Entertainment', '04/20/2016', '9.20'], [u'Uber', u'Travel', '09/30/2016', '9.19'], [u'Uber', u'Travel', '09/12/2016', '9.17'], [u'Uber', u'Travel', '01/04/2016', '9.12'], [u'Uber', u'Travel', '10/21/2016', '9.11'], [u'Uber', u'Travel', '11/21/2016', '9.11'], [u'Uber', u'Travel', '11/29/2016', '9.10'], [u'Uber', u'Travel', '05/26/2016', '9.08'], [u'Uber', u'Travel', '10/31/2016', '9.05'], [u'Coffee', u'Food and Entertainment', '03/21/2016', '9'], [u'La Colombe', u'Food and Entertainment', '11/10/2016', '9'], [u'Instagress', u'Other', '02/22/2016', '8.99'], [u'Uber', u'Travel', '03/18/2016', '8.97'], [u'Uber', u'Travel', '11/17/2016', '8.97'], [u'Uber', u'Travel', '10/31/2016', '8.96'], [u'Uber', u'Travel', '08/02/2016', '8.95'], [u'Uber', u'Travel', '05/18/2016', '8.93'], [u'Uber', u'Travel', '10/11/2016', '8.90'], [u'Uber', u'Travel', '08/16/2016', '8.87'], [u'Uber', u'Travel', '12/08/2016', '8.87'], [u'Uber', u'Travel', '12/13/2016', '8.86'], [u'Uber', u'Travel', '11/09/2016', '8.84'], [u'Lyft', u'Travel', '04/25/2016', '8.78'], [u'Coffee', u'Food and Entertainment', '11/09/2016', '8.75'], [u'Uber', u'Travel', '05/16/2016', '8.75'], [u'Uber', u'Travel', '11/16/2016', '8.74'], [u'Uber', u'Travel', '01/08/2016', '8.74'], [u'Uber', u'Travel', '04/12/2016', '8.72'], [u'Uber', u'Travel', '09/07/2016', '8.71'], [u'Uber', u'Travel', '08/23/2016', '8.69'], [u'Uber', u'Travel', '08/31/2016', '8.68'], [u'Uber', u'Travel', '06/27/2016', '8.68'], [u'Uber', u'Travel', '03/03/2016', '8.65'], [u'Uber', u'Travel', '05/09/2016', '8.65'], [u'Other', u'Food and Entertainment', '10/28/2016', '8.64'], [u'Uber', u'Travel', '10/28/2016', '8.61'], [u'Uber', u'Travel', '01/15/2016', '8.57'], [u'Uber', u'Travel', '10/11/2016', '8.56'], [u'Lyft', u'Travel', '04/25/2016', '8.51'], [u'Uber', u'Travel', '08/15/2016', '8.51'], [u'Coffee', u'Food and Entertainment', '07/19/2016', '8.50'], [u'Uber', u'Travel', '04/25/2016', '8.50'], [u'Joe Rittenhouse', u'Food and Entertainment', '08/22/2016', '8.50'], [u'Uber', u'Travel', '03/14/2016', '8.48'], [u'Amazon', u'Office and Kitchen Supplies', '05/13/2016', '8.47'], [u'Uber', u'Travel', '11/04/2016', '8.45'], [u'Lyft', u'Travel', '05/24/2016', '8.45'], [u'Uber', u'Travel', '12/09/2016', '8.44'], [u'Uber', u'Travel', '03/30/2016', '8.43'], [u'Uber', u'Travel', '01/28/2016', '8.43'], [u'QDOBA', u'Food and Entertainment', '12/06/2016', '8.42'], [u'Uber', u'Travel', '07/25/2016', '8.42'], [u'Uber', u'Travel', '11/14/2016', '8.38'], [u'Uber', u'Travel', '01/15/2016', '8.37'], [u'Lyft', u'Travel', '07/07/2016', '8.37'], [u'Uber', u'Travel', '02/16/2016', '8.36'], [u'Uber', u'Travel', '03/14/2016', '8.36'], [u'Uber', u'Travel', '09/22/2016', '8.34'], [u'Uber', u'Travel', '04/18/2016', '8.34'], [u'Uber', u'Travel', '05/25/2016', '8.33'], [u'Coffee', u'Food and Entertainment', '06/20/2016', '8.32'], [u'Uber', u'Travel', '01/19/2016', '8.30'], [u'Uber', u'Travel', '05/09/2016', '8.28'], [u'Uber', u'Travel', '04/14/2016', '8.28'], [u'Uber', u'Travel', '01/08/2016', '8.22'], [u'Uber', u'Travel', '12/06/2016', '8.14'], [u'Uber', u'Travel', '05/19/2016', '8.13'], [u'Uber', u'Travel', '06/15/2016', '8.11'], [u'Uber', u'Travel', '02/22/2016', '8.09'], [u'Uber', u'Travel', '05/23/2016', '8.06'], [u'Other', u'Office and Kitchen Supplies', '05/06/2016', '8.04'], [u'Uber', u'Travel', '08/16/2016', '8.02'], [u'Uber', u'Travel', '05/26/2016', '8.02'], [u'Uber', u'Travel', '07/25/2016', '8.01'], [u'La Colombe', u'Food and Entertainment', '11/14/2016', '8'], [u'La Colombe', u'Food and Entertainment', '06/30/2016', '8'], [u'La Colombe', u'Food and Entertainment', '05/16/2016', '8'], [u'La Colombe', u'Food and Entertainment', '06/27/2016', '8'], [u'United Airlines', u'Travel', '04/25/2016', '7.99'], [u'United Airlines', u'Utilities', '04/26/2016', '7.99'], [u'Uber', u'Travel', '08/01/2016', '7.98'], [u'Uber', u'Travel', '08/31/2016', '7.97'], [u'Uber', u'Travel', '10/11/2016', '7.96'], [u'IRS', u'Professional Services', '02/03/2016', '7.96'], [u'Uber', u'Travel', '09/06/2016', '7.95'], [u'Uber', u'Travel', '06/28/2016', '7.94'], [u'Uber', u'Travel', '04/13/2016', '7.91'], [u'Uber', u'Travel', '05/23/2016', '7.91'], [u'Uber', u'Travel', '11/02/2016', '7.88'], [u'Uber', u'Travel', '04/29/2016', '7.87'], [u'Uber', u'Travel', '06/27/2016', '7.87'], [u'Uber', u'Travel', '06/27/2016', '7.79'], [u'Uber', u'Travel', '09/23/2016', '7.78'], [u'Uber', u'Travel', '04/14/2016', '7.76'], [u'Coffee', u'Food and Entertainment', '12/06/2016', '7.75'], [u'Coffee', u'Food and Entertainment', '10/24/2016', '7.75'], [u'Uber', u'Travel', '05/23/2016', '7.73'], [u'Uber', u'Travel', '08/02/2016', '7.73'], [u'Uber', u'Travel', '12/06/2016', '7.73'], [u'FEDEXOFFICE', u'Other', '03/01/2016', '7.68'], [u'Uber', u'Travel', '03/22/2016', '7.65'], [u'Uber', u'Travel', '04/13/2016', '7.60'], [u'Uber', u'Travel', '12/13/2016', '7.60'], [u'Uber', u'Travel', '12/09/2016', '7.59'], [u'Snap Kitchen', u'Food and Entertainment', '11/14/2016', '7.55'], [u'Uber', u'Travel', '09/15/2016', '7.55'], [u'Uber', u'Travel', '02/19/2016', '7.55'], [u'Uber', u'Travel', '08/01/2016', '7.53'], [u'Uber', u'Travel', '12/05/2016', '7.46'], [u'Uber', u'Travel', '11/28/2016', '7.43'], [u'Uber', u'Travel', '08/01/2016', '7.43'], [u'Amazon', u'Office and Kitchen Supplies', '08/22/2016', '7.41'], [u'Uber', u'Travel', '10/31/2016', '7.39'], [u'Uber', u'Travel', '04/25/2016', '7.38'], [u'Uber', u'Travel', '01/19/2016', '7.35'], [u'Uber', u'Travel', '01/25/2016', '7.31'], [u'Uber', u'Travel', '02/16/2016', '7.30'], [u'Uber', u'Travel', '03/10/2016', '7.27'], [u'Uber', u'Travel', '04/25/2016', '7.21'], [u'Uber', u'Travel', '02/22/2016', '7.21'], [u'Uber', u'Travel', '05/23/2016', '7.21'], [u'Uber', u'Travel', '11/21/2016', '7.20'], [u'Uber', u'Travel', '05/24/2016', '7.19'], [u'Uber', u'Travel', '04/25/2016', '7.16'], [u'Uber', u'Travel', '04/13/2016', '7.15'], [u'Uber', u'Travel', '05/24/2016', '7.15'], [u'Lyft', u'Travel', '04/25/2016', '7.15'], [u'Contractor', u'Payroll', '01/28/2016', '7.14'], [u'Lyft', u'Travel', '05/09/2016', '7.13'], [u'Lyft', u'Travel', '06/17/2016', '7.05'], [u'French Toast', u'Payroll', '09/28/2016', '7.03'], [u'Snap Kitchen', u'Food and Entertainment', '10/21/2016', '7.01'], [u'La Colombe', u'Food and Entertainment', '04/27/2016', '7'], [u'La Colombe', u'Food and Entertainment', '05/13/2016', '7'], [u'La Colombe', u'Food and Entertainment', '12/08/2016', '7'], [u'La Colombe', u'Food and Entertainment', '09/15/2016', '7'], [u'Acme', u'Office and Kitchen Supplies', '03/17/2016', '7'], [u'Snap Kitchen', u'Food and Entertainment', '12/12/2016', '6.99'], [u'Uber', u'Travel', '12/01/2016', '6.97'], [u'Uber', u'Travel', '10/25/2016', '6.97'], [u'Uber', u'Travel', '04/25/2016', '6.97'], [u'Uber', u'Travel', '03/14/2016', '6.96'], [u'Uber', u'Travel', '03/30/2016', '6.94'], [u'Uber', u'Travel', '10/31/2016', '6.90'], [u'Uber', u'Travel', '10/31/2016', '6.90'], [u'Uber', u'Travel', '10/31/2016', '6.90'], [u'Uber', u'Travel', '11/14/2016', '6.88'], [u'Uber', u'Travel', '09/06/2016', '6.86'], [u'Uber', u'Travel', '10/25/2016', '6.86'], [u'Uber', u'Travel', '04/25/2016', '6.85'], [u'Uber', u'Travel', '12/06/2016', '6.85'], [u'Uber', u'Travel', '03/08/2016', '6.84'], [u'Uber', u'Travel', '04/04/2016', '6.84'], [u'Uber', u'Travel', '09/23/2016', '6.83'], [u'Uber', u'Travel', '12/05/2016', '6.80'], [u'Uber', u'Travel', '02/01/2016', '6.78'], [u'Uber', u'Travel', '09/23/2016', '6.76'], [u'Uber', u'Travel', '05/04/2016', '6.75'], [u'Uber', u'Travel', '12/09/2016', '6.72'], [u'Uber', u'Travel', '12/08/2016', '6.70'], [u'Uber', u'Travel', '08/01/2016', '6.69'], [u'Uber', u'Travel', '07/07/2016', '6.68'], [u'Amazon', u'Office and Kitchen Supplies', '02/01/2016', '6.68'], [u'Uber', u'Travel', '12/01/2016', '6.68'], [u'Uber', u'Travel', '08/24/2016', '6.67'], [u'Uber', u'Travel', '05/04/2016', '6.66'], [u'Uber', u'Travel', '03/11/2016', '6.63'], [u'Uber', u'Travel', '11/02/2016', '6.61'], [u'Uber', u'Travel', '12/06/2016', '6.58'], [u'FEDEXOFFICE', u'Other', '04/19/2016', '6.58'], [u'Uber', u'Travel', '10/27/2016', '6.57'], [u'Uber', u'Travel', '06/20/2016', '6.55'], [u'Uber', u'Travel', '08/15/2016', '6.55'], [u'Uber', u'Travel', '03/08/2016', '6.54'], [u'Uber', u'Travel', '10/06/2016', '6.51'], [u'Uber', u'Travel', '08/24/2016', '6.50'], [u'Other', u'Food and Entertainment', '06/27/2016', '6.48'], [u'City Fitness', u'Food and Entertainment', '08/23/2016', '6.47'], [u'Acme', u'Office and Kitchen Supplies', '05/16/2016', '6.47'], [u'City Fitness', u'Other', '11/10/2016', '6.47'], [u'Uber', u'Travel', '03/08/2016', '6.47'], [u'Uber', u'Travel', '03/16/2016', '6.47'], [u'Uber', u'Travel', '03/07/2016', '6.45'], [u'Uber', u'Travel', '02/16/2016', '6.45'], [u'Uber', u'Travel', '08/18/2016', '6.43'], [u'Uber', u'Travel', '12/15/2016', '6.41'], [u'Uber', u'Travel', '12/09/2016', '6.41'], [u'Uber', u'Travel', '05/02/2016', '6.40'], [u'Uber', u'Travel', '08/18/2016', '6.38'], [u'Uber', u'Travel', '04/13/2016', '6.33'], [u'Uber', u'Travel', '02/23/2016', '6.30'], [u'Uber', u'Travel', '04/08/2016', '6.30'], [u'Uber', u'Travel', '03/25/2016', '6.30'], [u'Acme', u'Office and Kitchen Supplies', '02/05/2016', '6.28'], [u'Uber', u'Travel', '10/25/2016', '6.23'], [u'Uber', u'Travel', '02/01/2016', '6.22'], [u'Other', u'Food and Entertainment', '06/27/2016', '6.21'], [u'Uber', u'Travel', '02/16/2016', '6.19'], [u'Uber', u'Travel', '07/22/2016', '6.19'], [u'Uber', u'Travel', '05/04/2016', '6.15'], [u'Uber', u'Travel', '10/25/2016', '6.11'], [u'Uber', u'Travel', '08/01/2016', '6.10'], [u'Other', u'Office and Kitchen Supplies', '06/17/2016', '6.10'], [u'Uber', u'Travel', '05/04/2016', '6.09'], [u'Lyft', u'Travel', '05/04/2016', '6.05'], [u'Uber', u'Travel', '11/18/2016', '6.03'], [u'La Colombe', u'Food and Entertainment', '07/18/2016', '6'], [u'La Colombe', u'Food and Entertainment', '08/08/2016', '6'], [u'Coffee', u'Food and Entertainment', '05/05/2016', '6'], [u'Acme', u'Office and Kitchen Supplies', '02/08/2016', '5.99'], [u'Uber', u'Travel', '04/29/2016', '5.94'], [u'Snap Kitchen', u'Food and Entertainment', '08/26/2016', '5.93'], [u'Amazon', u'Office and Kitchen Supplies', '09/29/2016', '5.88'], [u'Uber', u'Travel', '08/29/2016', '5.84'], [u'Uber', u'Travel', '11/30/2016', '5.83'], [u'Uber', u'Travel', '04/25/2016', '5.83'], [u'Uber', u'Travel', '09/07/2016', '5.78'], [u'Uber', u'Travel', '10/27/2016', '5.78'], [u'Uber', u'Travel', '03/16/2016', '5.76'], [u'Uber', u'Travel', '07/05/2016', '5.75'], [u'Uber', u'Travel', '11/18/2016', '5.75'], [u'Uber', u'Travel', '11/14/2016', '5.75'], [u'Other', u'Other', '11/14/2016', '5.75'], [u'Uber', u'Travel', '08/25/2016', '5.75'], [u'Uber', u'Travel', '11/02/2016', '5.75'], [u'Coffee', u'Food and Entertainment', '06/30/2016', '5.75'], [u'Uber', u'Travel', '09/23/2016', '5.75'], [u'Uber', u'Travel', '10/24/2016', '5.75'], [u'Uber', u'Travel', '08/25/2016', '5.75'], [u'Uber', u'Travel', '08/15/2016', '5.75'], [u'Uber', u'Travel', '10/11/2016', '5.75'], [u'Uber', u'Travel', '09/30/2016', '5.75'], [u'Uber', u'Travel', '10/06/2016', '5.75'], [u'Uber', u'Travel', '01/04/2016', '5.69'], [u'Uber', u'Travel', '05/16/2016', '5.67'], [u'Uber', u'Travel', '09/07/2016', '5.67'], [u'Uber', u'Travel', '09/06/2016', '5.67'], [u'Uber', u'Travel', '05/23/2016', '5.58'], [u'Uber', u'Travel', '01/04/2016', '5.54'], [u'Coffee', u'Food and Entertainment', '06/08/2016', '5.53'], [u'Coffee', u'Food and Entertainment', '03/11/2016', '5.50'], [u'Uber', u'Travel', '04/25/2016', '5.50'], [u'Coffee', u'Food and Entertainment', '12/05/2016', '5.50'], [u'Lyft', u'Travel', '05/06/2016', '5.50'], [u'Uber', u'Travel', '04/04/2016', '5.48'], [u'DESANO', u'Food and Entertainment', '04/26/2016', '5.45'], [u'Other', u'Food and Entertainment', '04/25/2016', '5.45'], [u'Uber', u'Travel', '04/29/2016', '5.44'], [u'Uber', u'Travel', '03/18/2016', '5.44'], [u'Contractor', u'Payroll', '10/20/2016', '5.40'], [u'VideoSmith', u'Office and Kitchen Supplies', '03/24/2016', '5.40'], [u'Uber', u'Travel', '09/07/2016', '5.39'], [u'Amazon', u'Office and Kitchen Supplies', '08/29/2016', '5.29'], [u'Uber', u'Travel', '02/17/2016', '5.25'], [u'Uber', u'Travel', '01/21/2016', '5.25'], [u'Uber', u'Travel', '05/24/2016', '5.25'], [u'Uber', u'Travel', '04/21/2016', '5.25'], [u'Uber', u'Travel', '04/28/2016', '5.25'], [u'Uber', u'Travel', '01/20/2016', '5.25'], [u'Uber', u'Travel', '12/13/2016', '5.25'], [u'Uber', u'Travel', '01/21/2016', '5.25'], [u'Uber', u'Travel', '02/10/2016', '5.25'], [u'La Colombe', u'Food and Entertainment', '07/28/2016', '5.25'], [u'Uber', u'Travel', '05/04/2016', '5.25'], [u'Coffee', u'Food and Entertainment', '01/25/2016', '5.20'], [u'Uber', u'Travel', '09/16/2016', '5.19'], [u'Uber', u'Travel', '10/17/2016', '5.17'], [u'Uber', u'Travel', '09/06/2016', '5.15'], [u'Uber', u'Travel', '08/25/2016', '5.15'], [u'Uber', u'Travel', '04/25/2016', '5.08'], [u'Uber', u'Travel', '08/15/2016', '5'], [u'SAMPAN DOUBLE KNOT', u'Food and Entertainment', '10/17/2016', '5'], [u'Uber', u'Travel', '04/06/2016', '5'], [u'Uber', u'Travel', '07/11/2016', '5'], [u'Uber', u'Travel', '05/04/2016', '5'], [u'Parking', u'Travel', '06/09/2016', '5'], [u'Uber', u'Travel', '08/26/2016', '5'], [u'Parking', u'Travel', '04/22/2016', '5'], [u'Uber', u'Travel', '02/01/2016', '5'], [u'Uber', u'Travel', '09/06/2016', '5'], [u'Coffee', u'Food and Entertainment', '10/03/2016', '5'], [u'Amazon', u'Office and Kitchen Supplies', '02/12/2016', '4.99'], [u'Other', u'Travel', '06/20/2016', '4.97'], [u'Uber', u'Travel', '04/25/2016', '4.87'], [u'Uber', u'Travel', '11/29/2016', '4.76'], [u'Uber', u'Travel', '04/25/2016', '4.65'], [u'Uber', u'Travel', '04/25/2016', '4.65'], [u'Uber', u'Travel', '04/25/2016', '4.65'], [u'Uber', u'Travel', '04/22/2016', '4.65'], [u'Uber', u'Travel', '04/25/2016', '4.65'], [u'Uber', u'Travel', '08/29/2016', '4.64'], [u'Other', u'Food and Entertainment', '04/18/2016', '4.50'], [u'Uber', u'Travel', '09/16/2016', '4.49'], [u'Other', u'Office and Kitchen Supplies', '03/07/2016', '4.28'], [u'Uber', u'Travel', '03/14/2016', '4.27'], [u'Parking', u'Travel', '08/25/2016', '4.25'], [u'Coffee', u'Food and Entertainment', '06/20/2016', '4.24'], [u'Amazon', u'Office and Kitchen Supplies', '11/07/2016', '4.23'], [u'Amazon', u'Office and Kitchen Supplies', '09/26/2016', '4.23'], [u'FEDEXOFFICE', u'Travel', '10/31/2016', '4.07'], [u'Uber', u'Travel', '08/19/2016', '4.03'], [u'Parking', u'Travel', '02/01/2016', '4'], [u'7-ELEVEN', u'Food and Entertainment', '03/14/2016', '3.90'], [u'7-ELEVEN', u'Food and Entertainment', '06/07/2016', '3.90'], [u'7-ELEVEN', u'Food and Entertainment', '04/26/2016', '3.90'], [u'United Airlines', u'Food and Entertainment', '08/22/2016', '3.75'], [u'Uber', u'Travel', '09/23/2016', '3.74'], [u'Uber', u'Travel', '02/16/2016', '3.70'], [u'Uber', u'Travel', '05/04/2016', '3.70'], [u'La Colombe', u'Food and Entertainment', '06/27/2016', '3.50'], [u'Acme', u'Office and Kitchen Supplies', '03/18/2016', '3.49'], [u'Other', u'Other', '03/15/2016', '3.39'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/24/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/24/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/17/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '09/09/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/17/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/03/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '09/09/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/17/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/24/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '11/21/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/24/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/17/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/17/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/17/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '09/28/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '3.17'], [u'Uber', u'Travel', '09/23/2016', '3.13'], [u'Acme', u'Office and Kitchen Supplies', '12/07/2016', '3.01'], [u'Staples', u'Office and Kitchen Supplies', '10/11/2016', '3.01'], [u'Parking', u'Travel', '06/09/2016', '3'], [u'Johnny Brenda', u'Other', '08/15/2016', '3'], [u'Parking', u'Payroll', '05/20/2016', '3'], [u'Acme', u'Office and Kitchen Supplies', '06/07/2016', '2.99'], [u'Sotavento', u'Other', '07/11/2016', '2.98'], [u'Uber', u'Travel', '08/22/2016', '2.95'], [u'Uber', u'Travel', '10/17/2016', '2.87'], [u'City Fitness', u'Payroll', '06/17/2016', '2.87'], [u'Uber', u'Travel', '09/26/2016', '2.87'], [u'Amazon', u'Office and Kitchen Supplies', '05/13/2016', '2.81'], [u'Amazon', u'Office and Kitchen Supplies', '05/12/2016', '2.80'], [u'LA FITORA', u'Other', '07/11/2016', '2.78'], [u'USPS', u'Office and Kitchen Supplies', '10/14/2016', '2.19'], [u'B&B Department Stores', u'Food and Entertainment', '06/07/2016', '2.13'], [u'Uber', u'Travel', '03/11/2016', '2'], [u'Acme', u'Office and Kitchen Supplies', '06/07/2016', '1.81'], [u'FEDEXOFFICE', u'Other', '04/27/2016', '1.72'], [u'Other', u'Other', '07/11/2016', '1.66'], [u'Other', u'Other', '09/07/2016', '1'], [u'Other', u'Other', '07/15/2016', '0.88'], [u'Uber', u'Travel', '05/20/2016', '0.86'], [u'Instacart', u'Office and Kitchen Supplies', '10/26/2016', '0.80'], [u'FEDEXOFFICE', u'Other', '04/14/2016', '0.75'], [u'Other', u'Other', '07/18/2016', '0.66'], [u'Other', u'Other', '07/18/2016', '0.51'], [u'Other', u'Other', '12/09/2016', '0.50'], [u'Other', u'Other', '11/09/2016', '0.50'], [u'Other', u'Other', '07/18/2016', '0.50'], [u'Other', u'Other', '10/11/2016', '0.50'], [u'Other', u'Other', '09/08/2016', '0.50'], [u'Uber', u'Travel', '10/28/2016', '0'], [u'Contractor', u'Other', '02/05/2016', '0'], [u'Amazon', u'Office and Kitchen Supplies', '10/20/2016', '0'], [u'Amazon', u'Office and Kitchen Supplies', '09/15/2016', '0'], [u'Amazon', u'Office and Kitchen Supplies', '09/15/2016', '0'], [u'TUMI STORES', u'Other', '09/12/2016', '0'], ['Total', '', '', '709,875.94']]
        surrounding_html = """<td valign="top" width="100.0%" style="padding:3%;background-color:#f9f9f9;border:1px solid #dddddd;border-top:0;border-radius:0 0 4px 4px"><table width="100.0%">{}</table></td>"""
        header_html = self.html_metrics_table_header(list_of_lists[0])
        body_html = self.html_metrics_table_rows(list_of_lists[1:])
        html_section = surrounding_html.format(header_html+body_html)
        return html_section




    def html_hubspot_row(self,item_name,item_description,item_metrics_array=[{'metric_name':'Page Views','metric_value':1000,'metric_link':'https://www.google.com/'}],image_source=None):
        #PerformanceFunctions().input_print(item_name,item_description,item_metrics_array)

        table_row_style = """<tr style="padding-top:10px;width:100%">{}</tr>"""
        table_column_name = """<td align="left" style="width:38%"><span align="left" style="font-family:&#39;Helvetica Neue&#39;,Helvetica,sans-serif;color:#5c5c5c;font-weight:bold;font-size:16px">{}</span><br><span align="left" style="font-family:&#39;Helvetica Neue&#39;,Helvetica,sans-serif;color:#5c5c5d;font-size:14px">{}</span></td>""".format(item_name,item_description)

        row_html = table_column_name
        if item_metrics_array:
            item_metric_column = """<td align="center" style="font-family:&#39;Helvetica Neue&#39;,Helvetica,sans-serif;color:#5c5c5d;font-size:16px;width:25%"><a href="{}"style="font-family:&#39;Helvetica Neue&#39;,Helvetica,sans-serif;color:#238fcc;font-size:22px;text-decoration:none" target="_blank" data-saferedirecturl="{}">{}</a><br> <span style="font-size:11px;color:#9ba4a7;padding-left:5px;text-transform:uppercase">{}</span> </td>"""
            item_metric_column_list = [item_metric_column.format(D['metric_link'],D['metric_link'],D['metric_value'],D['metric_name']) for D in item_metrics_array]
            item_metric_columns = ''.join(item_metric_column_list)
            row_html = row_html + item_metric_columns

        if image_source:
            table_row_image = """<td align="left" style="width:12%"><img src="{}" width="50" height="50" style="width:100%;max-height:50px;max-width:50px"></td> """.format(image_source)
            row_html = table_row_image + row_html
        table_row = table_row_style.format(row_html)
        return table_row


    def html_hubspot_list_table(self,item_array=[{'item_name':'3D SKY COMPANY, INC.','item_description':'ENT|Europe','item_metrics':[{'metric_name':'Page Views','metric_value':1000,'metric_link':'https://www.google.com/'},{'metric_name':'UNIQUE VISITORS','metric_value':5000000,'metric_link':'https://www.google.com/'}]}]):
        table_style = """<table valign="middle" style="padding:0;width:100%"><tbody>{}</tbody></table>"""
        #item_dict['item_metrics'],image_source='./Curalate, Inc. Mail - You have new prospects on curalate.com_files/lF615_uXVk00D46r6-mXb-IUCywTFYkcH0Mc6REPCFy_n3oYmWzD9ouLLTSofhhU4QiD_f6FCXWz_rZEUCT6ax8ZtwuLzcD_zwDIWuAzriB3yOhedttOTt8VKbRtJqnvusxCtcxjs9IN=s0-d-e1-ft'
        table_rows = [self.html_hubspot_row(item_dict['item_name'],item_dict['item_description'],item_metrics_array=item_dict['item_metrics_array'],image_source=item_dict['image_source_link']) for item_dict in item_array]
        table_rows_joined = ''.join(table_rows)
        html_table = table_style.format(table_rows_joined)
        return html_table

class HTMLFunctions(HTMLRowTable):
    pass

def main():
    print HTMLFunctions().metric_color_code_based_new_old_value(60,70)

if __name__ == "__main__": main()


#image_functions.py

#from pytesseract import image_to_string
from PIL import Image
import StringIO
from io import BytesIO

# im = Image.open(f)
# im.load()
# im.split()
# print(im)
#
# print(image_to_string(im))

# 688

class MyError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

class ImageFunctionsV2(object):
    def white_find_from_rg(self,rgb_img,x_center,y_center,range_length=2000,type='right'):
        l = range(range_length)
        if type == 'right' or type == 'lower':
            l.reverse()

        if type == 'right' or type == 'left':
            pixel_pull_func = lambda i: rgb_img.getpixel((i, y_center))[0]

        elif type == 'upper' or type == 'lower':
            pixel_pull_func = lambda i: rgb_img.getpixel((x_center, i))[0]

        for i in l:
            try:
                browser_pixel_value = pixel_pull_func(i)
                if 250 <= float(browser_pixel_value) < 300:
                    print "\t{}, pixel_value:{},{}".format(type,str(i),str(browser_pixel_value))
                    return i
            except:
                pass
        raise MyError('White Was not found') # it shouldnt get up to this point

    def box_determine(self,rgb_img,x_center,y_center):
        # defaults to the image size
        left = self.white_find_from_rg(rgb_img,x_center,y_center,type='left')
        upper = self.white_find_from_rg(rgb_img,x_center,y_center,type='upper')
        right = self.white_find_from_rg(rgb_img,x_center,y_center,type='right')
        lower = self.white_find_from_rg(rgb_img,x_center,y_center,type='lower')

        # left = 0
        # upper = 0
        # right = x_center * 2
        # lower = y_center *2

        # l = range(2000)
        # for i in l:
        #     try:
        #         browser_pixel_value = rgb_img.getpixel((i, y_center))[0]
        #         if 250 <= float(browser_pixel_value) < 300:
        #             print "\tright, pixel_value:{},{}".format(str(i),str(browser_pixel_value))
        #             right = i
        #     except:
        #         pass
        # for i in l:
        #     try:
        #         browser_pixel_value = rgb_img.getpixel((x_center,i))[0]
        #         if 250 <= float(browser_pixel_value) < 300:
        #             print "\tlower, pixel_value:{},{}".format(str(i),str(browser_pixel_value))
        #             lower = i
        #     except:
        #         pass
        # l.reverse()
        # for i in l:
        #     try:
        #         browser_pixel_value = rgb_img.getpixel((i, y_center))[0]
        #         if 250 <= float(browser_pixel_value) < 300:
        #             print "\tleft, pixel_value:{},{}".format(str(i),str(browser_pixel_value))
        #             left = i
        #     except:
        #         pass
        # for i in l:
        #     try:
        #         browser_pixel_value = rgb_img.getpixel((x_center,i))[0]
        #         if 250 <= float(browser_pixel_value) < 300:
        #             print "\tupper, pixel_value:{},{}".format(str(i),str(browser_pixel_value))
        #             upper = i
        #     except:
        #         pass

        print "<border_determine>, image_functions.py"
        print "\t left,upper,right,lower: {},{},{},{}".format(str(left),str(upper),str(right),str(lower))
        return left,upper,right,lower

    def blank_test(self,rgb_img,x_center):
        l = range(2000)
        L = []
        for i in l:
            try:
                browser_pixel_value = rgb_img.getpixel((x_center, i))[0]
                L.append(browser_pixel_value)
            except:
                pass
        # print rgb_img
        # print x_center
        # print L
        if list(set(L)) == [255] or L == []:
            raise MyError('FAILED BLANK TEST')
        else:
            pass

    def image_crop(self,img):
        print "<image_crop>, image_functions.py"
        width,height = img.size
        x_center = width/2
        y_center = height/2
        #1024, 477
        print "\twidth,height,x_center,y_center: {},{},{},{}".format(str(width),str(height),str(x_center),str(y_center))
        rgb_im = img.convert('RGB')
        self.blank_test(rgb_im,x_center)
        box = self.box_determine(rgb_im,x_center,y_center)
        img = img.crop(box)
        return img

    def binary_image_smart_crop(self,png):
        img = Image.open(StringIO.StringIO(png))
        img = self.image_crop(img)
        output = BytesIO()
        img.save(output, format='png')
        hex_data = output.getvalue()
        return hex_data


class ImageFunctions(ImageFunctionsV2):
    def maximum_height_width(self,img,width_or_height='width'):
        rgb_im = img.convert('RGB')
        l = range(2000)
        l.reverse()
        for i in l:
            try:
                if width_or_height == 'width':
                    rgb_im.getpixel((i, 0))[0]
                    return i
                elif width_or_height == 'height':
                    rgb_im.getpixel((0, i))[0]
                    return i
            except:
                pass

    def binary_image_crop(self,png,format='png',x=0,y=0,width=100,height=100):
        img = Image.open(StringIO.StringIO(png))
        img = img.crop((x, y, width, height))
        output = BytesIO()
        img.save(output, format=format)
        hex_data = output.getvalue()
        return hex_data


    def x_axis_pixels(self,img,center):
        rgb_im = img.convert('RGB')
        l = range(2000)
        Pixels = []
        for i in l:
            try:
                browser_pixel_value = rgb_im.getpixel((i+1, center))[0]
                Pixels.append(browser_pixel_value)
            except IndexError:
                pass
        print "x_axis_pixels"
        print "\t{}".format(str(Pixels))
        return Pixels

    def x_axis_determine_border_length(self,img,center,pixel_value=255,reverse=False):
        rgb_im = img.convert('RGB')
        l = range(2000)
        if reverse:
            print "reversing"
            l.reverse()

        #in the case that the below doesnt return a left value, apend all teh values of the pixel that are being
        Pixels = []
        for i in l:
            try:
                browser_pixel_value = rgb_im.getpixel((i+1, center))[0]
                print "<x_axis_determine_border_length>"
                print "\tpixel: {}".format(str(browser_pixel_value))
                Pixels.append(browser_pixel_value)
                #print "<x_axis_determine_border_length>"
                #print "\tbrowser_pixel_value: {}".format(str(browser_pixel_value))
                if 230 <= float(browser_pixel_value) < 300:

                    print "\tpixel_result: {}".format(str(i + 1))
                    return i + 1
                else:
                    pass
            except IndexError:
                pass
        print "Pixel Values: {}".format(str(Pixels))
    def lower_from_img(self,img,center,pixel_value=255,reverse=True):
        rgb_im = img.convert('RGB')
        l = range(2000)
        if reverse:
            l.reverse()
        for i in l:
            try:
                browser_pixel_value = rgb_im.getpixel((center, i))[0]
                if 230 <= float(browser_pixel_value) < 300:
                    return i
                else:
                    pass
            except:
                pass



    # x is the piz
    #left, upper, right, and lower
    def binary_image_smart_crop_v1(self,png,format='png',x_pixel_value=255,upper=0):
        print "<binary_image_smart_crop>, image_functions.py"
        print "\tpng file: {}".format(str(png))
        img = Image.open(StringIO.StringIO(png))
        width = self.maximum_height_width(img,width_or_height='width')

        x_axis_pixels = self.x_axis_pixels(img,width/2)
        #print "\tx_axis_pixels: {}".format(str(x_axis_pixels))

        if list(set(x_axis_pixels)) == [255] or x_axis_pixels == []:
            print "Rerun because image must be all white"
            return "rerun"


        #height = self.maximum_height_width(img,width_or_height='height')


        left = self.x_axis_determine_border_length(img,width/2,pixel_value=x_pixel_value)
        print "\tleft: {}".format(str(left))
        right = self.x_axis_determine_border_length(img,width/2,pixel_value=x_pixel_value,reverse=True)
        print "\tright: {}".format(str(right))

        center = ((right - left)/2) + left
        lower = self.lower_from_img(img,center)
        upper = self.lower_from_img(img,center,reverse=False)
        print "\tleft,right,upper,lower: {},{},{},{}".format(str(left),str(right),str(upper),str(lower))

        img = img.crop((left, upper, right, lower))
        output = BytesIO()
        img.save(output, format=format)
        hex_data = output.getvalue()
        return hex_data


# img = Image.open(f)
# img.load()
# img.split()
#
# print img


#print(pytesseract.image_to_string(img))

#list_functions.py

# from Shippy.Functions.list_functions import ListFunctions
import itertools
from operator import itemgetter, attrgetter
from itertools import chain, groupby, product
from operator import itemgetter
import operator
#from pandas import Series #switched the order
#import pandas as pd
#import nltk
from itertools import chain, groupby
from operator import itemgetter
from collections import Counter
import re
import ast

import HTML


class ListMatch(object):
    def list_percentage_match_return(sef, l1, l2):
        l = [i for i in l1 if i in l2]
        v = float(len(l)) / float(len(l1))
        return v


class ListManipulate(ListMatch):
    #it takes in the lhe sublist
    #assumes the name desired is first item
    #removes the last item
    def link_create(self, lst, link="https://na2.salesforce.com/"):
        name = lst[0]
        link = link + lst[-1:][0]
        lst[0] = HTML.link(name, link)
        lst = lst[:-1]
        return lst

    #i are the headers
    def list_link_create(self, l, Headers=False, link="https://na2.salesforce.com/"):
        func = lambda i: self.link_create(i, link=link)
        if Headers:
            Headers = l[0]
            l = map(func, l[1:])
            Headers = [Headers[:-1]]
            Headers.extend(l)
            l = Headers
        else:
            l = map(func, l)
        return l


    #convert to float, but remove commas in case
    def float_convert(self, val):
        try:
            val = val.replace(",", "")
            return float(val)
        except AttributeError:
            try:
                return float(val)
            except TypeError:
                return 0
        except ValueError:
            return 0
        except TypeError:
            return 0

    #Append Total to list of lists
    #input is [['','titlea','titleb'],['headerrow','32,100','41,000'],['headerrow','32,100','41,000']]
    #needs to combine only what is together
    #Enumerates through the first list, to be able to go through each one of the indices
    #make sure to convert total back to correct style
    #exclusion keys just make sure not to add a certain field
    def append_total(self, lst, exclusion_keys=['Commission Percentage']):
        Lst = []
        for i, indice in enumerate(lst[0]):
            vals = [self.float_convert(subli[i]) for subli in lst]
            val = str(sum(vals))
            Lst.append(val)
        Func = lambda val: '' if val == 0 else "{:,}".format(int(float(val)))  #replaces 0 with blank otherwise the same
        Lst = map(Func, Lst)
        #Lst.insert(0,"Total")
        Lst[0] = "Total"
        Lst = [i if i not in exclusion_keys else '' for i in Lst]
        lst.append(Lst)
        return lst


    def list_reordered(self, lst, HeaderOrder):
        IndiceList = [lst[0].index(Header) for Header in HeaderOrder]
        Func = lambda subli: [subli[indice] for indice in IndiceList]
        lst = map(Func, lst)
        return lst


class ListDedupe(ListManipulate):
    #dedupes one list by another list
    def list_by_list_dedupe(self, l1, l2, k):
        l2 = "|".join(list(set(map(lambda D: D[k], l2))))
        l = filter(lambda D: not re.search(l2, D[k]), l1)
        return l


"""
The original purpose is to apply a function to a list,
when the function can only consume bits of the list at a time
"""


class FunctionListApply(ListDedupe):
    #Apply the function to parts of the list at a time
    #need to know the size of the chunks and the number of chunks
    def list_func_by_chunks(self, l, func, size=10, n=10):
        l = [map(func, l[i * size:(i * size) + size]) for i in range(n)]
        l = [item for sublist in l for item in sublist]  #flatten it back out
        return l


class ListHeaderStringPull(FunctionListApply):
    #checks if string in index 0 of any list
    def string_index_check(self, l, i, index=0):
        if i in [subli[index] for subli in l]:  #Bool = re.search(i,str([subli[0] for subli in l]))
            return True
        else:
            return False

        #returns the headers to serve gspread api

    def headers_string_triangulate(self, l, i):
        if self.string_index_check(l, i):
            v = self.row_header_string_triangulate(l, i)
            l = l[v]
        else:
            l = self.col_header_string_triangulate(l, i)
        return l

    #pulls the sublist from l that is above i, but directly below a blank
    def row_header_string_triangulate(self, l, i):
        L = [subli[0] for subli in l]
        row_difference = L[:L.index(i)]
        row_difference.reverse()
        row_difference = row_difference.index('')
        v = L.index(i) - row_difference
        return v

    #Pulls indices across sublists that are below i and above blank
    def col_header_string_triangulate(self, l, i, index=0):
        v = self.list_index_item_find(l, i)
        L = [subli[index] for subli in l][v + 1:]
        try:
            L = L[:L.index("")]
        except ValueError:  #only happens if there is no blank coming after
            pass
        return L

    #used to be called list_triangulate_string
    def values_string_triangulate(self, l, i):
        v = self.list_index_item_find(l, i)

        if self.string_index_check(l, i):
            l = l[v]
        else:
            #l = [v:len(self.col_header_string_triangulate(l,i)) + 1]
            column_index = l[v].index(i)
            l = [subli[column_index] for subli in l]
            l = l[v:]  #take only the list after v

        #Find the sublists range
        #Find the item within the sublists
        return l


    #This method gets the cell range of the list
    #so we know where it is in gspread
    #used by gspread_class_update
    def list_cell_range_triangulate(self,
                                    l,
                                    i,
                                    values,
                                    func=None,
                                    row_offset=0):

        v = self.list_index_item_find(l, i)  #get the sublist index of i within the list of lists

        if self.string_index_check(l, i):
            #print "values (" + str(values) + ") have length of " + str(len(values)) + " (list_functions.py)"
            s = "B" + str(v + 1) + ":" + func(len(values) + 1) + str(v + 1)  #has to be B so not to relace first column
        else:  #The letter stays the same, but row changes
            col = func(l[v].index(i) + 1)  #Find the column
            s = col + str(v + 2 + row_offset) + ":" + col + str(
                v + len(values) + 1 + row_offset)  #the plus 2 is where i would put the column offset

        return s


    #find the index of which sublist the item is in
    #return the index of that item
    def list_index_item_find(self, l, i):
        for iterator, subli in enumerate(l):
            if i in subli:
                return iterator


class ListCSVFormat(ListHeaderStringPull):
    def quotations_counter(self, val):
        try:
            regex = '.*\"(.*?)\".*'
            matches = re.search(regex, val)
            return matches.group(1)
        except AttributeError:
            return val  #if no parenthesis

    #Given a list of sublists, what's the best way to get rid of sublists that have empties in them
    def list_convert_format(self, l, ColumnSet=None):
        l = [s for s in l if s != []]  # remove empty rows

        # for s in l: #stupid 0s - needs to be used for next formula
        # 	s[0] = s[0].replace(",0,",",\"0\",")
        # #the freaking numbers have quotes but they do have quotations around them
        # Func = lambda s: [s[0].replace(self.QuotationsCounter(s[0]),self.QuotationsCounter(s[0]).replace(",",""))]
        # l = map(Func,l)

        l = map(lambda s: s[0].split(","), l)  #take strings and divide into sublists
        #each list should be same length now so just save first
        if ColumnSet != None:
            Length = ColumnSet
        else:
            Length = len(l[0])

        l = map(lambda s: filter(None, s), l)  #shorten sublists
        l = [s for s in l if len(s) == Length]
        return l

    #[['Transaction Date', 'Description', 'Amount', 'Bank Ref#', 'Customer Ref. #', 'Text'], ['7/1/14', 'ACH CREDIT          ', '500', '12855', '0', 'TIFFANY - 4496 127368 CURALATE INC'],
    #Convert the sublist into a proper format
    #Get rid of special characters
    #Get rid of spaces in first sublist
    def special_characters_remove(self, s):
        pattern = re.compile('[\W_]+', re.UNICODE)
        Func = lambda string: str(pattern.sub(' ', string))
        s = map(Func, s)
        return s

    #rid spaces


class TabularStructure(ListCSVFormat):
    #This method creates a table for Brand Strategists
    #based on functions (args)
    #**kw only works when all the function use the same keyword
    def tabular_functions_list(self, l, *args, **kw):
        Func = lambda i: [[i] + [arg(i, **kw)] for arg in args]
        l = map(Func, l)
        return l


    #TOOK OFF FIRST LETTER OF HEADERS BECAUSE USED TO SORT
    def tabular_functions_list_headers(self, l, *args, **kw):
        Func = lambda i: [i] + [arg(i, **kw) for arg in args]
        l = map(Func, l)

        Headers = [''] + map(lambda f: f.__name__.replace("_", " ")[1:], list(args))
        l.insert(0, Headers)
        return l


class ListOrdered(ListCSVFormat):
    #Input List has to have the first sublist as headeres
    #order all items based on inputs of the first sublist
    #pull the index of the headerlist wanted and keep those items in that order
    #Then sort each sublist in that order
    #This does require that all items in the list are of the same order
    def list_ordered(self, lst, HeaderOrder):
        IndiceList = [lst[0].index(Header) for Header in HeaderOrder]
        Func = lambda subli: [subli[indice] for indice in IndiceList]
        lst = map(Func, lst)
        return lst

    def list_reordered_by_first_sublist(self, l):
        HeaderOrder = sorted(l[0])
        l = self.list_ordered(l, HeaderOrder)
        return l

    def list_sort_by_item(self, l, index=0, reverse=True):
        l = sorted(l, key=operator.itemgetter(index), reverse=reverse)
        return l


class ListStructureReformat(ListOrdered):
    def list_to_dictionary(self, l, keys=None):
        D = {key: item for item, key in zip(l, keys)}
        return D

    #this method changes a list of lists into a dictionary
    def list_of_list_to_dictionary(self, l, keys=None):
        if not keys:
            Func = lambda subli: self.list_to_dictionary(subli, l[0])
            l = map(Func, l[1:])
        else:
            Func = lambda subli: self.list_to_dictionary(subli, keys)
            l = map(Func, l)
        return l

    def list_to_dictionary(self, lst, keys=['item1', 'item2', 'item3']):
        return {key: item for item, key in zip(lst, keys)}

    #same as ListToDictonary, except you don't map
    #Also will take in the first sublist by default
    def list_to_dictionary_full(self, lst, keys=None):
        if keys == None:
            Func = lambda subli: self.list_to_dictionary(subli, lst[0])
            lst = map(Func, lst[1:])
        return lst


    def list_flatten(self, l):
        return [item for sublist in l for item in sublist]


    #dedupel list based on a string in index 0
    def list_dedupe_based_on_index(self, Li):
        return [[spl] + li[1:] for li in Li for spl in li[0].split(',')]

    def list_dedupe(self, l):
        l = map(str, l)
        l = list(set(l))
        l = map(lambda s: ast.literal_eval(s), l)
        return l


class ListFunctions(ListStructureReformat):
    def lists_combine(self, *args):
        lst = ["".join(t) for t in product(*args)]
        return lst

    def parse_string_return(self, l, delim):
        func = lambda subli: [i if i != None else '0' for i in subli]
        l = map(func, l)
        l = [i for k in l for i in k if delim in i]
        return l


    def parse_string_return_from_func(self, l, func_condition):
        func = lambda subli: [i if i != None else '0' for i in subli]
        l = map(func, l)
        l = [i for k in l for i in k if func_condition(i)]
        return l


    def chunks_generator(self, l,
                         n):  #http://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python
        '''
        Yield successive n-sized chunks from l.
        '''
        for i in xrange(0, len(l), n):
            yield l[i:i + n]

    def chunk_lst(self, l, n):
        return list(self.chunks_generator(l, n))

    # break the enter list into a certain number of parts
    # as oppose to chunck_lst which breaks it into pieces of that size
    def chunk_list_into_parts(self,l,n):
        n = len(l)/n #e.g. if 100 rows broken up into 2, each needs to be 50
        l = self.chunk_lst(l,n)
        return l

    # Converts every element in a list into a string. If the elemwnt is a sublist also converts every item of the sublist into a string
    def convert_all_to_str(self, lst):
        l = []
        for i in lst:
            if type(i) is list:
                s = []
                for k in i:
                    if k == None:
                        s.append(k)
                    elif type(k) == float or type(k) == int or type(k) == bool:
                        s.append(str(k))
                    else:
                        s.append(str(k.encode('ascii', 'ignore')))
                l.append(s)
            else:
                i = str(i.encode('ascii', 'ignore'))
                l.append(i)
        return l


def main():
    l1 = ['a', 'b', 'c']
    l2 = ['c', 'd', 'e']
    print ListFunctions().list_percentage_match_return(l1, l2)

    return

    l = range(10)
    func = lambda i: i
    l = ListFunctions().list_func_by_chunks(l, func, size=2, n=10)

    print l
    return l

    l = [['', '', '', ''], ['AA', 'BB', 'CC', 'DD'], ['I', 'II', 'III', 'IV'], ['W', 'X', 'Y', 'Z'], ['', '', '', ''],
         ['aa', 'bb', 'cc', 'dd'], ['a', 'b', 'c', 'd'], ['', '', '', ''], ['1', '2', '3', '4'], ['A', 'B', 'C', 'D'],
         ['Uno', 'Dos', 'Tres', 'Cuatro']]
    i = 'B'
    l = ListFunctions().col_header_string_return(l, i)
    print l


if __name__ == "__main__": main()




#math_functions.py



class MathFunctions(object):
    def median(self,lst): #http://stackoverflow.com/questions/24101524/finding-median-of-list-in-python
        lst = sorted(lst)
        if len(lst) < 1:
                return None
        if len(lst) %2 == 1:
                return lst[((len(lst)+1)/2)-1]
        else:
                return float(sum(lst[(len(lst)/2)-1:(len(lst)/2)+1]))/2.0
#multi_year_deals_analysis.py

from Shippy.API.gspread_api import GspreadFunctions
from Shippy.API.firebase_api import FirebaseFunctions
from Shippy.API.dropbox_api import DropboxFunctions
import tessera
from Shippy.Functions.csv_functions import CSVFunctions
from Shippy.Functions.text_functions import TextFunctions
from Shippy.Functions.dictionary_functions import DictionaryFunctions
from Shippy.Functions.pickle_functions import PickleFunctions
from Shippy.API.salesforce_api import Update, Query
from bs4 import BeautifulSoup
from Shippy.Functions.time_functions import TimeFunctions
from Shippy.API.mandrill_api import MandrillEmail
import HTML
import requests
from Shippy.API.iron_api import IronFunctions
from Shippy.API.iron_mq_api import IronMQFunctions
import time
from Shippy.API.bamboo_api import BambooFunctions
from Shippy.API.bill_api import BillFunctions
from Shippy.API.selenium_scrape import ScrapeFunctions
from Shippy.API.expensify_api import ExpensifyFunctions
from Shippy.Components.api_components import APIComponents
from Shippy.Components.function_components import FunctionComponents
from Shippy.Functions.file_functions import FileFunctions
from Shippy.API.slack_api import SlackFunctions
from Shippy.API.requests_scrape import RequestsFunctions
from Shippy.Functions.performance_functions import PerformanceFunctions

# correlation between mrr and length of contract
# Gspread of Analysis: https://docs.google.com/document/d/1cBPujaMAOgZFbhijNVsj_Y4DsbCmQDvJP0A3qQvN2ds/edit#

class MultiYearAnalysis(object):
    def multi_year_contracts(self):
        l = APIComponents().clients_by_account(query="select Age__c,account_manager__r.name,brand_strategist__r.name,owner.name,name,closedate,Number_of_Brands__c,amount,accountid,account.name,account.Product_Names__c,mrr__c,id,type,contract_end_date__c from opportunity where stagename ='Closed Won' and isdeleted = False and contract_days__c >= 730 and otf__c = False")
        PerformanceFunctions().code_summary_print(l)
        APIComponents().data_push(l,'multi_year_contracts')


    def non_multi_year_contracts(self):
        l = APIComponents().clients_by_account(query="select Age__c,name,closedate,Number_of_Brands__c,amount,accountid,account.name,account.Product_Names__c,mrr__c,id,type,contract_end_date__c from opportunity where contract_end_date__c >= today and stagename ='Closed Won' and isdeleted = False and contract_days__c < 730 and otf__c = False")
        PerformanceFunctions().code_summary_print(l)
        APIComponents().data_push(l,'multi_year_contracts_non')

# What percentage of new business bookings did we close of last year?
MultiYearAnalysis().multi_year_contracts()
MultiYearAnalysis().non_multi_year_contracts()
#number_functions.py

# from Shippy.Functions.number_functions import NumberFunctions

import locale
#locale.setlocale(locale.LC_ALL, 'en_US')
import re
import dateutil.parser
from datetime import datetime, timedelta, time, date
import datetime


class DateFormat(object):
    def DateChangetoIncludeDayofWeek(self, val):
        val = dateutil.parser.parse(val, ignoretz=True)
        val = val.strftime('%a %m/%d/%Y')
        return val

class CalculationFunctions(object):
    def float_convert_try(self,v):
        try:
            v = float(v)
        except ValueError:
            v = float(v.replace(',',''))
        return v


    def sum_dictionary_list(self,l,key):
        total =  sum(map(lambda D: self.float_convert_try(D[key]),l))
        return total


class Format(CalculationFunctions):
    #percentage and number dont get along because
    #once percentage changes it to 12.0%
    #number wants to take it
    def Percentage(self, val):
        try:
            if float(val) < 1 and float(val) > 0:
                val = "{0:.1%}".format(val)
        except ValueError:
            #print val
            return val
        except TypeError:  #in the case the number coming in doesnt fit the criteria for a number
            #print val
            return val

        #print val
        return val

    def Number(self, number):
        try:
            if type(number) is not list:
                return "{:,}".format(int(number))
            #return locale.format("%d", int(number), grouping = True)
            else:
                return number
        except ValueError:  #happens when it's blank
            if type(number) is not list:
                number = self.No_Value(number)
                return "{:,}".format(int(float(number)))
            else:
                return number
        except AttributeError:
            return "{:,}".format(int(float(str(number))))


    def No_Value(self, number):
        """In cases in which there is no value at the beginning of the month such as for Month Bookings, return a 0"""
        if len(number) == 0:
            return str("0")
        else:
            return number

    def DatefromStandard(self, item):
        item = datetime.datetime.strptime(item, '%Y-%m-%d')
        item = item.strftime('%m/%d/%Y')
        return item

    def NumberConditional(self, val):
        #only if it's a number does it return it, otherwise return the value
        try:
            return self.Number(val)
        except:
            return val

    def SFNumberFormat(self, val):
        try:
            val = val[0][0]
            val = self.Number(val)
            return val
        except TypeError:
            val = self.Number(val)
            return val
        except IndexError:  #Incase it's empty
            return 0


class List(Format):
    def PercentageListFormat(self, lst):

        Func = lambda item: self.Percentage(item) if re.search('0[.]', str(item)) else item
        return [map(Func, subli) for subli in lst]


    #had to add not % in it so it cooperates with percentage list format
    def NumberListFormat(self, lst):

        Func = lambda item: self.Number(item) if re.search('[.]0', str(item)) and not re.search('%',
                                                                                                str(item)) else item
        return [map(Func, subli) for subli in lst]

        return [map(lambda item: self.Number(item) if re.search('[.]0', str(item)) else item, subli) for subli in lst]


    def DateListFormat(self, lst):
        regex = r'\d{4}[-/]\d{2}[-/]\d{2}'
        return [map(lambda item: self.DatefromStandard(item) if re.search(regex, str(item)) else item, subli) for subli
                in lst]


    def NumberFormat(self, lst):
        """if it can be turned into a number then run Number Function"""
        List = []
        try:
            for item in lst:
                item = float(str(item))
                return self.Number(item)
        except ValueError:
            return "value error"

    def NumberSublistFormat(self, lst):
        """if it can be turned into a number then run Number Function"""
        return map(self.NumberConditional, lst)

        return [map(self.NumberConditional, subli) for subli in lst]

        List = []
        for subli in lst:
            for item in subli:
                try:
                    item = float(str(item))
                except ValueError:
                    item = item
            List.append(subli)

        return List


class NumberFunctions(List):
    #percentage needs to go before numberlistformat, since numberlistformat turns .0s to 0
    def DataListFormat(self, lst):
        lst = self.PercentageListFormat(lst)
        lst = self.NumberListFormat(lst)
        lst = self.DateListFormat(lst)

        return lst


def main():
    print Format().Number(32323233)

#lst = [['abc','100.0'],['abc','9999.0'],['abc','']]
#print List().NumberListFormat(lst)


#val = [['23233']]
#print Format().SFNumberFormat(val)


#print Format().NumberConditional("dfd")
# lst = [['dfd', 'dfd', '179806.0', '211688.0'],['dfd', 'dfd', '179806.0', '211688.0']]
# lst = ['adfd','3','32','fdafdff']
# print map(List().NumberSublistFormat,lst)
#print map(Format().Number,lst)
#print Format().Number(32323)


if __name__ == "__main__": main()

#pdf_functions.py

#!/usr/bin/env python
# -*- coding: utf-8 -*-
# https://pypi.python.org/pypi/pdfkit
# https://pypi.python.org/pypi/pyPdf/1.13
# http://pybrary.net/pyPdf/
#from pyPdf import PdfFileWriter, PdfFileReader #http://pybrary.net/pyPdf/

import pdfkit
from StringIO import StringIO
import cStringIO
from Shippy.Functions.text_functions import TextFunctions
class PDFFunctions(object):
    def pdf_from_string(self,string,directory='/Users/Chris/Desktop/out_test.pdf'):
        output = cStringIO.StringIO()
        try:
            return pdfkit.from_string(string,False)
        except:
            string = string.decode('utf8', 'ignore')
            return pdfkit.from_string(string,False)
        #return pdfkit.from_string(string,directory)


def main():
    s = PDFFunctions().pdf_from_string('<h1>hello</h1>')
    print s
    zip_data = StringIO(s)
    print zip_data

    # import pdfkit
    # pdfkit.from_string('<h1>hello</h1>',False)
if __name__ == "__main__": main()


#pdfkit.from_url('http://google.com', '/Users/Chris/Desktop/out.pdf')
#pdfkit.from_string('<h1>http://google.com</h1>', '/Users/Chris/Desktop/out.pdf')

#performance_functions.py

# from Shippy.Functions.performance_functions import PerformanceFunctions,Timer
"""
	The purpose of this module is to provide performance 
	feedback while the function is running. For example, the
	timer module lets us know how fast its running
"""

import time  #used for Timer() to get start and end time
import os
import inspect
import re
#from progressbar import *
from pytz import timezone
from datetime import datetime, timedelta, time, date
from functools import wraps
import base64
import os
import cPickle as pickle
import time as t
import logging
import time
print_to_terminal = True
import sys

class LoggerFunctions(object):
    def logger_file(self):
        timestamp = datetime.now(timezone('US/Eastern')).strftime('%m%d%y_%H%M%S')
        if sys.platform == 'darwin':
            #file_name_caller = inspect.getfile(inspect.currentframe().f_back).split("/")[-1:][0]
            outer_frame = inspect.getouterframes(inspect.currentframe())[4][1]#[5]
            file_name_caller = outer_frame.split("/")[-1:][0].replace(".py","")
            # for enum,f in enumerate(outer_frame):
            #     print enum,f
            #print outer_frame
            file_name = file_name_caller.replace(".py","") + "_" + timestamp
            #logging.basicConfig(filename='/Users/Chris/Dropbox/Logger/Local/{}.log'.format(file_name), level=logging.DEBUG,format='%(message)s %(asctime)s')
            logging.basicConfig(filename='/Users/Chris/Dropbox/Logger/Local/{}.log'.format(file_name), level=logging.DEBUG)

        else:
            #logging.basicConfig(filename='/mnt/task/console.log'.format(timestamp),level=logging.DEBUG, format='%(message)s %(asctime)s')
            logging.basicConfig(filename='/mnt/task/console.log'.format(timestamp),level=logging.DEBUG)

        # func_name_caller = inspect.stack()[1][3]
        # line_name_caller = inspect.currentframe().f_back.f_lineno
        #
        # s = "#{}, line {} ,<{}> ({})".format(file_name_caller, line_name_caller, func_name_caller, timestamp)
        # print s
        # return s
        #
        # logging.basicConfig(filename='/Users/Chris/Desktop/console.log', level=logging.DEBUG, format='%(message)s %(asctime)s')
        # logging.debug('This message should go to the log file')
        # logging.info('So should this - another one')
        # logging.warning('And this, too')

#LoggerFunctions().logger_file()

def timeit(method):
    def timed(*args, **kw):
        if print_to_terminal or True:
            ts = time.time()
            result = method(*args, **kw)
            te = time.time()
            time_take = te - ts
            args = "args: {}".format(str(args))[:50]
            kw = "kw: {}".format(str(kw))[:30]
            print "{}({}s) - {},{}".format(method.__name__,str(round(time_take,2)),str(args),str(kw))
            #     ,
            # print '%r (%r, %r) %2.2f sec' % \
            #       (method.__name__, args, kw, te - ts)
            # print '%r (%r, %r) %2.2f sec' % \
            #       (method.__name__, args, kw, te-ts)
            return result
        else:
            pass
    return timed

class Foo(object):

    @timeit
    def foo(self, a=2, b=3):
        time.sleep(0.2)




"""

"""

#check if that function has been run with those inputs
# if it has, then just return what it is has been stored
# if it hasnt then
def doublewrap(f):
    '''
    a decorator decorator, allowing the decorator to be used as:
    @decorator(with, arguments, and=kwargs)
    or
    @decorator
    '''
    @wraps(f)
    def new_dec(*args, **kwargs):
        if len(args) == 1 and len(kwargs) == 0 and callable(args[0]):
            # actual decorated function
            return f(args[0])
        else:
            # decorator arguments
            return lambda realf: f(realf, *args, **kwargs)

    return new_dec

# if you want it to run and save, have run = True
# refreshing the base file
@doublewrap
def datastore(func,run=True,refresh=False):
    def new_func(*args,**kwargs):
        temp_file = 'passbook'
        #temp_key = str(base64.b64encode(str(args)) + base64.b64encode(str(kwargs)))
        temp_key =  str(kwargs)
        PerformanceFunctions().input_print(temp_key)
        if run:


            if not refresh:
                try:
                    PerformanceFunctions().comment("trying to open:{}".format(temp_file))
                    l =  pickle.load(open(temp_file, "rb"))
                    PerformanceFunctions().comment("passbook keys: {}".format(str(l.keys())))
                    #l.keys()
                    result = l[temp_key]
                    PerformanceFunctions().comment("opened")
                    return result
                except KeyError:
                    PerformanceFunctions().comment("KeyError")
                    Dict =  pickle.load(open(temp_file, "rb"))
                    result = func(*args,**kwargs)
                    Dict.update({temp_key:result})
                    pickle.dump(Dict, open(temp_file, 'wb'))
                    return result
                except IOError:
                    PerformanceFunctions().comment("IOS Error")
                    result = func(*args,**kwargs)
                    Dict = {temp_key:result}
                    pickle.dump(Dict, open(temp_file, 'wb'))
                    return result
            else:
                result = func(*args,**kwargs)
                pickle.dump(result, open(temp_file, 'wb'))
                return result
        else:
            return func(*args,**kwargs)
    return new_func

@doublewrap
def function_measure(func,run=True):
    def new_func(*args,**kwargs):
        if run:
            start = t.time()
            result = func(*args,**kwargs)
            end = t.time()
            time_take = end - start
            file_name_caller = inspect.getfile(inspect.currentframe().f_back).split("/")[-1:][0]
            #func_name_caller = inspect.stack()[1][3]
            func_name_caller = func.__name__
            line_name_caller = inspect.currentframe().f_back.f_lineno
            s = "{}, line {} ,<{}> ({}s)".format(file_name_caller,line_name_caller,func_name_caller,"{0:,.3f}".format(float(time_take)))

            print s
            args_string = (str(args) + str(kwargs))[:255]
            result_string = str(result)[:255]
            print "\tinput: {}".format(args_string)
            print "\tresult: {}".format(result_string)
            #print "<{}> {} seconds".format(func.__name__,"{0:,.3f}".format(float(time_take)))
            return result
        else:
            return func(*args,**kwargs)
    return new_func

# Try the function, if it fails, run it again, but this time return the inputs

@doublewrap
def function_test(func,run=True,error_only=True):
    def new_func(*args,**kwargs):
        if run:

            PerformanceFunctions().input_print(*args)
            return func(*args,**kwargs)
        else:
            return func(*args,**kwargs)

    return new_func



#def measure the inputs and outs
#measure th etime


class MonitorFunctions(Foo):
    def function_try(self,func,alt_func=None):
        start = t.time()
        try:
            result =  func()
            end = t.time()
            time_take = str((end - start) / 60)
            return result
        except:
            end = t.time()
            time_take = str((end - start) / 60)
            if not alt_func:
                alt_func = func
            return alt_func()



    def function_map_iterate(self,func,l,log_func=None):

        L = []
        time_take_array = []
        # for D in l:
        #     L.extend(func(D))
        # return L

        for enum,D in enumerate(l):
            start = t.time()
            PerformanceFunctions().input_print(D)
            result = func(D)
            #PerformanceFunctions().input_print(result)
            L.extend(result)
            end = t.time()
            time_take = end - start
            time_take_array.append(time_take)
            remaining_time = float(sum(time_take_array))/float(len(time_take_array)) * float((len(l) - enum))/60

            log_string =  "{}/{} ({} seconds) - {} minutes remaining".format(str(enum+1),str(len(l)),str(time_take),str(remaining_time))
            if print_to_terminal:
                print log_string
            if log_func:
                log_func(log_string)

        return L

class ClassTestFunctions(MonitorFunctions):
    def dictionary_sort_on_key(self, lst, index, reverse=True,func=None):
        if func:
            return sorted(lst, key=lambda Dict: str(func(Dict[index])), reverse=reverse)
        else:
            return sorted(lst, key=lambda Dict: Dict[index], reverse=reverse)



    def code_summary_print(self,x,comment=None):
        dirname, filename = os.path.split(os.path.abspath(__file__))
        #e.g. time_functions.py, line 53, <function>
        file_name_caller = inspect.getfile(inspect.currentframe().f_back).split("/")[-1:][0]
        func_name_caller = inspect.stack()[1][3]
        line_name_caller = inspect.currentframe().f_back.f_lineno
        s = "{}, line {} ,<{}>".format(file_name_caller,line_name_caller,func_name_caller)
        if comment:
            print s + " # {}".format(str(comment))
        else:
            print s
        try:
            if type(x) == list:
                print "\tType: list"
                print "\tlength: {}".format(str(len(x)))
                keys = x[0].keys()
                keys = self.dictionary_sort_on_key(keys, 0, reverse=False, func=lambda i: i.lower())
                #keys.sort()
                print "\tkeys: {}".format(str(keys))
                values = [x[0][i] for i in keys]
                print "\tvalues: {}".format(str(values))
                print "\tfirst dictionary: {}".format(str(x[0]))

            elif type(x) == dict:
                print "\tType: dict"
                keys = x.keys()
                keys = self.dictionary_sort_on_key(keys, 0, reverse=False, func=lambda i: i.lower())
                print "\tkeys: {}".format(str(keys))
                values = [x[i] for i in keys]
                print "\tvalues: {}".format(str(values))
                print "\toutput: {}".format(str(x))

            elif type(x) == float:
                print "\tType: float"
                print "\toutput: {}".format(str(x))

            elif type(x) == int:
                print "\tType: int"
                print "\toutput: {}".format(str(x))

            elif type(x) == str:
                print "\tType: str"
                print "\tlength: {}".format(str(len(x)))
                print "\toutput: {}".format(str(x))

            elif type(x) == tuple:
                print "\tType: tuple"
                print "\toutput: {}".format(str(x))

            else:
                print "\tType: other"

        except IndexError:
            print "\tlist index not a range - this is an empty list or not a list"
        except:
            if isinstance(x,str):
                print "\tstring_output: {}".format(x)
            else:
                try:
                    print "\tfirst item: {}".format(str(x[0]))
                except:
                    print "\toutput: {}".format(str(x))
        return s


    def variable_print(self,input,variable_name):
        input = input
        s = "[{}]: {} = {}".format(type(input).__name__,variable_name,input)
        return s

    def comment(self,i,print_to_terminal=print_to_terminal,override=False,logger=False,run=True):
        if run:
            file_name_caller = inspect.getfile(inspect.currentframe().f_back).split("/")[-1:][0]
            func_name_caller = inspect.stack()[1][3]
            line_name_caller = inspect.currentframe().f_back.f_lineno
            timestamp = datetime.now(timezone('US/Eastern')).strftime('%m/%d/%y %H:%M:%S')
            s = "# {} , {}, line {} ,<{}> ({})".format(i,file_name_caller,line_name_caller,func_name_caller,timestamp)
            if print_to_terminal or override:
                print s
            if logger:
                logging.info(s)
            return s


    # Print all inputs that
    def input_print(self,*args,**kwargs):
        if print_to_terminal: #if there is a kwargs statement override. Particularly override=True
            file_name_caller = inspect.getfile(inspect.currentframe().f_back).split("/")[-1:][0]
            func_name_caller = inspect.stack()[1][3]
            line_name_caller = inspect.currentframe().f_back.f_lineno
            s = "{}, line {} ,<{}>".format(file_name_caller,line_name_caller,func_name_caller)
            print s
            #logging.info(s)
            for i in args:
                #print list(inspect.currentframe().f_back.f_locals.iteritems())
                #[('i', 1)]

                for k, v in list(inspect.currentframe().f_back.f_locals.iteritems()):
                    if v is i:
                        a_as_str = k
                s = self.variable_print(i,a_as_str)
                print "\t{}".format(s)
                #return s
                #logging.info(s)
            return args
        if kwargs: #if there is a kwargs statement override. Particularly override=True
            file_name_caller = inspect.getfile(inspect.currentframe().f_back).split("/")[-1:][0]
            func_name_caller = inspect.stack()[1][3]
            line_name_caller = inspect.currentframe().f_back.f_lineno
            s = "{}, line {} ,<{}>".format(file_name_caller,line_name_caller,func_name_caller)
            print s
            for i in args:
                for k, v in list(inspect.currentframe().f_back.f_locals.iteritems()):
                    if v is i:
                        a_as_str = k
                s = self.variable_print(i,a_as_str)
                print "\t{}".format(s)
            return args

    #v2 of code summary print
    #args is just the comment
    def result_print(self,x,*args,**kwargs):
        if print_to_terminal:
            dirname, filename = os.path.split(os.path.abspath(__file__))
            #e.g. time_functions.py, line 53, <function>
            file_name_caller = inspect.getfile(inspect.currentframe().f_back).split("/")[-1:][0]
            func_name_caller = inspect.stack()[1][3]
            line_name_caller = inspect.currentframe().f_back.f_lineno
            s = "{}, line {} ,<{}>".format(file_name_caller,line_name_caller,func_name_caller)
            if args:
                print s + " # {}".format(str(args[0]))
            else:
                print s
            try:
                if type(x) == list:
                    print "\tType: list"
                    print "\tlength: {}".format(str(len(x)))
                    if type(x[0]) == dict:

                        keys = x[0].keys()
                        keys = self.dictionary_sort_on_key(keys, 0, reverse=False, func=lambda i: i.lower())
                        #keys.sort()
                        print "\tkeys: {}".format(str(keys))
                        values = [x[0][i] for i in keys]
                        print "\tvalues: {}".format(str(values))
                        print "\tfirst dictionary: {}".format(str(x[0]))
                    else:
                        print "\tlist items: {}".format(str(x[:100]))
                elif type(x) == dict:
                    print "\tType: dict"
                    keys = x.keys()
                    keys = self.dictionary_sort_on_key(keys, 0, reverse=False, func=lambda i: i.lower())
                    print "\tkeys: {}".format(str(keys))
                    values = [x[i] for i in keys]
                    print "\tvalues: {}".format(str(values))
                    print "\toutput: {}".format(str(x))

                elif type(x) == float:
                    print "\tType: float"
                    print "\toutput: {}".format(str(x))

                elif type(x) == int:
                    print "\tType: int"
                    print "\toutput: {}".format(str(x))

                elif type(x) == str:
                    print "\tType: str"
                    print "\tlength: {}".format(str(len(x)))
                    print "\toutput: {}".format(str(x))

                elif type(x) == tuple:
                    print "\tType: tuple"
                    print "\toutput: {}".format(str(x))

                else:
                    print "\tType: other"
                    print "\toutput: {}".format(str(x))


            except IndexError:
                print "\tlist index not a range - this is an empty list or not a list"
            except:
                if isinstance(x,str):
                    print "\tstring_output: {}".format(x)
                else:
                    try:
                        print "\tfirst item: {}".format(str(x[0]))
                    except:
                        print "\toutput: {}".format(str(x))
            return s
    def code_comment(self,comment=None):
        dirname, filename = os.path.split(os.path.abspath(__file__))
        #e.g. time_functions.py, line 53, <function>
        file_name_caller = inspect.getfile(inspect.currentframe().f_back).split("/")[-1:][0]
        func_name_caller = inspect.stack()[1][3]
        line_name_caller = inspect.currentframe().f_back.f_lineno
        s = "{}, line {} ,<{}>".format(file_name_caller,line_name_caller,func_name_caller)
        if comment:
            print s
            print "\t{}".format(str(comment))
        else:
            print s
            return s
    def lineno(self):
        print inspect.getfile(inspect.currentframe().f_back) # script filename (usually with path)
        print os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
        dirname, filename = os.path.split(os.path.abspath(__file__))
        print dirname,filename
        """Returns the current line number in our program."""
        full_path = os.path.realpath(__file__)
        print (os.path.dirname(full_path))
        path, file = os.path.split(full_path)
        print(path + ' --> ' + file + "\n")
        print os.getcwd()
        print inspect.stack()[0][3] #lineno
        print inspect.stack()[1][3]#lineno
        return inspect.currentframe().f_back.f_lineno
    def funcs_from_class_get(self, i):
        l = inspect.getmembers(i())
        #l =[subli[1] for subli in l if 'bound' in str(subli[0])]
        l = filter(lambda tup: re.search("bound", str(tup)), l)
        l = map(lambda tup: tup[1], l)
        return l
    def func_tests_from_class(self,i):
        print "performance_functions.py, <func_tests_from_class>"
        l = self.funcs_from_class_get(i)
        for i in l:
            try:
                i()
                print "\tSuccess: {}".format(str(i.__name__))
            except:
                print "\tFail: {}".format(str(i.__name__))




class SplitList(ClassTestFunctions):
    def chunks(self, l,
               n):  #http://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python
        """ Yield successive n-sized chunks from l.
        """
        for i in xrange(0, len(l), n):
            yield l[i:i + n]

    #chunks is the number that you want each chunk to be 
    def list_chunk_size_split(self, l, chunk_size, n):
        print "performance_functions.py, line 21, <list_chunk_size_split>"
        print "\toriginal list length: " + str(len(l))
        print "\tchunk_size: " + str(chunk_size)
        l = list(self.chunks(l, chunk_size))
        print "\tnumber of chunks: " + str(len(l))
        l = l[n]

        print "\treturned the " + str(n) + "th chunk"
        print "\ttrue chunk_size: " + str(len(l))
        return l

    def list_chunk_number_split(self, l, chunks, n):
        chunk_size = len(l) / chunks
        l = self.list_chunk_size_split(l, chunk_size, n)
        return l


class FunctionPerform(SplitList):
    def function_retry_once(self, func, time_sleep=3, func_retry=None):
        try:
            return func()
        except:
            print "performance_functions.py, line 44, <function_retry_once>"
            print "\tFailed & Retrying"
            if func_retry:
                print "\trunning function retry"
                func_retry()
            time.sleep(time_sleep)
            return func()

    def function_retry(self, func, n=3, time_sleep=3, func_retry=None):
        for i in range(n):
            try:
                v = self.function_retry_once(func, time_sleep=time_sleep, func_retry=func_retry)
                return v
            except:
                pass


class ProgressBarRun(FunctionPerform):
    def progress_bar_run(self, func, l):
        widgets = [" ", Percentage(), ' ', Bar(marker='=', left='[', right=']'),
                   ' ', ETA(), ' ', FileTransferSpeed()]
        pbar = ProgressBar(widgets=widgets, maxval=len(l))
        pbar.start()
        for i, sub in enumerate(l):
            func(sub)
            pbar.update(i)
        return l


#http://stackoverflow.com/questions/2632199/how-do-i-get-the-path-of-the-current-executed-file-in-python
class Timer(ProgressBarRun):
    def __init__(self, verbose=False):
        self.verbose = verbose

    def __enter__(self):
        self.start = time.time()
        return self

    def __exit__(self, *args):
        self.end = time.time()
        self.secs = self.end - self.start
        self.msecs = self.secs * 1000  # millisecs
        if self.verbose:
            print 'elapsed time: %f ms' % self.msecs


class PerformanceFunctions(Timer):
    pass


# Timer()
# with Timer() as t:
# 	print "okay"
# print "(%ss) \n\n" % t.secs
def loggin_example():
    #https://docs.python.org/2/howto/logging.html
    #logging.warning('Watch out!')
    logging.basicConfig(filename='/Users/Chris/Desktop/console.log',level=logging.DEBUG,format='%(message)s %(asctime)s')
    logging.debug('This message should go to the log file')
    logging.info('So should this - another one')
    logging.warning('And this, too')


def main():
    loggin_example()
    return
    #How to use ProgressBar Run
    l = range(10)
    func = lambda i: i
    PerformanceFunctions().progress_bar_run(func, l)

    return
    print os.path.dirname.__name__
    pass


if __name__ == "__main__": main()

#pickle_functions.py

# from Shippy.Functions.pickle_functions import PickleFunctions

import cPickle as pickle
from Shippy.Functions.TimeFunctions import UnicodeFunctions  #Used for Date
import os
import sys
from Shippy.Functions.performance_functions import PerformanceFunctions

if sys.platform == 'darwin':
    base_directory = '/Users/Chris/Documents/ScriptData/'

else:
    base_directory = '/mnt/task/'



def test():
    pickle.dump('data', open('temp_file', 'wb'))
    pickle.load(open('temp_file', "rb"))
    os.remove('temp_file')


class PickleOpen(object):
    def open(self, f):
        PerformanceFunctions().comment("Opening File")
        #print "file pickle_functions.py, opening pickle file: {}".format(f)
        if '.pkl' not in f:
            F = base_directory + f + ".pkl"
            l = pickle.load(open(F, "rb"))
        else:
            l = pickle.load(open(f, "rb"))
        try:
            comment_text= "\tresulting list: {} length, {}...".format(str(len(l)),str(l[0]))
            PerformanceFunctions().comment(comment_text)

            #print "\tfirst item: {}".format(str(l[0]))
        except KeyError:
            comment_text= "\tresulting list: {}, Empty"
            PerformanceFunctions().comment(comment_text)
            #print "\tnot a list"
        #print "\tDone."
        return l


class PickleSave(PickleOpen):
    #/Users/Chris/Desktop/test.pkl
    def write(self, l, file_name):
        if '.pkl' not in file_name:
            file_name = file_name + ".pkl"
        if '/' not in file_name:
            file_name = base_directory + file_name
        pickle.dump(l, open(file_name, 'wb'))
        PerformanceFunctions().comment('saved pickle file: {}'.format(file_name))
        return l


        # if '.pkl' not in f:
        #     try:
        #         F = '/Users/Chris/Documents/ScriptData/' + f + ".pkl"
        #         print "File pickle_functions.py line 15 <PickleSave>"
        #         pickle.dump(l, open(F, 'wb'))
        #         print "\tsaved data"
        #
        #         #l = pickle.load(open(F, "rb"))
        #     except IOError:
        #         F = '/Users/Chris/Desktop/Inbox/' + f + ".pkl"
        #         print "File pickle_functions.py line 15 <PickleSave>"
        #         pickle.dump(l, open(F, 'wb'))
        #         print "\tsaved data"
        #
        #         #l = pickle.load(open(F, "rb"))
        # else:
        #     F = '/Users/Chris/Documents/ScriptData/' + f
        #     print "File pickle_functions.py line 15 <PickleSave>"
        #     pickle.dump(l, open(F, 'wb'))
        #     print "\tsaved data"



class Pickler(PickleSave):
    """Purpose is to Create a Pickle File for an API Call Daily if it doesn't
    exist in order to limit api calls for speed

    Logic: Refresh it now if you want
    If no refresh argument taken, its false and will open any file from today
    if it doesnt exist, then it creates it"""

    def Pickle(self, Data, Refresh=False):
        try:
            # if Refresh == "Direct":
            # 	return Data()
            # else:
            return self.Pickler(Data, Refresh)
        except IOError:  #Returns if the file doesn't exist
            return self.PickleSaveOpen(Data)


    def Pickler(self, Data, Refresh):  #Data is the function call
        if Refresh == True:
            self.PickleSaveOpen(Data)
        else:  #if false, then just open the file
            return self.PickleOpen(Data)

    def PickleSaveOpen(self, Data):
        self.PickleSave(Data)
        return self.PickleOpen(Data)

    #print self.FileName(Data)
    #print Data()
    #print "okay"


    # try: #Try to Open
    # 	if Refresh == True:
    # 		self.PickleOpen(0) #Produce IOError to start the Pickle Save
    # 	elif Refresh == False:
    # 		self.PickleOpen(self.Directory(Data)[:3])
    # except IOError: #if it doesn't exist, create it
    # 	print "got it"
    #self.PickleSave(Data)
    #self.PickleOpen(Data)

    def FileName(self, Data):
        Date = UnicodeFunctions().TodayDateStampwPeriods()
        return Data.__name__ + "_" + Date + ".pkl"

    def PickleSave(self, Data):
        return pickle.dump(Data(), open(self.Directory(Data), 'wb'))

    def PickleOpen(self, Data):
        return pickle.load(open(self.Directory(Data), "rb"))

    def Directory(self, Data):
        Directory = "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/Shippy/Data/"
        Directory = "/Users/ChrisCruz/Dropbox/Code/Pickle Data/"
        Directory = "/Users/Chris/Desktop/Inbox/"
        return Directory + self.FileName(Data)


class PickleFunctions(Pickler):
    pass


def main():
    #l = ['name','bob','okay']
    l = PickleFunctions().open("palette_vendor_logic")
    # for i in l:
    #     print i

    return
    Pickled().Pickled("data", Refresh=True)


if __name__ == "__main__": main()

#SalesReportLeaderBoard.py

from Shippy.API.salesforce_api import Query


class LeaderboardMetrics(Query):
	def Bookings(self,Timeframe,Owner,Type,Selection='Sum(Amount)',StageName='Closed Won'):
		Str = "Select \
		%(Selection)s\
		from Opportunity \
		where \
		CloseDate = %(Timeframe)s AND\
		StageName = '%(StageName)s' AND\
		Owner.Name LIKE '%(Owner)s' AND\
		Type = '%(Type)s'\
		"% {\
		"Selection":Selection,
		"Owner":Owner,
		"Timeframe":Timeframe,
		"Type":Type,
		"StageName":StageName}
		return self.querynum(Str)

	#Changed Total bookings to add 
	#Querynum returns number with commas (17,000)
	def Total_Bookings(self,Timeframe,Owner,Selection='Sum(Amount)',StageName='Closed Won'):
		# Str = "Select \
		# %(Selection)s\
		# from Opportunity \
		# where \
		# CloseDate = %(Timeframe)s AND\
		# StageName = '%(StageName)s' AND\
		# Owner.Name LIKE '%(Owner)s'\
		# "% {\
		# "Selection":Selection,
		# "Owner":Owner,
		# "Timeframe":Timeframe,
		# "StageName":StageName}
		# val =  self.querynum(Str)
		# return val

		vala = self.Bookings(Timeframe,Owner,'New Business')
		valb = self.Bookings(Timeframe,Owner,'Upsell - New')
		valc = self.Bookings(Timeframe,Owner,'Upsell')

		Func = lambda val: float(val.replace(",",""))
		val = Func(vala) + Func(valb) + Func(valc)

		Func = lambda number: "{:,}".format(int(number))
		return Func(val)
		#>>17,000


	def MRR(self,Timeframe,Owner,Selection='Sum(MRR__c)',StageName='Closed Won'):
		Str = "Select \
		%(Selection)s\
		from Opportunity \
		where \
		CloseDate = %(Timeframe)s AND\
		StageName = '%(StageName)s' AND\
		Owner.Name LIKE '%(Owner)s' AND\
		OTF__c = False AND\
		Type != 'Renewal'\
		"% {\
		"Selection":Selection,
		"Owner":Owner,
		"Timeframe":Timeframe,
		"StageName":StageName}
		return self.querynum(Str)

	
	def Lost_Bookings(self,Timeframe,Owner,Selection='Sum(Amount)',StageName='Closed Lost'):
		Str = "Select \
		%(Selection)s\
		from Opportunity \
		where \
		CloseDate = %(Timeframe)s AND\
		StageName = '%(StageName)s' AND\
		Owner.Name LIKE '%(Owner)s'\
		"% {\
		"Selection":Selection,
		"Owner":Owner,
		"Timeframe":Timeframe,
		"StageName":StageName}
		return self.querynum(Str)

	def Pipeline(self,Timeframe,Owner,Selection='Sum(Amount)'):
		Str = "select %(Selection)s from Opportunity where \
		StageName != 'Closed Won' AND \
		IsDeleted = False AND \
		Owner.Name LIKE '%(Owner)s' AND\
		CloseDate = %(Timeframe)s AND\
		Type != 'Renewal' AND\
		StageName != 'Closed Lost'"% {\
		"Selection":Selection,
		"Owner":Owner,
		"Timeframe":Timeframe
		}
		return self.querynum(Str)


class LeaderboardLists(LeaderboardMetrics):

	def OwnerList(self,Timeframe,Owner):
		return \
		[self.Bookings(Timeframe,Owner,'New Business'),
		self.Bookings(Timeframe,Owner,'Upsell'),
		self.Bookings(Timeframe,Owner,'Upsell - New'),
		self.Total_Bookings(Timeframe,Owner),
		self.MRR(Timeframe,Owner),
		self.Lost_Bookings(Timeframe,Owner),
		self.Pipeline(Timeframe,Owner,Selection='Sum(Amount)'),
		self.Pipeline(Timeframe,Owner,Selection='Sum(Amount_Weighted__c)')]

	def OwnerLists(self,Timeframe,
		Owners=[
			'Liz Madsen',
			'Deb Berman',
			'Olivia Herron',
			'Rob Breckinridge',
			'Bill Doolan',
			'Jeff Murphy',
			'David Speers',
			'Peter Berman',
			'Ryan Werner',
			'Katelyn Ares',
			'Aaron Steinberg',
			'Casey Lance'
			]):
		return [[Owner] + self.OwnerList(Timeframe,Owner) for Owner in Owners]

	def HeaderAdd(self,lst):
		Headers = [
				'Owner',
				'New Business',
				'Upsell',
				'Upsell - New',
				'Total Bookings',
				'MRR',
				'Loss Bookings',
				'Pipeline',
				'Weighted Pipeline']
		lst.insert(0,Headers)
		return lst

	def Leaderboard(self,Timeframe):
		lst = self.OwnerLists(Timeframe)
		lst = self.HeaderAdd(lst)
		return lst

def main():

	print LeaderboardMetrics().MRR('This_Month','Liz Madsen')

	#print LeaderboardMetrics().Total_Bookings('Last_Month','Liz Madsen')
	#print LeaderboardLists().Leaderboard('This_Month')

if __name__ == "__main__": main()
#statistics_functions.py

# from Shippy.Functions.statistics_functions import StatisticsFunctions


try:
    import numpy as np
    import numpy
    #import pandas as pd # use recent version which has dt.quarter attr for time
    import json
    import scipy as sp
except:
    pass
from operator import itemgetter, attrgetter
try:
    import scipy.stats as stats  #http://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chisquare.html
except:
    pass
#import scipy.stats
# from scipy import stats
# from scipy.stats import linregress
#from scipy.stats import chisquare
#https://github.com/statsmodels/statsmodels

#https://hg.python.org/cpython/file/3.5/Lib/statistics.py
##  Module statistics.py
##
##  Copyright (c) 2013 Steven D'Aprano <steve+python@pearwood.info>.
##
##  Licensed under the Apache License, Version 2.0 (the "License");
##  you may not use this file except in compliance with the License.
##  You may obtain a copy of the License at
##
##  http://www.apache.org/licenses/LICENSE-2.0
##
##  Unless required by applicable law or agreed to in writing, software
##  distributed under the License is distributed on an "AS IS" BASIS,
##  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##  See the License for the specific language governing permissions and
##  limitations under the License.


"""
Basic statistics module.

This module provides functions for calculating statistics of data, including
averages, variance, and standard deviation.

Calculating averages
--------------------

==================  =============================================
Function            Description
==================  =============================================
mean                Arithmetic mean (average) of data.
median              Median (middle value) of data.
median_low          Low median of data.
median_high         High median of data.
median_grouped      Median, or 50th percentile, of grouped data.
mode                Mode (most common value) of data.
==================  =============================================

Calculate the arithmetic mean ("the average") of data:

>>> mean([-1.0, 2.5, 3.25, 5.75])
2.625


Calculate the standard median of discrete data:

>>> median([2, 3, 4, 5])
3.5


Calculate the median, or 50th percentile, of data grouped into class intervals
centred on the data values provided. E.g. if your data points are rounded to
the nearest whole number:

>>> median_grouped([2, 2, 3, 3, 3, 4])  #doctest: +ELLIPSIS
2.8333333333...

This should be interpreted in this way: you have two data points in the class
interval 1.5-2.5, three data points in the class interval 2.5-3.5, and one in
the class interval 3.5-4.5. The median of these data points is 2.8333...


Calculating variability or spread
---------------------------------

==================  =============================================
Function            Description
==================  =============================================
pvariance           Population variance of data.
variance            Sample variance of data.
pstdev              Population standard deviation of data.
stdev               Sample standard deviation of data.
==================  =============================================

Calculate the standard deviation of sample data:

>>> stdev([2.5, 3.25, 5.5, 11.25, 11.75])  #doctest: +ELLIPSIS
4.38961843444...

If you have previously calculated the mean, you can pass it as the optional
second argument to the four "spread" functions to avoid recalculating it:

>>> data = [1, 2, 2, 4, 4, 4, 5, 6]
>>> mu = mean(data)
>>> pvariance(data, mu)
2.5


Exceptions
----------

A single exception is defined: StatisticsError is a subclass of ValueError.

"""

__all__ = [ 'StatisticsError',
            'pstdev', 'pvariance', 'stdev', 'variance',
            'median',  'median_low', 'median_high', 'median_grouped',
            'mean', 'mode',
          ]


import collections
import math

from fractions import Fraction
from decimal import Decimal
from itertools import groupby



# === Exceptions ===

class StatisticsError(ValueError):
    pass


# === Private utilities ===

def _sum(data, start=0):
    """_sum(data [, start]) -> (type, sum, count)

    Return a high-precision sum of the given numeric data as a fraction,
    together with the type to be converted to and the count of items.

    If optional argument ``start`` is given, it is added to the total.
    If ``data`` is empty, ``start`` (defaulting to 0) is returned.


    Examples
    --------

    >>> _sum([3, 2.25, 4.5, -0.5, 1.0], 0.75)
    (<class 'float'>, Fraction(11, 1), 5)

    Some sources of round-off error will be avoided:

    >>> _sum([1e50, 1, -1e50] * 1000)  # Built-in sum returns zero.
    (<class 'float'>, Fraction(1000, 1), 3000)

    Fractions and Decimals are also supported:

    >>> from fractions import Fraction as F
    >>> _sum([F(2, 3), F(7, 5), F(1, 4), F(5, 6)])
    (<class 'fractions.Fraction'>, Fraction(63, 20), 4)

    >>> from decimal import Decimal as D
    >>> data = [D("0.1375"), D("0.2108"), D("0.3061"), D("0.0419")]
    >>> _sum(data)
    (<class 'decimal.Decimal'>, Fraction(6963, 10000), 4)

    Mixed types are currently treated as an error, except that int is
    allowed.
    """
    count = 0
    n, d = _exact_ratio(start)
    partials = {d: n}
    partials_get = partials.get
    T = _coerce(int, type(start))
    for typ, values in groupby(data, type):
        T = _coerce(T, typ)  # or raise TypeError
        for n,d in map(_exact_ratio, values):
            count += 1
            partials[d] = partials_get(d, 0) + n
    if None in partials:
        # The sum will be a NAN or INF. We can ignore all the finite
        # partials, and just look at this special one.
        total = partials[None]
        assert not _isfinite(total)
    else:
        # Sum all the partial sums using builtin sum.
        # FIXME is this faster if we sum them in order of the denominator?
        total = sum(Fraction(n, d) for d, n in sorted(partials.items()))
    return (T, total, count)


def _isfinite(x):
    try:
        return x.is_finite()  # Likely a Decimal.
    except AttributeError:
        return math.isfinite(x)  # Coerces to float first.


def _coerce(T, S):
    """Coerce types T and S to a common type, or raise TypeError.

    Coercion rules are currently an implementation detail. See the CoerceTest
    test class in test_statistics for details.
    """
    # See http://bugs.python.org/issue24068.
    assert T is not bool, "initial type T is bool"
    # If the types are the same, no need to coerce anything. Put this
    # first, so that the usual case (no coercion needed) happens as soon
    # as possible.
    if T is S:  return T
    # Mixed int & other coerce to the other type.
    if S is int or S is bool:  return T
    if T is int:  return S
    # If one is a (strict) subclass of the other, coerce to the subclass.
    if issubclass(S, T):  return S
    if issubclass(T, S):  return T
    # Ints coerce to the other type.
    if issubclass(T, int):  return S
    if issubclass(S, int):  return T
    # Mixed fraction & float coerces to float (or float subclass).
    if issubclass(T, Fraction) and issubclass(S, float):
        return S
    if issubclass(T, float) and issubclass(S, Fraction):
        return T
    # Any other combination is disallowed.
    msg = "don't know how to coerce %s and %s"
    raise TypeError(msg % (T.__name__, S.__name__))


def _exact_ratio(x):
    """Return Real number x to exact (numerator, denominator) pair.

    >>> _exact_ratio(0.25)
    (1, 4)

    x is expected to be an int, Fraction, Decimal or float.
    """
    try:
        # Optimise the common case of floats. We expect that the most often
        # used numeric type will be builtin floats, so try to make this as
        # fast as possible.
        if type(x) is float:
            return x.as_integer_ratio()
        try:
            # x may be an int, Fraction, or Integral ABC.
            return (x.numerator, x.denominator)
        except AttributeError:
            try:
                # x may be a float subclass.
                return x.as_integer_ratio()
            except AttributeError:
                try:
                    # x may be a Decimal.
                    return _decimal_to_ratio(x)
                except AttributeError:
                    # Just give up?
                    pass
    except (OverflowError, ValueError):
        # float NAN or INF.
        assert not math.isfinite(x)
        return (x, None)
    msg = "can't convert type '{}' to numerator/denominator"
    raise TypeError(msg.format(type(x).__name__))


# FIXME This is faster than Fraction.from_decimal, but still too slow.
def _decimal_to_ratio(d):
    """Convert Decimal d to exact integer ratio (numerator, denominator).

    >>> from decimal import Decimal
    >>> _decimal_to_ratio(Decimal("2.6"))
    (26, 10)

    """
    sign, digits, exp = d.as_tuple()
    if exp in ('F', 'n', 'N'):  # INF, NAN, sNAN
        assert not d.is_finite()
        return (d, None)
    num = 0
    for digit in digits:
        num = num*10 + digit
    if exp < 0:
        den = 10**-exp
    else:
        num *= 10**exp
        den = 1
    if sign:
        num = -num
    return (num, den)


def _convert(value, T):
    """Convert value to given numeric type T."""
    if type(value) is T:
        # This covers the cases where T is Fraction, or where value is
        # a NAN or INF (Decimal or float).
        return value
    if issubclass(T, int) and value.denominator != 1:
        T = float
    try:
        # FIXME: what do we do if this overflows?
        return T(value)
    except TypeError:
        if issubclass(T, Decimal):
            return T(value.numerator)/T(value.denominator)
        else:
            raise


def _counts(data):
    # Generate a table of sorted (value, frequency) pairs.
    table = collections.Counter(iter(data)).most_common()
    if not table:
        return table
    # Extract the values with the highest frequency.
    maxfreq = table[0][1]
    for i in range(1, len(table)):
        if table[i][1] != maxfreq:
            table = table[:i]
            break
    return table


# === Measures of central tendency (averages) ===

def mean(data):
    """Return the sample arithmetic mean of data.

    >>> mean([1, 2, 3, 4, 4])
    2.8

    >>> from fractions import Fraction as F
    >>> mean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])
    Fraction(13, 21)

    >>> from decimal import Decimal as D
    >>> mean([D("0.5"), D("0.75"), D("0.625"), D("0.375")])
    Decimal('0.5625')

    If ``data`` is empty, StatisticsError will be raised.
    """
    if iter(data) is data:
        data = list(data)
    n = len(data)
    if n < 1:
        raise StatisticsError('mean requires at least one data point')
    T, total, count = _sum(data)
    assert count == n
    return _convert(total/n, T)


# FIXME: investigate ways to calculate medians without sorting? Quickselect?
def median(data):
    """Return the median (middle value) of numeric data.

    When the number of data points is odd, return the middle data point.
    When the number of data points is even, the median is interpolated by
    taking the average of the two middle values:

    >>> median([1, 3, 5])
    3
    >>> median([1, 3, 5, 7])
    4.0

    """
    data = sorted(data)
    n = len(data)
    if n == 0:
        raise StatisticsError("no median for empty data")
    if n%2 == 1:
        return data[n//2]
    else:
        i = n//2
        return (data[i - 1] + data[i])/2


def median_low(data):
    """Return the low median of numeric data.

    When the number of data points is odd, the middle value is returned.
    When it is even, the smaller of the two middle values is returned.

    >>> median_low([1, 3, 5])
    3
    >>> median_low([1, 3, 5, 7])
    3

    """
    data = sorted(data)
    n = len(data)
    if n == 0:
        raise StatisticsError("no median for empty data")
    if n%2 == 1:
        return data[n//2]
    else:
        return data[n//2 - 1]


def median_high(data):
    """Return the high median of data.

    When the number of data points is odd, the middle value is returned.
    When it is even, the larger of the two middle values is returned.

    >>> median_high([1, 3, 5])
    3
    >>> median_high([1, 3, 5, 7])
    5

    """
    data = sorted(data)
    n = len(data)
    if n == 0:
        raise StatisticsError("no median for empty data")
    return data[n//2]


def median_grouped(data, interval=1):
    """Return the 50th percentile (median) of grouped continuous data.

    >>> median_grouped([1, 2, 2, 3, 4, 4, 4, 4, 4, 5])
    3.7
    >>> median_grouped([52, 52, 53, 54])
    52.5

    This calculates the median as the 50th percentile, and should be
    used when your data is continuous and grouped. In the above example,
    the values 1, 2, 3, etc. actually represent the midpoint of classes
    0.5-1.5, 1.5-2.5, 2.5-3.5, etc. The middle value falls somewhere in
    class 3.5-4.5, and interpolation is used to estimate it.

    Optional argument ``interval`` represents the class interval, and
    defaults to 1. Changing the class interval naturally will change the
    interpolated 50th percentile value:

    >>> median_grouped([1, 3, 3, 5, 7], interval=1)
    3.25
    >>> median_grouped([1, 3, 3, 5, 7], interval=2)
    3.5

    This function does not check whether the data points are at least
    ``interval`` apart.
    """
    data = sorted(data)
    n = len(data)
    if n == 0:
        raise StatisticsError("no median for empty data")
    elif n == 1:
        return data[0]
    # Find the value at the midpoint. Remember this corresponds to the
    # centre of the class interval.
    x = data[n//2]
    for obj in (x, interval):
        if isinstance(obj, (str, bytes)):
            raise TypeError('expected number but got %r' % obj)
    try:
        L = x - interval/2  # The lower limit of the median interval.
    except TypeError:
        # Mixed type. For now we just coerce to float.
        L = float(x) - float(interval)/2
    cf = data.index(x)  # Number of values below the median interval.
    # FIXME The following line could be more efficient for big lists.
    f = data.count(x)  # Number of data points in the median interval.
    return L + interval*(n/2 - cf)/f


def mode(data):
    """Return the most common data point from discrete or nominal data.

    ``mode`` assumes discrete data, and returns a single value. This is the
    standard treatment of the mode as commonly taught in schools:

    >>> mode([1, 1, 2, 3, 3, 3, 3, 4])
    3

    This also works with nominal (non-numeric) data:

    >>> mode(["red", "blue", "blue", "red", "green", "red", "red"])
    'red'

    If there is not exactly one most common value, ``mode`` will raise
    StatisticsError.
    """
    # Generate a table of sorted (value, frequency) pairs.
    table = _counts(data)
    if len(table) == 1:
        return table[0][0]
    elif table:
        raise StatisticsError(
                'no unique mode; found %d equally common values' % len(table)
                )
    else:
        raise StatisticsError('no mode for empty data')


# === Measures of spread ===

# See http://mathworld.wolfram.com/Variance.html
#     http://mathworld.wolfram.com/SampleVariance.html
#     http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
#
# Under no circumstances use the so-called "computational formula for
# variance", as that is only suitable for hand calculations with a small
# amount of low-precision data. It has terrible numeric properties.
#
# See a comparison of three computational methods here:
# http://www.johndcook.com/blog/2008/09/26/comparing-three-methods-of-computing-standard-deviation/

def _ss(data, c=None):
    """Return sum of square deviations of sequence data.

    If ``c`` is None, the mean is calculated in one pass, and the deviations
    from the mean are calculated in a second pass. Otherwise, deviations are
    calculated from ``c`` as given. Use the second case with care, as it can
    lead to garbage results.
    """
    if c is None:
        c = mean(data)
    T, total, count = _sum((x-c)**2 for x in data)
    # The following sum should mathematically equal zero, but due to rounding
    # error may not.
    U, total2, count2 = _sum((x-c) for x in data)
    assert T == U and count == count2
    total -=  total2**2/len(data)
    assert not total < 0, 'negative sum of square deviations: %f' % total
    return (T, total)


def variance(data, xbar=None):
    """Return the sample variance of data.

    data should be an iterable of Real-valued numbers, with at least two
    values. The optional argument xbar, if given, should be the mean of
    the data. If it is missing or None, the mean is automatically calculated.

    Use this function when your data is a sample from a population. To
    calculate the variance from the entire population, see ``pvariance``.

    Examples:

    >>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]
    >>> variance(data)
    1.3720238095238095

    If you have already calculated the mean of your data, you can pass it as
    the optional second argument ``xbar`` to avoid recalculating it:

    >>> m = mean(data)
    >>> variance(data, m)
    1.3720238095238095

    This function does not check that ``xbar`` is actually the mean of
    ``data``. Giving arbitrary values for ``xbar`` may lead to invalid or
    impossible results.

    Decimals and Fractions are supported:

    >>> from decimal import Decimal as D
    >>> variance([D("27.5"), D("30.25"), D("30.25"), D("34.5"), D("41.75")])
    Decimal('31.01875')

    >>> from fractions import Fraction as F
    >>> variance([F(1, 6), F(1, 2), F(5, 3)])
    Fraction(67, 108)

    """
    if iter(data) is data:
        data = list(data)
    n = len(data)
    if n < 2:
        raise StatisticsError('variance requires at least two data points')
    T, ss = _ss(data, xbar)
    return _convert(ss/(n-1), T)


def pvariance(data, mu=None):
    """Return the population variance of ``data``.

    data should be an iterable of Real-valued numbers, with at least one
    value. The optional argument mu, if given, should be the mean of
    the data. If it is missing or None, the mean is automatically calculated.

    Use this function to calculate the variance from the entire population.
    To estimate the variance from a sample, the ``variance`` function is
    usually a better choice.

    Examples:

    >>> data = [0.0, 0.25, 0.25, 1.25, 1.5, 1.75, 2.75, 3.25]
    >>> pvariance(data)
    1.25

    If you have already calculated the mean of the data, you can pass it as
    the optional second argument to avoid recalculating it:

    >>> mu = mean(data)
    >>> pvariance(data, mu)
    1.25

    This function does not check that ``mu`` is actually the mean of ``data``.
    Giving arbitrary values for ``mu`` may lead to invalid or impossible
    results.

    Decimals and Fractions are supported:

    >>> from decimal import Decimal as D
    >>> pvariance([D("27.5"), D("30.25"), D("30.25"), D("34.5"), D("41.75")])
    Decimal('24.815')

    >>> from fractions import Fraction as F
    >>> pvariance([F(1, 4), F(5, 4), F(1, 2)])
    Fraction(13, 72)

    """
    if iter(data) is data:
        data = list(data)
    n = len(data)
    if n < 1:
        raise StatisticsError('pvariance requires at least one data point')
    T, ss = _ss(data, mu)
    return _convert(ss/n, T)


def stdev(data, xbar=None):
    """Return the square root of the sample variance.

    See ``variance`` for arguments and other details.

    >>> stdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])
    1.0810874155219827

    """
    var = variance(data, xbar)
    try:
        return var.sqrt()
    except AttributeError:
        return math.sqrt(var)


def pstdev(data, mu=None):
    """Return the square root of the population variance.

    See ``pvariance`` for arguments and other details.

    >>> pstdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])
    0.986893273527251

    """
    var = pvariance(data, mu)
    try:
        return var.sqrt()
    except AttributeError:
        return math.sqrt(var)



class StatisticalSignificanceFunctions(object):
    def array_attribute_significance(self,array,attribute_key_name='Account_Revenue_Tier__c',criteria_func=None,calculation_func=len):
        """

        Parameters
        ----------
        array - the list of dictionaries
        attribute_key_name - the attribute that it will be grouped by. This will be what is tested for significance.
        criteria_func - This is the criteria that the list will be split into. Should return True or False.
        calculation_func - This will process several of the groups

        Returns
        -------
        """
        dimension_key_names = list(set(map(lambda D: D[attribute_key_name], array)))
        true_array = filter(lambda D: criteria_func(D),array)
        false_array = filter(lambda D: not criteria_func(D),array)

        significance_array = []
        for dimension_key_name in dimension_key_names:
            filtered_array = filter(lambda D: D[attribute_key_name] == dimension_key_name, array)
            true_filtered_array = filter(lambda D: criteria_func(D), filtered_array)
            false_filtered_array = filter(lambda D: not criteria_func(D), filtered_array)

            dimension_key = str(attribute_key_name) + ":" + str(dimension_key_name)
            total_true_count = calculation_func(true_array)
            total_false_count = calculation_func(false_array)
            dimension_count = calculation_func(filtered_array)
            dimension_true_count = calculation_func(true_filtered_array)
            dimension_false_count = calculation_func(false_filtered_array)
            true_percentage = float(calculation_func(true_filtered_array)) / float(calculation_func(true_array))

            false_percentage = float(calculation_func(false_filtered_array)) / float(calculation_func(false_array))
            account_names = ",".join(map(lambda D: D['Account_Name'], true_filtered_array))

            true_of_dimension_percentage = float(calculation_func(true_filtered_array)) / float(dimension_count)
            percentage_format = lambda i: "{0:.0%}".format(float(i))

            true_percentage_text = "{}({}/{})".format(percentage_format(true_percentage),str(int(dimension_true_count)),str(int(total_true_count)))
            false_percentage_text = "{}({}/{})".format(percentage_format(false_percentage),str(int(dimension_false_count)),str(int(total_false_count)))
            true_of_dimension_text =  "{}({}/{})".format(percentage_format(true_of_dimension_percentage),str(int(dimension_true_count)),str(int(dimension_count)))

            factor_significance = true_percentage - false_percentage
            D = {'dimension_key': dimension_key,'dimension_attribute_name':dimension_key_name,'dimension_name':dimension_key, 'factor_significance': factor_significance,
                 'true_count': dimension_true_count, 'false_count': dimension_false_count,
                 'true_count_total': total_true_count, 'false_count_total': total_false_count,
                 'true_percentage': true_percentage, 'false_percentage': false_percentage,
                 'true_of_dimension_text':true_of_dimension_text,
                 'true_of_dimension_percentage':true_of_dimension_percentage,
                 'dimension_count': dimension_count, 'account_names': account_names,'true_percentage_text':true_percentage_text,'false_percentage_test':false_percentage_text}
            significance_array.append(D)
        return significance_array

    def significance_test_on_dimensions_array(self,initial_array,criteria_func=None,calculation_func=len,dimensions=['Account_Industry__c','Account_Revenue_Tier__c','Account_Region__c','Inbound_or_Outbound_Receiver__c','LeadSource','Market_Developer__r_Name','Brand_Strategist__r_Name']):
        L = []
        for dimension in dimensions:
            L.extend(self.array_attribute_significance(initial_array,attribute_key_name=dimension,criteria_func=criteria_func,calculation_func=calculation_func))
        return L


    def chi_test_on_dimensions_base(self, array, criteria_func=None, primary_dimension='revenue_tier', calculation_func=len):
        win_func = lambda array: filter(lambda D: criteria_func(D), array)
        group_func = lambda iterable, key1: [list(group) for key, group in groupby(sorted(iterable, key=itemgetter(key1)), itemgetter(key1))]
        expected_probability = float(calculation_func(win_func(array))) / float(calculation_func(array))

        won_count = map(lambda subli: calculation_func(win_func(subli)), group_func(array, primary_dimension))
        expected_count = map(lambda subli: calculation_func(subli) * expected_probability, group_func(array, primary_dimension))
        return list(stats.chisquare(won_count, f_exp=expected_count))
        # [1.6129118248683463, 0.65646570670813431]

    def chi_test_on_dimensions_array(self,array,criteria_func=None,calculation_func=len, dimensions=['Account_Industry__c', 'Account_Revenue_Tier__c', 'Account_Region__c','Inbound_or_Outbound_Receiver__c', 'LeadSource', 'Market_Developer__r_Name','Brand_Strategist__r_Name']):
        func = lambda dim: self.chi_test_on_dimensions_base(array, criteria_func=criteria_func,calculation_func=calculation_func, primary_dimension=dim)
        l = [{'dimension': dim, 'p_value': func(dim)[1],'p_value_inverse':1 - float(func(dim)[1]), 'chi_square_value': func(dim)[0]} for dim in dimensions]
        return l



class CorrelationDetermine(StatisticalSignificanceFunctions):
    """
    Determine the strength of correlation between two variables (e.g. Renewal Closed Lost & Whether they have a Catalog)

    Pearson Correlation - Covariance of X and Y divided by Standard Deviation of X and Y

    Crammer's V
    Chi-Square Test


    """
    def variance_from_list(self,l):
        return variance(l)

    def correlation_determine(self):
        pass

    def group_by_keys(self,iterable, *keys):
        key_func = itemgetter(*keys)

        # For groupby() to do what we want, the iterable needs to be sorted
        # by the same key function that we're grouping by.
        sorted_iterable = sorted(iterable, key=key_func)

        l = [list(group) for key, group in groupby(sorted_iterable, key_func)]
        return l

    def variance_from_string_list(self,l):
        unique_keys = list(set(l))
        l = [l.count(k) for k in unique_keys]
        v = self.variance_from_list(l)
        return v


    def variation_determine_from_key(self,dataset,key_name,calculate_func=None):
        """
        :param dataset: array
        :param key_name: the column by which to determine the variance (e.g. industry)
        :param calculate_func: the function by which to calculate on
        :return: a variance for the data set
        """
        #dataset = dataset[:10]
        l = self.group_by_keys(dataset,key_name)
        print "key_name: {}".format(key_name)
        #print "grouped_array: {}".format(str(l))
        if not calculate_func:
            calculate_func = lambda subli: len(subli)

        l = [calculate_func(subli) for subli in l]
        #print "key_name: {}".format(key_name)
        print "results: {}".format(str(l))
        return variance(l)

    def unusual_attributes_from_keyname(self,dataset,key_name,calculate_func=None):
        """
        :param dataset:
        :return: [('Revenue_Tier',[(ENT:20%,MM:40%,SMB:40%)], the lowest value across each one is unusual
        """
        if not calculate_func:
            calculate_func = lambda subli: len(subli)
        total = calculate_func(dataset)
        l = self.group_by_keys(dataset, key_name)
        #print "key_name: {}".format(key_name)
        # print "grouped_array: {}".format(str(l))
        l = [{'category': key_name, 'category_key_name': subli[0][key_name],'calculation_portion':calculate_func(subli)/float(total), 'calculation_result': calculate_func(subli),'length': len(subli)} for subli in l]
        return l

    def unusual_attributes_total(self,dataset,calculate_func=None):
        keys = dataset[0].keys()
        L = []
        for key in keys:
            L.extend(self.unusual_attributes_from_keyname(dataset,key,calculate_func=calculate_func))
        return L

    def calculate_determine_from_key(self, dataset, key_name, calculate_func=None):
        """
        :param dataset: array
        :param key_name: the column by which to determine the variance (e.g. industry)
        :param calculate_func: the function by which to calculate on
        :return: a variance for the data set
        """
        # dataset = dataset[:10]
        l = self.group_by_keys(dataset, key_name)
        print "key_name: {}".format(key_name)
        # print "grouped_array: {}".format(str(l))
        if not calculate_func:
            calculate_func = lambda subli: len(subli)

        l = [{'category':key_name,'category_key_name':subli[0][key_name],'calculation_result':calculate_func(subli),'length':len(subli)} for subli in l]
        return l
        # print "key_name: {}".format(key_name)
        #print "results: {}".format(str(l))
        #return variance(l)



class CalculationFunctions(CorrelationDetermine):
    def float_convert_try(self,v):
        if v:
            try:
                try:
                    v = float(v.replace(",", "").replace("\"", ""))
                except AttributeError:  #AttributeError: 'int' object has no attribute 'replace'
                    #print "<string_to_float_try>"
                    #print "\tv:{}".format(str(v))
                    try:
                        v = float(v)
                    except:
                        try:
                            v = float(v)
                        except:
                            v = 0.0
            except ZeroDivisionError:
                v = 0.0
            except ValueError:  #ValueError: invalid literal for float(): 09/23/14
                v = 0.0
        else:
            v = 0.0
        return v

    def running_total(self,l,key='ARR__c',new_key='Running_ARR'):
        for enum,D in enumerate(l):
            running_total = sum(map(lambda Dict:self.float_convert_try(Dict[key]),l[:enum+1]))
            D.update({new_key:running_total})
        return l


class BaseStatFunctions(CalculationFunctions):
    def most_recent_highest(self,l):
        most_recent = l[-1:][0]
        return all([num < most_recent for num in l[:-1]])

    #used to calculate someone's rate of doing something over the past x amount of days
    #can be used to calculate md's rate for past 30 days
    def rate_of_list_trailing(self, l, num):
        func = lambda i: i if i >= 0 else 0
        funca = lambda i: num if i + 1 >= num else i + 1

        l = [sum([n] + l[func(i - num + 1):i]) for i, n in enumerate(l)]
        l = [n / float(funca(i)) for i, n in enumerate(l)]
        return l

    def rate_of_list(self, l):
        l = [sum([n] + l[:i]) for i, n in enumerate(l)]
        l = [n / float((i + 1)) for i, n in enumerate(l)]
        return l

    #[6000.0, 22200.0, 38400.0, 54600.0, 70800.0, 87000.0]
    def histogram_bin_format(self,l):
        diff = float(l[-1:][0]) - float(l[-2:-1][0])
        #diff = diff  - 1
        l = ["{} - {}".format(str(int(i)), str(int(float(i) + diff))) for i in l]
        l = l[:-1]
        return l

    def stats_metrics(self, l, bins=5):
        l = numpy.array(l)
        histogram_list =  numpy.histogram(l, bins=bins)[0].tolist()
        histogram_bins = numpy.histogram(l, bins=bins)[1].tolist()
        histogram_bins_formatted = self.histogram_bin_format(histogram_bins)
        D = {
        'mean': numpy.std(l),
        'median': numpy.mean(l),
        'std': numpy.median(l),
        'count': len(l),
        'histogram_list':histogram_list,
        'histogram_bins': histogram_bins,
        'histogram_bins_formatted': histogram_bins_formatted}
        return D
        #{'std': 42.5, 'count': 6, 'histogram_bins': [38.0, 39.4, 40.8, 42.2, 43.6, 45.0], 'median': 42.0, 'histogram_list': [1, 0, 2, 2, 1], 'mean': 2.1602468994692869}

    def zscore_list_convert(self, l):
        l = numpy.array(l)
        l = stats.zscore(l)
        l = list(l)
        return l

    def zscore_from_list(self, v, l):
        i = l.index(v)
        v = self.zscore_list_convert(l)[i]
        return v

    def zscore_list_to_percentile(self, z_scores):
        l = list(scipy.stats.norm.sf(z_scores))
        return l

    def zscore_to_percentile(self, z_scores):
        l = list(scipy.stats.norm.sf([z_scores]))
        return l[0]

    def confidence_interval(self, l, confidence=.85):
        a = 1.0 * numpy.array(l)
        n = len(a)
        m, se = numpy.mean(a), scipy.stats.sem(a)
        h = se * sp.stats.t._ppf((1 + confidence) / 2., n - 1)
        return m, m - h, m + h
        #(4.5, 2.3341494103866087, 6.6658505896133917)


    def correlation_intercept_rvalue_return(self,a,b): #http://stackoverflow.com/questions/3949226/calculating-pearson-correlation-and-significance-in-python
        return linregress(a, b)
        #LinregressResult(slope=0.20833333333333337, intercept=13.375, rvalue=0.14499815458068521, pvalue=0.68940144811669501, stderr=0.50261704627083648)
        #LinregressResult(slope=0.20833333333333337, intercept=13.375, rvalue=0.14499815458068521, pvalue=0.68940144811669501, stderr=0.50261704627083648)
        #(0.20833333333333334, 13.375, 0.14499815458068518, 0.68940144811669501, 0.50261704627083648)
        # slope, intercept, r-value, p-value, stderr

    def outlier_identify(self,l, thresh=3.5):
        points = numpy.array(l)
        if len(points.shape) == 1:
            points = points[:,None]
        median = np.median(points, axis=0)
        diff = np.sum((points - median)**2, axis=-1)
        diff = np.sqrt(diff)
        med_abs_deviation = np.median(diff)

        modified_z_score = 0.6745 * diff / med_abs_deviation

        outlier_bools =  list(modified_z_score > thresh)
        l = [tup[1] for tup in zip(outlier_bools,l) if tup[0]]
        return l


#calcluating the mean
def mean_average():
    a = numpy.array([[1, 2], [3, 4]])
    print a
    print numpy.mean(a)

class StatisticsFunctions(BaseStatFunctions):
    pass


#input: list of integers
#output: dictionary with mean, standard deviation, outliers

def lin_gress_example():
    l1 = [15, 12, 8, 8, 7, 7, 7, 6, 5, 3]
    l2 = [10, 25, 17, 11, 13, 17, 20, 13, 9, 15]
    print StatisticsFunctions().correlation_intercept_rvalue_return(l1,l2)

# from Shippy.Functions.statistics_functions import StatisticsFunctions
# l = [1,2,3,4,5,6,7,1000]
# print StatisticsFunctions().outlier_identify(l)

#http://stackoverflow.com/questions/36377550/how-to-group-by-quarter-and-calculate-average-from-an-array-using-numpy
# how to group by quarter and calculate average using numpy?
# def date_by_quarter():
#     value = 'value'
#     Data = [{'date':'2015-01-01',value:5},{'date':'2015-02-01',value:6},{'date':'2015-03-01',value:7},{'date':'2015-04-01',value:8},{'date':'2015-05-01',value:9},{'date':'2015-06-01',value:10},{'date':'2015-07-01',value:11},{'date':'2015-08-01',value:12}]
#     Data1 = json.dumps(Data)
#     a = pd.read_json(Data1)
#     print a[a['date'].dt.quarter == 1].mean() # 1st quarter
#     print a[a['date'].dt.quarter == 2].mean() # 2nd quarter
#     print a[a['date'].dt.quarter == 3].mean() # 3rd quarter

#http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html
def data_frame_example():
    d = {'col1': ts1, 'col2': ts2}
    # df = DataFrame(data=d, index=index)
    # df2 = DataFrame(np.random.randn(10, 5))
    df3 = DataFrame(np.random.randn(10, 5),columns=['a', 'b', 'c', 'd', 'e'])

def main():
    date_by_quarter()
    return
    l = [20.0, 16.0, 15.0, 17.0, 34.0, 8.0, 33.0, 22.0, 43.0, 23.0, 16.0, 9.0, 34.0, 22.0, 5.0, 24.0, 21.0, 25.0, 29.0, 10.0, 15.0, 142.0, 16.0, 17.0, 82.0, 29.0, 32.0, 164.0, 8.0]

    #l = [1,2,3,4,5,6,7,1000]
    print StatisticsFunctions().outlier_identify(l)

    #mean_average()

    return
    lin_gress_example()

    return
    l = [38, 43, 42, 41, 43, 45]
    print StatisticsFunctions().stats_metrics(l)
    return
    l = StatisticsFunctions().rate_of_list_trailing(l, 1)
    print l

    return
    print l[2:4]
    return

    print l
    return
    l = .57
    print StatisticsFunctions().zscore_to_percentile(l)

    return
    print StatisticsFunctions().stats_metrics(l)
    print StatisticsFunctions().confidence_interval(l)

    return
    l = range(10)
    print StatisticsFunctions().confidence_interval(l)

    return
    a = numpy.array([5, 10, 15])
    print numpy.std(a)
    print numpy.mean(a)
    print numpy.median(a)

    print numpy.histogram([4, 10, 15], bins=5)[0].tolist()
    print numpy.histogram([4, 10, 15], bins=5)[1].tolist()

    #2.5
    #standard deviation


if __name__ == "__main__": main()

#table_functions.py

import locale
#locale.setlocale(locale.LC_ALL, 'en_US')
import dateutil.parser
from Shippy.Functions.number_functions import Format
#from Shippy.Functions.ListFunctions import ListMisc

import re
import HTML

from operator import itemgetter

class TableLinkFunctions(object):
	"""the purpose is to take the id at the end of the list 
	and turn the beginning to link"""

	#only works for list if ID is in last colum
	def ListLinkCreate(self,lst):
		return map(self.linkcreate,lst)

	#it takes in the lhe sublist 
	#assumes the name desired is first item
	#removes the last item
	def linkcreate(self,lst):
		name = lst[0]
		link = "https://na2.salesforce.com/"+lst[-1:][0]
		lst[0] = HTML.link(name,link)
		lst = lst[:-1]
		return lst

class ListDictFunctions(object):
	"""Purpose is to turn Salesforce into Dict Query"""
	def ListDictConvert(self,lst,keys):
		keys = self.keysconvert(keys)
		Dict = self.ListDictCreate(lst,keys)
		return Dict

	def ListDictCreate(self,lst,keys):
		lst = [self.KeyAppend(subli,keys) for subli in lst]
		return lst

	def KeyAppend(self,subli,keys):
		lst = zip(keys,subli)
		return dict(lst)

	def keysconvert(self,keys):
		lst = keys.split(",")
		#lst = self.ReplaceNamePart(lst)
		return lst

	def ReplaceNamePart(self,lst):
		return map(self.ReplaceNamePartItem,lst)

	def ReplaceNamePartItem(self,val):
		val = val.replace(".Name","")
		val = val.replace("__c","")
		val = val.replace("_"," ")
		return val

class TableListFunctions(object):
	"""The purpose is to take in list and titles of that list to
	create a new list"""
	def TableListConvert(self,lst,headers):
		headers = self.headersconvert(headers)
		lst.insert(0,headers)
		return lst

	def headersconvert(self,headers):
		lst = headers.split(",")
		lst = self.ReplaceNamePart(lst)
		return lst

	def ReplaceNamePart(self,lst):
		return map(self.ReplaceNamePartItem,lst)

	def ReplaceNamePartItem(self,val):
		val = val.replace(".Name","")
		val = val.replace("__c","")
		val = val.replace("_"," ")
		return val

class TableFunctions(object):
	""" The purpose of this module is to create a module that takes in 
	values that are contained within two lists (e.g. [['32.1']]) and 
	take in multiple items like this to create a single table with 
	column names as the name of the function and then the values"""

	def RemoveDoubleBrackets(self,val):
		return val[0][0]

	def FloatConvert(self,val):
		try:
			val = float(val)
			if val >= 1 or val == 0: #I dont want to convert a 0 to percentage
				val = self.NumberConvert(val)
				return val
			else:
				val = Format().Percentage(val)
				return val
		except ValueError:
			return 0

	def NumberConvert(self,val):
		return "{:,}".format(int(float(val)))
		return locale.format("%d", int(float(val)), grouping = True)

	def FunctionNameGet(self,func):
		val = func.__name__ 
		val = val.replace("_"," ")
		return val

	def TableConvert(self,*args):
		funca = lambda val: self.FunctionNameGet(val)
		funcb = lambda val: self.FloatConvert(self.RemoveDoubleBrackets(val()))
		#funcb = lambda val: self.NumberConvert(funcb(val))
		lsta = [funca(arg) for arg in args]
		lstb = [funcb(arg) for arg in args]
		lst = [lsta] + [lstb]
		return lst


class TableSortFunctions(object):
	"""The purpose is to sort a table that has the first row 
	as headers"""

	def TableSort(self,lst,col):
		lst = lst[:1] + self.ListSort(lst[1:],col)
		return lst


	def ListSort(self,lst,col):
		return sorted(lst, key=itemgetter(col), reverse=True)
		#return ListMisc().ListSortReverse(lst,col)

class TableKeywordFunctions(object):
	""" The purpose of this module is to create a module that takes in 
	values that are contained within two lists (e.g. [['32.1']]) and 
	take in multiple items like this to create a single table with 
	column names as the name of the function and then the values"""

	def RemoveDoubleBrackets(self,val):
		return val[0][0]

	def FloatConvert(self,val):
		try:
			val = float(val)
			if val >= 1 or val == 0 or val <= -1: #I dont want to convert a 0 to percentage
				val = self.NumberConvert(val)
				return val
			else:
				val = Format().Percentage(val)
				return val
		except ValueError:
			return 0

	def NumberConvert(self,val):
		return "{:,}".format(int(float(val)))
		return locale.format("%d", int(float(val)), grouping = True)

	def FunctionNameGet(self,func):
		val = func.__name__ 
		val = val.replace("_"," ")
		return val

	def TableConvert(self,*args,**kw):
		funca = lambda val: self.FunctionNameGet(val)
		funcb = lambda val: self.FloatConvert(self.RemoveDoubleBrackets(val(**kw)))
		#funcb = lambda val: self.NumberConvert(funcb(val))
		lsta = [funca(arg) for arg in args]
		lstb = [funcb(arg) for arg in args]
		lst = [lsta] + [lstb]
		return lst

	def TableConvertTranspose(self,*args,**kw):
		lst = self.TableConvert(*args,**kw)
		lst = map(list, zip(*lst))

		return lst


def main():
	lst = ['a','b','c']
	print TableSortFunctions().TableSort(lst)

if __name__ == "__main__": main()

#text_functions.py

#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
if sys.platform == 'darwin':
    sys.path.append("/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/")

# from Shippy.Functions.text_functions import TextFunctions

"""
	This module contains functions used to manipulate text including file names and other types of text
"""
import re
import inspect
import sys
import time
from datetime import datetime, timedelta, time, date
import dateutil.parser  #used for string_to_date_try
import operator
import shlex
import base64
import unicodedata
import string
#import HTML
from dateutil.parser import parse
import time as t
import os
import itertools
from itertools import *
from itertools import izip_longest
import icalendar
from icalendar import Calendar

import json
#from nltk.corpus import wordnet



# class NLTKFunctions(object):
#     def word_test(self,word_to_test):
#         if not wordnet.synsets(word_to_test):
#             return False
#           #Not an English Word
#         else:
#             return True
#           #English Word
from Shippy.Functions.performance_functions import PerformanceFunctions


class iCalFunctions(object):
    def json_from_ical_format_to_dict(self,ical_array):
        beginning_indexes = [i for i, e in enumerate(ical_array) if e == {'BEGIN': 'VEVENT'}]
        ending_indexes = [i for i, e in enumerate(ical_array) if e == {'END': 'VEVENT'}]
        index_ranges = zip(beginning_indexes, ending_indexes)

        list_of_dicts_to_single_dict = lambda subli: dict([D.items()[0] for D in subli])
        ical_grouped_array = [list_of_dicts_to_single_dict(ical_array[beg:end + 1]) for beg, end in index_ranges]
        return ical_grouped_array

    def json_from_ical(self,ical_content): #http://stackoverflow.com/questions/40770437/how-to-create-a-json-array-from-an-icalendar-file-utilizing-python
        result = Calendar().from_ical(ical_content)
        r = []
        for key, value in result.property_items():
            inner_d = {}
            if isinstance(value, icalendar.prop.vDDDTypes):
                inner_d[key] = value.dt.isoformat()
            elif isinstance(value, icalendar.prop.vText):
                inner_d[key] = TextFunctions().unicode_check_fix(value)
            #vText
            else:
                inner_d[key] = value
            r.append(inner_d)
        r = self.json_from_ical_format_to_dict(r)
        return r
        # u = json.dumps(r, indent=4)
        # return u

class FormatFunctions(iCalFunctions):

    def number_format_thousandths(self,i,max=1000,pointer=0):
        i = TextFunctions().string_to_float_try(i)

        if i >= max:
            v = TextFunctions().comma_number_from_float(i/1000,pointer=pointer) + "K"
        elif i <= max * -1:
            i = i * -1
            v = TextFunctions().comma_number_from_float(i/1000,pointer=pointer) + "K"
            v = "-" + v
        else:
            v = TextFunctions().comma_number_from_float(i,pointer=pointer)
        return v


    def func_determine(self, i, k):

        if i == 'number':
            #func = lambda D: "{:,}".format(int(float(D[k])))
            func = lambda D: "{0:,.2f}".format(float(D[k])) if float(D[k]) % 1 else "{0:,.0f}".format(float(D[
                k]))  #http://stackoverflow.com/questions/10507554/python-string-interpolation-only-show-necessary-decimal-places
        elif i == 'underscore_resort':
            func = lambda D: ''.join([i.split("_")[2] +" "+i.split("_")[1]+i.split("_")[0][2:] for i in D[k].split(",")])
        elif i == 'underscore_remove':
            func = lambda D: str(D[k]).replace("_"," ")
        elif i == 'number_decimal':
            func = lambda D: "{0:,.2f}".format(float(D[k]))
        elif i == 'text_shorten':
            func = lambda D: str(D[k])[:60] + '...' if len(str(D[k])) > 60 else str(D[k])[:60]
        elif i == 'thousandths_decimal':
            func = lambda D: self.number_format_thousandths(float(D[k]),pointer=1).replace("K","")
        elif i == 'thousandths_prefix':
            func = lambda D: self.number_format_thousandths(float(D[k]))
        elif i == 'thousandths_prefix_negate':
            func = lambda D: '-' + self.number_format_thousandths(float(D[k]))
        elif i == 'thousandths':
            func = lambda D: self.number_format_thousandths(float(D[k])).replace("K","")
        elif i == 'number_thousandths':
            func = lambda D: self.number_format_thousandths(float(D[k]))
        elif i == 'number_no_decimal':
            func = lambda D: "{0:,.0f}".format(float(D[k]))
        elif i == 'percent' or i == 'percentage':
            func = lambda D: "{0:.2%}".format(float(D[k]))
        elif i == 'percent_no_decimal' or i == 'percentage' or i == 'percentage_no_decimal':
            func = lambda D: "{0:.0%}".format(float(D[k]))
        elif i == 'percent_decimal':
            func = lambda D: "{0:.3%}".format(float(D[k])) if len(
                str(float(D[k])).split('.')[1]) > 2 else "{0:.0%}".format(float(D[k]))
        elif i == 'bamboo_link':
            func = lambda D: HTML.link(str(D[k]),
                                       "https://curalate.bamboohr.com/employees/employee.php?id=" + str(D['id']))
        elif i == 'bill_invoice_link':
            func = lambda D: HTML.link(str(D[k]),
                                       "https://app.bill.com/Invoice?id=" + str(D['invoiceId']))
        elif i == 'airbnb_link':
            func = lambda D: HTML.link(str(D[k]),
                                       D['listing_url'])
        elif i == 'url_link':
            func = lambda D: HTML.link(str(D[k]),
                                       D['url'])
        elif i == 'link':
            func = lambda D: HTML.link(str(D[k]), "https://na2.salesforce.com/" + str(D['Id']))
        elif i == 'date':
            func = lambda D: TimeFunctions().date_format_from_string(D[k], strf='%m/%d/%Y')
        elif i == 'unicode_to_datetime':
            func = lambda D: TimeFunctions().unicode_to_day_date(D[k], strf='%m/%d/%Y %I:%M%p')
        elif i == 'date_time_format':
            func = lambda D: TimeFunctions().date_format_from_string(D[k], strf='%m/%d/%Y %I:%M%p')

        elif 'http' in str(i).lower() and str(i).count('[') >1 and str(i).count(']') > 1:
            func = lambda D: self.url_test_func(D,k,i)
            #print HTML.link(str(D[k]),TextFunctions().string_between_pull_replace(i,lambda i: D[i],start='\[',end='\]',keep=False ))
            #func = lambda D: HTML.link(str(D[k]),TextFunctions().string_between_pull_replace(i,lambda key: D[key],start='\[',end='\]',keep=False ))
        elif 'http' in str(i).lower() or ('[' in str(i) and ']' in str(i)):
            url_key = TextFunctions().string_between_pull(i,start='\[',end='\]')
            if 'http' in i:
                url = i.split('[')[0]
                func = lambda D: HTML.link(str(D[k]), url + str(D[url_key]))
            else:
                func = lambda D: HTML.link(str(D[k]), str(D[url_key]))
        else:
            func = lambda D: D[k]
        return func

    def format_determine(self,value,format):
        #PerformanceFunctions().comment("formatting the following value: {}".format(str(value)))
        value = TextFunctions().string_to_float_try(value)
        i = format
        if i == 'number':
            return "{0:,.2f}".format(float(value)) if float(value) % 1 else "{0:,.0f}".format(float(value))
        else:
            temp_dict = {'temp_key':value}
            return self.func_determine(format,'temp_key')(temp_dict)


class ExcelFunctions(FormatFunctions):
    """
    Text manipulation functions specific or relevant to excel
    """

    #This method converts a number to a corresponding letter (e.g. 1 returns a, 28 returns AB).
    #Used by row_list_update_from_string in ShippyApp.API.gspread_api import GspreadWrite
    def number_letter_convert(self, val):
        if val <= 26:
            val = val - 1
            val = chr(val + ord('A'))
            return val
        else:
            val = val - 1
            vala = int(float(val / 26)) - 1
            vala = chr(vala + ord('A'))

            valb = val - (int(float(val) / 26) * 26)
            valb = valb
            valb = chr(valb + ord('A'))

            val = str(vala) + str(valb)
            return val

    def letter_number_convert(self, val):
        if len(val) <= 1:
            v = ord(val) - 64
        else:
            for i in range(1000):
                if self.number_letter_convert(i) == val:
                    return i
        return v

    def cell_reference_list_from_cell_range(self,cell_range):
        """
        :param cell_range:  e.g. B5:N5
        :return: B5,C5,D5,E5,...
        """
        cell_reference1,cell_reference2 = cell_range.split(":")

        cell_reference1_number = TextFunctions().num_pull_from_str_regex(cell_reference1)[0]
        #1
        cell_reference2_number = TextFunctions().num_pull_from_str_regex(cell_reference2)[0]
        #1
        cell_reference1_letter = cell_reference1.replace(cell_reference1_number,'')
        #A
        cell_reference2_letter = cell_reference2.replace(cell_reference2_number,'')
        #B
        #print cell_reference1_number,cell_reference2_number,cell_reference1_letter,cell_reference2_letter
        if cell_reference1_number == cell_reference2_number:
            column_array = range(self.letter_number_convert(cell_reference1_letter),self.letter_number_convert(cell_reference2_letter)) + [self.letter_number_convert(cell_reference2_letter)]
            l = [self.number_letter_convert(int(col))+str(int(cell_reference1_number)) for col in column_array]
            #['A1', 'B1']
            return l
        elif cell_reference1_letter == cell_reference2_letter: #e.g. B1:B2
            column_array = range(int(cell_reference1_number),int(cell_reference2_number)) + [cell_reference2_number]
            l = [cell_reference1_letter+str(row) for row in column_array]
            return l



class TextFileFunctions(ExcelFunctions):
    def previous_file(self):
        file = inspect.getfile(inspect.currentframe().f_back.f_back)#.split("/")#[-1:][0]
        f = open(file, 'r+')
        f = f.read()
        return f

    def previous_previous_file(self):
        file = inspect.getfile(inspect.currentframe().f_back.f_back.f_back)#.split("/")#[-1:][0]
        f = open(file, 'r+')
        f = f.read()
        return f


    def current_file(self):
        file = inspect.getfile(inspect.currentframe().f_back)#.split("/")#[-1:][0]
        f = open(file, 'r+')
        f = f.read()
        return f

    def func_class_name(self,func):
        class_string = str(func.im_class).split('__main__.')[1].split("'")[0]
        func_string = func.__name__
        func_string = "{}().{}".format(str(class_string),str(func_string))
        return func_string


class TypeDetermineFunction(TextFileFunctions):
    #take in a text and determine if its a date, number
    # determine if what the string is
    # integer, double, boolean, date, datetime, duration, char_string, unicode_string
    def text_type_determine(self,i):
        if type(i) == int:
            return 'integer'
        elif type(i) == float:
            return 'double'
        elif type(i) == bool:
            return 'boolean'
        elif type(i) == str:
            return 'string'
        else:
            return 'string'


class HTMLFunctions(TypeDetermineFunction):
    def html_table_create(self, *args):
        lst = [HTML.table( \
            arg[1:], \
            attribs={'style': 'text-align: center'}, \
            header_row=HTML.TableRow(arg[0], bgcolor='D5D4D6'), \
            col_align=['center'] * len(arg[0])
             ) \
               for arg in args]
        lst = ''.join(lst)
        Header = "<table width='100%%' bgcolor='#aaaaaa'><td valign='top' style='margin: 0 20px;padding: 10px 0;'></table>"
        return lst

    # change a list of items into an html list of items
    def html_list(self,l):
        string_func = lambda i: "<li>{}</li>".format(i)
        l =[string_func(i) for i in l]
        s = ''.join(l)
        s = "<ul>{}</ul>".format(s)
        return s

class TextAlgorithm(HTMLFunctions):
    # returns the common string between two strings
    # http://stackoverflow.com/questions/18715688/find-common-substring-between-two-strings
    def common_string_between_two_strings(self,sa, sb):
        def _iter():
            for a, b in zip(sa, sb):
                if a == b:
                    yield a
                else:
                    return
        return ''.join(_iter())

    # different form of common_start
    # http://stackoverflow.com/questions/18715688/find-common-substring-between-two-strings
    def longest_substring_finder(self,string1, string2):
        answer = ""
        len1, len2 = len(string1), len(string2)
        for i in range(len1):
            match = ""
            for j in range(len2):
                if (i + j < len1 and string1[i + j] == string2[j]):
                    match += string2[j]
                else:
                    if (len(match) > len(answer)): answer = match
                    match = ""
        return answer
class FileFunctions(TextAlgorithm):
    #print text to a file
    def file_save(self,text=None,file_name=None):
        f = open(file_name, 'w+')
        f.write(str(text))
        print "text_functions.py, <file_save>"
        print "save location: " + str(file_name)
        print "text below:\n" + str(text)
        f.close()
class IronWorkerParse(FileFunctions):
    def iron_payload_pull(self, System):
        print "file Shippy/Functions/text_functions.py <iron_payload_pull>"
        payload_file = None
        for i in range(len(System)):
            if System[i] == "-payload" and (i + 1) < len(System):
                payload_file = System[i + 1]
                with open(payload_file, 'r') as f:
                    payload = f.read()
        # print "\n" * 10
        # print "PAYLOAD BELOW:"
        # print payload
        # print "PAYLOAD ABOVE"
        # print "\n" * 10
        return payload


#Calculate number of leading spaces
class TextCalculate(IronWorkerParse):
    #http://stackoverflow.com/questions/13648813/what-is-the-pythonic-way-to-count-the-leading-spaces-in-a-string
    def leading_spaces_count(self, a):
        v = len(a) - len(a.lstrip())
        return v

    def non_ascii_leading_count(self, s):
        try:
            i = s.encode('ascii', 'ignore')[0]
            v = s.split(i)[0]
            v = len(v)
        except IndexError:
            v = 0
        return v


class UnicodeDecodeEncodeFunctions(TextCalculate):
    def replace_only_line_end(self,s,old_string,new_string):

        l = list(s)
        if l[0] == old_string and l[-1:][0] == old_string: #that way both the beginning and end have to ahve it
            if l[0] == old_string:
                l[0] = new_string
            if l[-1:][0] == old_string:
                l[-1:] = new_string
        s = ''.join(l)
        return s

    def replace_non_printable(self, s, replacer=' '):
        func = lambda i: i if i in string.printable else replacer
        l = [func(i) for i in s]
        s = ''.join(l)
        return s

    def replace_non_printable_no_extra_space(self, s, replacer=' '):
        s = self.replace_non_printable(s)
        s = TextFunctions().extra_space_removal(s)
        return s

    def filter_non_printable(self,
                             s):  #http://stackoverflow.com/questions/8689795/python-remove-non-ascii-characters-but-leave-periods-and-spaces
        s = filter(lambda x: True if x in string.printable else False, s)
        return s


    def accent_convert(self, s):
        return ''.join(c for c in unicodedata.normalize('NFD', s)
                       if unicodedata.category(c) != 'Mn')
        return s

    def remove_apostrophe_from_ends(self,s,special_character ="'"):
        if s[0] == special_character:
            s = s[1:]
        if s[-1:] == special_character:
            s = s[:-1]
        return s


    #http://stackoverflow.com/questions/517923/what-is-the-best-way-to-remove-accents-in-a-python-unicode-string
    def remove_accents(self, input_str):
        #input_str = input_str.decode('utf-8')
        nkfd_form = unicodedata.normalize('NFKD', input_str)
        only_ascii = nkfd_form.encode('ASCII', 'ignore')
        return only_ascii

    def special_character_remove(self, s,replacer=None):
        if replacer:
            l = re.findall('[^a-zA-Z0-9\n\.]', s)
            l = [i for i in l if i != ' ']
            for i in l:
                s = s.replace(i,replacer)
        else:
            s = re.sub('[^a-zA-Z0-9\n\.]', ' ', s)
        return s



    #purpose is to never have a unicode error ever again
    def unicode_guarentee(self,s,func):
        try:
            return func(s)
        except UnicodeDecodeError:
            try:
                s = s.decode("utf8")
            except:
                pass
            try:
                s = s.decode('utf8', 'ignore')
            except:
                pass
            return s

        except UnicodeEncodeError:
            try:
                print "Unicode Error: {}".format(s)
                s = func(self.unicode_encode_error_fix(s))

                return s
            except UnicodeEncodeError:
                try:
                    s = func(self.remove_accents(s))
                    return s
                except UnicodeEncodeError:
                    s = func(self.special_character_remove(s))
                    return s

    def unicode_check_fix(self,old_string):
        new_string = self.unicode_guarentee(old_string,str)
        return new_string


    def file_name_create_from_string(self, query,lower_case_apply=False):
        """
        :param query:
        :return: a string that is ready to be saved as a file name
        """
        s = self.unicode_check_fix(query).strip()
        s = self.special_character_remove(s)
        s = TextFunctions().extra_space_removal(s)
        s = s.replace(' ','_')
        if lower_case_apply:
            s = s.lower()
        return s


class StringMergeText(UnicodeDecodeEncodeFunctions):
    #based on special character
    def string_merge_text(self, s, start=None, end=None):
        l = TextFunctions().strinb_between_pull_replace(s, start=start, end=end)


class StringBinaryConversion(StringMergeText):
    def binary_from_string(self, s):
        s = base64.b64encode(str(s))
        return s

    def binary_to_text(self, s):
        s = base64.b64decode(s)
        return s

    def binary_to_text_surrounded_by_text(self, s):
        decoded = base64.b64decode(s)
        encoded = base64.b64encode(str(decoded))
        new_string = s.replace(encoded,decoded)

        return new_string

    def binary_string_from_dict(self, D):
        s = "&".join([str(tup[0]) + "=" + self.binary_from_string(tup[1]) for tup in D.items()])
        return s

    def gspread_text_link_create(self,name,link_or_id,url_base="https://na2.salesforce.com/"):
        if '.com' not in link_or_id:
            link_or_id = url_base + link_or_id
        try:
            link = """=HYPERLINK("{}","{}")""".format(link_or_id,name)
        except UnicodeEncodeError:

            link = """=HYPERLINK("{}","{}")""".format(link_or_id, TextFunctions().unicode_check_fix(name))

        return link

    def binary_link_from_dict(self, s, D):
        s = s + self.binary_string_from_dict(D)
        return s

    #Input: s = ButtonParams=U3ViamVjdCxFbWFpbA==&Email=Q3J1emMwOUBnbWFpbC5jb20=&Subject=TXkgU3ViamVjdA=='
    def dict_from_url_string(self, s):
        D = dict([(i.split("=", 1)[0], i.split("=", 1)[1]) for i in s.split("&")])
        return D


    def index_error_return_none(self,func,s,error_return='None'):
        try:
            s = func(s)
        except IndexError:
            s = error_return
        return s

    # Used for selenium scrape of airbnb to get the info from the tag
    # in the case that the result of delimter 1 doesn't have it then just return none for whatever that is
    # Example
    # s = """<input class="decorative-input inspectletIgnore" id="signin_email" name="email" placeholder="Email Address" type="email"/>"""
    # delimiter1 - &
    # delimiter2 - =
    # tag = """<input class="decorative-input inspectletIgnore" id="signin_email" name="email" placeholder="Email Address" type="email"/>"""
    # D = TextFunctions().dict_from_value_seperated_string(tag," ","=")
    # returns {'inspectletIgnore"': 'None', 'name': '"email"', 'type': '"email"/>', 'id': '"signin_email"', 'Address"': 'None', 'placeholder': '"Email', 'class': '"decorative-input', '<input': 'None'}
    def dict_from_value_seperated_string(self, s,delimiter1,delimiter2,error_return='None'):
        l = s.split(delimiter1)
        split_if_splittable = lambda i: i.split(delimiter2, 1)[1]
        D = dict([(i.split(delimiter2, 1)[0], self.index_error_return_none(split_if_splittable,i,error_return=error_return) ) for i in l])
        return D

    def dict_from_binary_url_string(self, s):
        D = dict([(i.split("=", 1)[0], self.binary_to_text(i.split("=", 1)[1])) for i in s.split("&")])
        return D


class NumberDatePercentageFunctions(StringBinaryConversion):
    def comma_number_from_float(self,v,pointer=0):
        s = "{0:,."+str(pointer)+"f}"
        s = s.format(float(v))
        return s


    #10m -> 10000000, 10K -> 10000
    def metric_shortner_reformat(self, s):
        m_reformat = lambda i: str(float(i.split("m")[0]) * 1000000) if 'm' in i.lower() else i
        k_reformat = lambda i: str(float(i.split("k")[0]) * 1000) if 'k' in i.lower() else m_reformat(i)
        func_condition = lambda i: i if 'm' not in i.lower() and 'k' not in i.lower() else k_reformat(i)
        s = func_condition(s)
        return s


    def int_convert_from_string(self, s):
        list_convert_func = lambda i: i[0] if isinstance(i, list) else i
        s = list_convert_func(list_convert_func(s))
        try:
            try:
                v = int(s)
            except ValueError:
                #>>'1.0'
                try:
                    v = int(float(s))
                except ValueError:  #ValueError: could not convert string to float:
                    v = 0
            v = "{:,}".format(v)
        except TypeError:
            v = 0
        return v

    def percentage_from_float(self,i):
        return "{0:.2%}".format(float(i))

    def number_percentage_convert(self, i):
        #print i
        if not i:
            i = 0.0
        elif i != '' and i != None:
            try:
                i = float(i)
            except ValueError:
                i = 0
        try:
            if 0 < i < 1 or 1 < i < 2 or 2 < i < 3:  #in case over 100%
                v = "{0:.1%}".format(i)
            # elif 1 < i < 2: #convet to float if below 2
            # 	v = self.float_convert_from_string(i)
            else:
                v = self.int_convert_from_string(i)
        except ValueError:
            v = self.int_convert_from_string(i)
        return v

    def number_convert_try(self, v, numformat=None):
        try:
            v = v.replace("\"", "").replace(",", "").replace("'", "").replace("$","")
            if "(" in str(v) and ")" in str(v):
                v = "-" + str(v.replace("(","").replace(")",""))
            v = float(v)
            if numformat:
                if 0 < v < 1 or 1 < v < 2 or 2 < v < 3:
                    v = "{0:.2%}".format(v)
                else:
                    v = float(v)  #may be an issue
                    v = "{:,}".format(v)
        except AttributeError:
            #print "Line 20: AttributeError"
            pass
        except ValueError:
            #print "Line 23: ValueError"
            pass
        return v

    def date_convert_try(self, v, strf="%Y-%m-%d"):
        try:
            if v:  #in the case it is a blank
                v = dateutil.parser.parse(v, ignoretz=True)
                #v = time.mktime((dateutil.parser.parse(v,ignoretz=True)).timetuple())
                v = v.strftime(strf)
            else:
                pass
        except AttributeError:
            #print "Line 31: AttributeError"
            pass
        except ValueError:
            #print "Line 34: ValueError"
            pass
        except TypeError:
            #print "Line 41: TypeError"
            pass
        except OverflowError:
            print "Line 135: OverflowError " + str(v)
            pass
        return v

    def datetime_convert_try(self, s, strf=None, strf_from='%Y-%m-%d'):
        try:
            datetime.strptime(s, strf_from)
            s = self.date_convert_try(s, strf=strf)
            return s
        except ValueError:
            return s

        #Try to change to number and then try to change to date, and if not then return original value

    def number_date_convert_try(self, v, strf="%Y-%m-%d", numformat=None):
        v = self.number_convert_try(v, numformat=numformat)
        v = self.date_convert_try(v, strf=strf)
        v = str(v)
        return v

    def number_date_convert_try_string(self, s, strf="%m/%d/%Y", numformat=True):
        func = lambda string: self.datetime_convert_try(self.number_convert_try(string, numformat=numformat), strf=strf)
        print func(shlex.split(s)[0])
        l = [(i, func(i)) for i in shlex.split(s) if i != func(i)]
        print l
        for tup in l:
            s = s.replace(tup[0], tup[1])
        return s

    def date_convert_try_conditional(self,v,strf="%Y-%m-%d"): #only convert it to a date if possible
        try:
            if v:
                if v == self.number_convert_try(v, numformat=numformat): #check that its not just a number.
                    v = dateutil.parser.parse(v, ignoretz=True)
                    v = v.strftime(strf)
                else:
                    pass
            else:
                pass
        except:
            pass
        return v


    def is_date_determine(self,string):#http://stackoverflow.com/questions/25341945/check-if-string-has-date-any-format
        try:
            parse(string)
            return True
        except ValueError:
            return False


    def date_key_test(self,v, strf="%Y-%m-%d", numformat=None):

        try:
            if v:  #in the case it is a blank
                if v == self.number_convert_try(v, numformat=numformat): # if it equals itself, then its not a number, and you can try to turn to date
                    v = dateutil.parser.parse(v, ignoretz=True)
                    #v = time.mktime((dateutil.parser.parse(v,ignoretz=True)).timetuple())
                    v = v.strftime(strf)
                    return True
                else:
                    return False
                    #v = self.number_convert_try(v, numformat=numformat)
            else:
                pass
        except AttributeError:
            #print "Line 31: AttributeError"
            pass
        except ValueError:
            #print "Line 34: ValueError"
            pass
        except TypeError:
            #print "Line 41: TypeError"
            pass
        except:
            pass
        return False
    #same as number_date_convert_try but more advanced and other should be deprecated
    def number_date_convert_try_conditional(self, v, strf="%Y-%m-%d", numformat=None):
        try:
            if v:  #in the case it is a blank
                if v == self.number_convert_try(v, numformat=numformat): # if it equals itself, then its not a number, and you can try to turn to date
                    v = dateutil.parser.parse(v, ignoretz=True)
                    #v = time.mktime((dateutil.parser.parse(v,ignoretz=True)).timetuple())
                    v = v.strftime(strf)
                else:
                    v = self.number_convert_try(v, numformat=numformat)
            else:
                pass
        except AttributeError:
            #print "Line 31: AttributeError"
            pass
        except ValueError:
            #print "Line 34: ValueError"
            pass
        except TypeError:
            #print "Line 41: TypeError"
            pass
        except:
            pass
        return v


    def float_convert_from_string(self, s,zero_return=True):
        try:
            s = s.replace("$","").replace(",","").strip()
        except:
            pass

        try:
            try:
                v = float(s)
            except ValueError:
                #>>'1.0'
                try:
                    v = float(s)
                except ValueError:  #ValueError: could not convert string to float:
                    if zero_return:
                        v = 0
                    else:
                        v = s
            v = "%.2f" % v
        except TypeError:
            if zero_return:
                v = 0
            else:
                v = s
        return v

    #convert list to a number based on function
    def commad_number_convert_list(self, l):
        l = [i if i != '' else 0 for i in l]
        l = map(self.int_convert_from_string, l)
        return l


    def date_string_check(self, v):
        try:
            if v:  #in the case it is a blank
                v = dateutil.parser.parse(v, ignoretz=True)
                return True
            else:
                return False
        except:
            return False


class TextManipulate(NumberDatePercentageFunctions):
    def unreadable_word_remove(self,s):
        l = s.split(' ')
        l = [i for i in l if len(''.join(TextFunctions().number_comma_pull(i))) >= 4]
        for i in l:
            s = s.replace(i,'')
        s = TextFunctions().extra_space_removal(s)
        return s
    def split_uppercase(self,
                        string):  #http://code.activestate.com/recipes/440698-split-string-on-capitalizeduppercase-char/
        return re.sub(r'([a-z])([A-Z])', r'\1 \2', string)

    #take in a function and apply it to all the values
    #that are within bracket
    # s
    def string_function_apply(self, s, func, start='{{', end='}}'):
        l = TextFunctions().string_between_pull_multiple(s, '{{', '}}')

        l = [{start + i + end: func(i)} for i in l]
        for D in l:
            s = s.replace(str(D.keys()[0]), str(D.values()[0]))
        return s

    def bracket_string_replace(self, s, D, start="\{\{", end="\}\}"):
        l = re.findall(start + '(.*?)' + end, str(s), re.IGNORECASE)
        try:
            for i in l:
                replacee = "{{" + str(i) + "}}"
                s = s.replace(replacee, str(D[i]))
        except KeyError:
            s = s
        return s

    #replace whats in the brackets with a particular string
    def bracket_string_replace_with_string(self, s, replacer_string, start="\{\{", end="\}\}"):
        l = re.findall(start + '(.*?)' + end, str(s), re.IGNORECASE)
        try:
            for i in l:
                replacee = "{{" + str(i) + "}}"
                s = s.replace(replacee, str(replacer_string))
        except KeyError:
            s = s
        return s

    # in the case that there is a key error because the dict doesnt have the key necessary
    # run an alternative func that can parse it
    def bracket_string_replace_alt_func(self, s, D, start="\{\{", end="\}\}",alt_func=None):
        l = re.findall(start + '(.*?)' + end, str(s), re.IGNORECASE)
        for i in l:
            replacee = "{{" + str(i) + "}}"
            try:
                s = s.replace(replacee, str(D[i]))
            except KeyError:
                try:
                    s = s.replace(replacee, alt_func(i))
                except TypeError:
                    result = alt_func(i)
                    print "text_functions.py, <bracket_string_replace_alt_func>"
                    print "\t {}".format(str(result))
                    s = s.replace(str(replacee), str(result))

        return s

    # Public: Run a function based on text within double brackets.
    def bracket_string_replace_from_func(self, s, func, start="\{\{", end="\}\}"):
        l = re.findall(start + '(.*?)' + end, str(s), re.IGNORECASE)

        L =[]
        query_statuses = []
        for enum,i in enumerate(l):
            start = t.time()
            replacee = "{{" + str(i) + "}}"

            s = s.replace(replacee, str(func(i)))
            end = t.time()
            time_take = end - start
            L.append(time_take)
            remaining_time = float(sum(L))/float(len(L)) * float((len(l) - enum))/60
            query_statuses.append([i,time_take])
            comment = "Query Status: {}/{} ({} seconds) - Remaining: {} minutes".format(str(enum+1),str(len(l)),str(round(time_take,2)),str(round(remaining_time,2)))
            comment = comment + "- Input: {}".format(str(i))
            PerformanceFunctions().comment(comment,override=True)

        query_statuses = sorted(query_statuses, key=lambda subli: subli[1], reverse=True)
        total_time_minutes = str(float(sum(map(lambda subli: subli[1],query_statuses)))/60)
        status = "Total Time: {}".format(str(total_time_minutes))
        task_lengths = ",".join(["{} ({})".format(subli[0],str(round(subli[1],2))) for subli in query_statuses])
        PerformanceFunctions().comment(status + "\n" + task_lengths,override=True)
        return s

    #UNDER NO CIRCUMSTANCES SHOULD this return a number within list, since it's going into a matrix
    def check_bracket_format(self, v):
        if isinstance(v, list):
            v = v[0]
        if isinstance(v, list):
            v = v[0]
        if str(v) == 'None':
            v = '0.0'
        v = TextFunctions().number_percentage_convert(v)
        print "firebase_email_send.py line 178 (Inputting into Matrix Table): " + str(v)
        return v


    #UNDER NO CIRCUMSTANCES SHOULD this return a number within list, since it's going into a matrix
    def func_check_format(self, func, i):
        v = func(i)
        if isinstance(v, list):
            v = v[0]
        if isinstance(v, list):
            v = v[0]
        if str(v) == 'None':
            v = '0.0'
        v = TextFunctions().number_percentage_convert(v)
        print "firebase_email_send.py line 178 (Inputting into Matrix Table): " + str(v)
        return v


class CalculationTextFunctions(TextManipulate):
    def func_operators(self):
        D = {"+": operator.add, "-": operator.sub, "/": operator.div, "*": operator.mul}
        return D


    # #this is so that the function can process multiple at the same time
    # def string_operation_apply_extend(self,func,l):
    # 	#just have it only be able to procsss two variables for now
    # 	try:
    # 		v = func(*l)
    # 	except ZeroDivisionError:
    # 		try:

    # 			v = 0
    # 			for i,subi in enumerate(l):
    # 				v = func(v,l[i])
    # 		except ZeroDivisionError:
    # 			v = 0
    # 	return v

    def string_operation_apply_extend(self, func, l):
        v = 0
        for i, subi in enumerate(l):
            v = func(v, l[i])
        return v

    def func_try_apply(self, i, func):
        try:
            v = float(func(i)[0][0])
        except:
            v = 0.0
        return v


    def string_operation_apply(self, D, i, s, func):
        l = s.split(i)
        print "line 281 (string_operation_apply) text_functions.py: items applying function to\n\t" + str(l)
        Func = lambda i: self.func_try_apply(i, func)
        l = map(Func, l)
        print "line 297 (string_operation_apply) text_functions.py: items applying function to\n\t" + str(l)
        print "line 297 (string_operation_apply) text_functions.py: function using\n\t" + str(i) + " - " + str(D[i])
        v = self.string_operation_apply_extend(D[i], l)
        return v

    #just sees if the operator is in it and returns the split string
    #since ops only takes 1 argument this, needs to only have 2 strings after slit
    #REQUIRES IT ONLY HAVE 1 OPP
    #the challenge is that it loops to check if each operator is in the string, but it tries function on it if it doesnt have the first operator without going to the other operators
    #
    # def func_operation_apply(self,s,func):
    # 	print "line 293 text_functions.py (func_operation_apply) s: " + s
    # 	D = self.func_operators()
    # 	S = TextFunctions().string_between_pull_multiple_ignore(s,start="'",end="'") #anything within quotes wont be considered
    # 	print "line 302 text_functions.py func_operation_apply" + S
    # 	if any(map(lambda i: True if i in S else False,D.keys())): #This still can only process one though
    # 		for i in D.keys():
    # 			if i in S:
    # 				print "line 297 text_functions.py (func_operation apply): self.string_operation_apply(D,i,s,func) " + str(i)
    # 				r = self.string_operation_apply(D,i,s,func)
    # 			else:
    # 				pass
    # 	else:
    # 		print "line 300 text_functions.py (func_operation apply): func(s)"
    # 		r = func(s)
    # 	return r


    def func_operation_apply(self, s, func):
        D = self.func_operators()
        for i in D.keys():
            if i in s:
                return self.string_operation_apply(D, i, s, func)
            else:
                return func(s)
            #dont think i need the below as of jan 23, 2015
            # print D.keys()
            # for i in D.keys():
            # 	#change keys to any if any of them are in the string
            # 	if any()
            # 	if i in s:
            # 		print "line 294 text_functions.py (func_operation apply): self.string_operation_apply(D,i,s,func) "
            # 		r = self.string_operation_apply(D,i,s,func)
            # 	else:
            # return r


    def func_return_from_string(self, s):
        if s == 'sum' or s == 'Sum':
            return sum
        elif 'count' in s or 'Count' in s:
            return len

        #just say whether it's a date, number, or plain old string

    def string_type_evaluate(self, s):
        regex = r'\d{4}[-/]\d{2}[-/]\d{2}'
        if re.search(regex, str(s)):
            return "date"
        elif re.search('[.]', str(s)) or re.search('^-?[0-9]+$', str(s)):  #if number exists and nothing else
            return "number"
        else:
            return "string"

    # regardless whehter its a list or a dict, it's going to figure out the number keys
    # type can be a number or a date etc.
    def string_type_keys_from_list(self,r,type):
        while not isinstance(r,dict):
            r = r[0]
        r = [tup[0] for tup in r.items() if TextFunctions().string_type_evaluate(tup[1]) == type]
        return r






    def num_pull_from_string(self,
                             str):  #http://stackoverflow.com/questions/4289331/python-extract-numbers-from-a-string
        l = [int(s) for s in str.split() if s.isdigit()]
        return l

    def number_format_thousandths(self,i,pointer=0):
        i = TextFunctions().string_to_float_try(i)
        if i >= 1000:
            v = TextFunctions().comma_number_from_float(i/1000,pointer=pointer) + "k"
        else:
            v = TextFunctions().comma_number_from_float(i,pointer=pointer)
        return v


    def specific_word_find_search(self,search_word,string):
        return bool(re.search(r"\b{}\b".format(search_word), string,re.IGNORECASE))


    def num_pull_from_str_regex(self,str):
        l = re.findall(r'\d+', str)
        return l

    def num_pull_from_str_regex_remove(self,str):
        l = re.findall(r'\d+', str)
        for num in l:
            str = str.replace(num,"")
        return l


    def num_remove_from_str(self,s):
        try:
            for i in self.num_pull_from_str_regex(s):
                s = s.replace(i,"")

        except IndexError:
            pass

        return s

class TextStructureReformat(CalculationTextFunctions):
    # array - list of strings
    # num - the number of groups
    # Purpose - combine strings in a list by number
    # e.g. ['a','b','c','d','e','f','g']
    # -->[('a', 'b', 'c'), ('d', 'e', 'f'), ('g', None, None)]
    def string_group_combine_from_list_base(self,array,n=1, alt_value=None): #http://stackoverflow.com/questions/1624883/alternative-way-to-split-a-list-into-groups-of-n
        args = [iter(array)] * n
        result = itertools.izip_longest(*args, fillvalue=alt_value)
        result = list(result)
        return result

    def string_group_combine_from_list(self,array,n=1, alt_value=''): #http://stackoverflow.com/questions/1624883/alternative-way-to-split-a-list-into-groups-of-n
        l = self.string_group_combine_from_list_base(array,n=n,alt_value=alt_value)
        l = ['\n'.join(list(tup)) for tup in l]
        return l



    def extra_space_removal(self,
                            sentence):  #http://stackoverflow.com/questions/8270092/python-remove-all-whitespace-in-a-string
        return " ".join(sentence.split())

    #This method tries to change it to a date,
    #but returns original value if failed
    def string_to_date_try(self, v):
        try:
            Func = lambda i: dateutil.parser.parse(i, ignoretz=True).strftime('%Y-%m-%d')
            t = Func(v)
            if Func("1970-09-02") < t < Func("2020-09-02") and len(
                    v) > 2:  #KNOWN FLAW: IT TURNS SINGLE NUMBERS SUCH AS 33 into dates
                v = str(t)
            else:
                pass
        except ZeroDivisionError:  #just for testing
            pass
        except TypeError:
            pass
        except ValueError:  #Year out of range
            pass
        except AttributeError:  #'int' object has no attribute 'read'
            pass
        except:
            pass
        #print "ERROR: " + str(v)
        return v

    def number_round(self,i,round_value=1000):
        i = round(float(i) / round_value) * round_value
        return i

    #this method tries to change item to float,
    #but returns original value if failed
    def string_to_float_try(self, v):
        if v:
            try:
                try:
                    v = float(v.replace(",", "").replace("\"", "").replace("$",""))
                except AttributeError:  #AttributeError: 'int' object has no attribute 'replace'
                    #print "<string_to_float_try>"
                    #print "\tv:{}".format(str(v))
                    try:
                        v = TextFunctions().special_character_remove(v)
                        v = float(v)
                    except:
                        try:
                            v = float(v)
                        except:
                            v = 0.0
            except ZeroDivisionError:
                v = 0.0
            except ValueError:  #ValueError: invalid literal for float(): 09/23/14
                v = 0.0
        else:
            v = 0.0
        return v

    def float_from_dict_try_identify_error(self,D,k):
        try:
            return float(D[k])
        except:
            print "<float_from_dict_try_identify_error>, text_functions.py"
            print "\tError: {}".format(str(D))
            return float(D[k])



class RegexFunctions(TextStructureReformat):
    def urls_pull(self, s):
        # urls = re.findall(r'href=[\'"]?([^\'" >]+)', s)
        # return ', '.join(urls)
        #return re.findall(r'https?://[^\s<>"]+|www\.[^\s<>"]+', str(s))
        return re.findall("http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+", str(s))

    def url_pull(self, s):
        match = re.search(r'href=[\'"]?([^\'" >]+)', s)
        if match:
            return match.group(0)


    #pulls list of all numbers despite having a comma in a string
    def number_comma_pull(self, s):
        return re.findall(r'[\d\,\d]+', s)

    def email_pull(self, s):
        l = re.findall("([a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`"
                       "{|}~-]+)*(@|\sat\s)(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?(\.|"
                       "\sdot\s))+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)", s)
        #[('deb@curalate.com', '@', '.'), ('christina@curalate.com', '@', '.')]

        l = [tup[0] for tup in l]
        return l


    def string_parens_pull(self, val):
        try:
            regex = '.*\((.*?)\).*'
            matches = re.search(regex, val)
            return matches.group(1)
        except AttributeError:  #if no parenthesis
            return val

    # Special characters must be blocked out
    def string_between_pull(self, val, start='Select', end='From'):
        try:
            regex = '.*' + start + '(.*?)' + end + '.*'
            matches = re.search(regex, val, re.IGNORECASE)
            return matches.group(1)
        except AttributeError:  #if no parenthesis
            return val


    # cancel out special characters
    def string_between_pull_multiple(self, val, start='Select', end='From'):
        try:
            regex = start + '(.*?)' + end
            val = re.findall(regex, val, re.IGNORECASE)
            return val
        except AttributeError:  #if no parenthesis
            return val



    # replaces all the values of a string between brackets with the result of the function of whats in the bracket
    def string_between_pull_multiple_bracket_function_replace(self,message,func):
        keys = TextFunctions().string_between_pull_multiple(message,start="\{",end="\}")
        key_values = [func(key) for key in keys]
        message_cleaned = TextFunctions().string_between_pull_replace(message,lambda i: '',start="\{",end="\}")
        message = message_cleaned.format(*key_values)
        return message


    def slack_dict_parse(self,s):
        D = dict([(i.split("=", 1)[0], i.split("=", 1)[1]) for i in s.split("&")])
        # 	{'MRR__c': '833.33', 'OTF__c': 'false', 'Name': 'Edutopia - Renewal 2015 3 month extension', 'Type': 'Renewal', 'Contract_Start_Date__c': '2015-07-28', 'Amount': '2500.0', 'OwnerId': '00540000003QXggAAG', 'Success_Manager__c': 'Melissa', 'CloseDate': '2015-07-28', 'Market_Developer__c': '00540000002TVDgAAO', 'Contract_End_Date__c': '2015-10-27', 'Id': '0064000000YKSyTAAX'}

        D.update({'text': ' '.join(D['text'].split('+')[2:])})

        return D


    def salesforce_dict_parse_regex(self,s):
        print "text_functions.py, <salesforce_dict_parse_regex>"
        l = TextFunctions().string_between_pull_multiple(s,start="sf:",end="</sf:")
        #print "Results: \n{}".format(str(l))
        #['Id>00Q40000014YluYEAS', 'Company>test', 'CreatedById>005400000029K2kAAE', 'CreatedDate>2015-02-02T01:42:00.000Z', 'SystemModstamp>2015-02-02T01:42:00.000Z']
        D = dict(map(lambda i: tuple(i.split(">")),l))
        # 	{'MRR__c': '833.33', 'OTF__c': 'false', 'Name': 'Edutopia - Renewal 2015 3 month extension', 'Type': 'Renewal', 'Contract_Start_Date__c': '2015-07-28', 'Amount': '2500.0', 'OwnerId': '00540000003QXggAAG', 'Success_Manager__c': 'Melissa', 'CloseDate': '2015-07-28', 'Market_Developer__c': '00540000002TVDgAAO', 'Contract_End_Date__c': '2015-10-27', 'Id': '0064000000YKSyTAAX'}

        print "\tresulting Dict from Salesforce: \n\t" + str(D)
        return D


    def getDomain(self, url):
        #requires 'http://' or 'https://'
        #pat = r'(https?):\/\/(\w+\.)*(?P<domain>\w+)\.(\w+)(\/.*)?'
        #'http://' or 'https://' is optional
        pat = r'((https?):\/\/)?(\w+\.)*(?P<domain>\w+)\.(\w+)(\/.*)?'
        m = re.match(pat, url)
        if m:
            domain = m.group('domain')
            return domain
        else:
            return False

    #ignore it if it's between the two characters and actually take it out
    # exclude means take out the start and end also
    def string_between_pull_multiple_ignore(self, val, start=None, end=None,exclude=True):
        l = self.string_between_pull_multiple(val, start=start, end=end)
        #print l
        #print val
        for i in l:
            if exclude:
                val = val.replace(start + i + end, "")
            else:
                val = val.replace(i, "")
        return val

    # Input: select name from function(database where ...
    # Output: function, select name from database where ...
    def string_function_split_tuple(self,query,start='from',end='where',func_string_start = '(',func_string_end=')'):
        core = TextFunctions().string_between_pull(query, start=start, end=end).strip()
        # core = function(database)
        func = core.split(func_string_start)[0].strip()
        sub_core = TextFunctions().string_between_pull(core, start= "\\" + func_string_start, end= "\\" + func_string_end).strip()
        # sub_core = database
        query = query.replace(core,sub_core)
        return query,func

    def split_by_delimiter_unless_between_special_character(self,s,delimiter=',',start="\[",end="\]",temp_delim = '_____'):
        l = TextFunctions().string_between_pull_multiple(s,start=start,end=end)

        for i in l:
            new_i = i.replace(delimiter,temp_delim)
            s = s.replace(i,new_i)
        print l
        l = s.split(delimiter)

        l = [i.replace(temp_delim,delimiter) for i in l]
        return l

    def split_by_multiple_delimeters(self,s,delimiters=['+','-']):
        temp_character = '_____'
        for i in delimiters:
            s = s.replace(i,temp_character)
        l = s.split(temp_character)
        return l

    def split_by_delimiter_unless_between_multiple(self,s,delimiter=',',start_end_tups=[("\[","\]"),("\(","\)"),("\"\"\"","\"\"\"")],temp_delim = '_____'):
        L = []
        for tup in start_end_tups:
            l = TextFunctions().string_between_pull_multiple(s,start=tup[0],end=tup[1])
            L.extend(l)

        for i in L:
            new_i = i.replace(delimiter,temp_delim)
            s = s.replace(i,new_i)
        #print L
        l = s.split(delimiter)

        l = [i.replace(temp_delim,delimiter) for i in l]
        return l
    #keep means the special character keep
    #func is th replacement function
    # input: 'https://app.asana.com/0/[projects_id]/[id]'
    # output: 'https://app.asana.com/0/a/a' #if keep is false
    # output: 'https://app.asana.com/0/[a]/[a]' #if keep is true
    def string_between_pull_replace(self, s, func, start="\[", end="\]", keep=True):
        special_character_remove = lambda s: s.replace("\\", "")
        origina_special_chracter_put_back = lambda s: special_character_remove(start) + s + special_character_remove(
            end)
        keep_or_not_func = lambda s: origina_special_chracter_put_back(s) if keep else s
        l0 = map(lambda s: origina_special_chracter_put_back(s),
                 self.string_between_pull_multiple(s, start=start, end=end))
        l1 = map(lambda s: keep_or_not_func(func(s)),
                 self.string_between_pull_multiple(s, start=start, end=end))
        for a, b in zip(l0, l1):
            s = s.replace(a, b)
        return s


class FunctionMethodName(RegexFunctions):
    def function_try(self, func, i, alt=None):
        #print "file text_functions.py line 484 <function_try>"
        #print "\tfunction: " + func.__name__
        #print "\tinput: " + i
        try:
            v = func(i)
            #PerformanceFunctions().comment("\t Success: " + str(v))
        except:
            v = alt
            #print "\t Failure: "
        return v

    def function_try2(self, func, i, alt=None):
        #print "file text_functions.py line 484 <function_try>"
        print "\tfunction: " + func.__name__
        print "\tinput: " + i
        try:
            v = func(i)
            print "\t Success: " + str(v)
        except ZeroDivisionError:
            v = alt
            print "\t Failure: "
        return v


    #get all classes from a file
    def classes_get_from_file(self, i, l):
        #l = inspect.getmembers(sys.modules[__name__])
        l = [item for item in l if inspect.isclass(item[1]) and i in str(item[1])]
        return l

        l = [inspect.getmembers(sys.modules[__name__])][0]
        Func = [subli[1] for subli in l if str(subli[0]) == i.strip()][0]
        return Func


    #Returns the function of the class that is equal to the string
    def func_get_from_classes(self, i, *args):
        #print "File 'text_functions.py', line 457, in <func_get_from_classes>"

        l = [inspect.getmembers(arg()) for arg in args][0]
        #print "\t inspect.getmembers: " + str(l)
        try:
            Func = [subli[1] for subli in l if str(subli[0]) == i.strip()][0]
            return Func
        except IndexError:  #only generated if it doesnt exist
            comment =  "File 'text_functions.py', line 480, in <func_get_from_classes>"
            comment = comment +  "\t Index Error: " + i
            #PerformanceFunctions().comment(comment)

            pass

    # this applies the function to the dictionary in the array that has the key name func
    # important that the result of that function returns a list since it will be flattened
    def func_get_from_classes_subli_return(self,l,key_name='function',class_name=None):
        l = map(lambda D: TextFunctions().func_get_from_classes(D[key_name],class_name)(D),l)
        l = [item for sublist in l for item in sublist]
        return l


    def funcs_from_class_get(self, i):
        l = inspect.getmembers(i())
        #l =[subli[1] for subli in l if 'bound' in str(subli[0])]
        l = filter(lambda tup: re.search("bound", str(tup)), l)
        l = map(lambda tup: tup[1], l)
        return l


    def class_name_get(self, func):
        val = func.im_class
        #<class 'Shippy.RenewalReport.API.SalesforceMetrics.Churn'>
        val = str(val).split(".")[-1:][0]
        val = val[:-2]
        val = val.replace("_", " ")
        return val

    #used by GspreadFunctions().gspread_func_update
    def function_name_get(self, func):
        val = func.__name__
        val = val.split("__")[0]
        val = val.replace("_", " ")
        return val

    def name_from_function_lambda(self,func):#http://stackoverflow.com/questions/30983875/how-do-you-read-a-lambda-function-as-a-string
        try:
            funcString = str(inspect.getsourcelines(func)[0])
            funcString = funcString.strip("['\\n']").split(" = ")[1]
        except:#usually generates an error if its a normal function
            funcString = func.__name__
        return funcString


class TextFunctionsBase(FunctionMethodName):
    # cancel out special characters
    def string_between_pull_multiple(self, val, start='function ', end='\('):
        try:
            regex = start + '(.*?)' + end
            val = re.findall(regex, val, re.IGNORECASE)
            return val
        except AttributeError:  #if no parenthesis
            return val

    def line_number_pull_from_file(self, page_source, function_name, start='function ', end='\('):
        for enum,line in enumerate(page_source.split("\n")):
            formatted_function_name = "function {}(".format(function_name)
            if formatted_function_name in line:
                return enum
                break 
        return 0
    
    def get_all_function_texts(self,page_source,function_list):
        page_lines = page_source.split("\n")

        line_numbers = [self.line_number_pull_from_file(page_source,i)-1 for i in function_list]
        def create_line_number_tup(line_number,enum):
            try:
                next_line_number = line_numbers[enum+1]
            except:
                next_line_number = len(page_lines)

            function_page_lines = page_lines[line_number:next_line_number-1]
            return "<br>".join(function_page_lines)

        function_text = [create_line_number_tup(i,enum) for enum,i in enumerate(line_numbers)]
        return function_text


    def javascript_function_pull(self, page_source, start='function ', end='\(',file_name='None',folder_name="None"):
        function_list = TextFunctions().string_between_pull_multiple(page_source, start=start, end=end)
        function_list = [i for i in function_list if i != '']
        description_list = [page_source.split("\n")[self.line_number_pull_from_file(page_source,i)-1] for i in function_list]
        function_code_list = self.get_all_function_texts(page_source,function_list)
        l = [{'name':str(function_name),'file_name':file_name,'folder_name':folder_name,'description':str(description)[2:],'code':code}  for function_name,description,code in zip(function_list,description_list,function_code_list)]
        return l 


class TextFunctions(TextFunctionsBase):
    pass


def remove_special_characters(s="Yigal Azrou\xebl"):
    s = TextFunctions().special_character_remove(s)
    print s


def accent_convert(s="Yigal Azrou\xebl"):
    s = TextFunctions().remove_accents(s)
    print s


def main():
    TextFunctions().binary_from_string()
    print TextFunctions().cell_reference_list_from_cell_range("B5:E5")

    #print "okay"
    return
    print TextFunctions().unicode_guarentee(s,lambda i:str(i))
    return
    tag = """<input class="decorative-input inspectletIgnore" id="signin_email" name="email" placeholder="Email Address" type="email"/>"""
    D = TextFunctions().dict_from_value_seperated_string(tag," ","=")
    print D


    return
    s = 'The leading analytics \\u0026 marketing suite for Pinterest, Instagram \\u0026 Tumblr. Follow for tips \\u0026 Curalate culture. Interact with our Instagram feed:","website":"http:\\/\\/instagram.curalate.com"'
    print TextFunctions().urls_pull(s)

    return
    s = "Client	 shall	 pay	 Curalate	 an	 annual license	 subscription	 fee of	 $102,917 USD, which	 Curalate	 will	 invoice	 on	February	1,	2015	with	net	30	day	payment	terms."
    s = "	This	Order	Form is	effective	as	of	the	Effective	Date	and	will	remain	in	effect	through	January	31,	2016.	Following such	period,	the	term	may	be	extended	upon	mutual	agreement	of	the	parties. Curalate	may	also	terminate	this Order Form	upon	written	notice	to	Client (i)	in	the	event	that	there	is	a	material	change	to	an	applicable	Social	Site	terms	of service	that	adversely	impacts	Curalate's	ability	to	provide	the	Services to	Client,	or	 if	required	by	a	Social	Site.	In such	event,	Curalate will	refund	a	pro-rata	portion	of	any	pre-paid	fees."
    s = "This	Order	Form is	effective	as	of	the	Effective	Date	and	will	remain	in	effect	through	January	31,	2016.	Following such	period,	the	term	may	be	extended	upon	mutual	agreement	of	the	parties. Curalate	may	also	terminate	this Order Form	upon	written	notice	to	Client (i)	in	the	event	that	there	is	a	material	change	to	an	applicable	Social	Site	terms	of service	that	adversely	impacts	Curalate's	ability	to	provide	the	Services to	Client,	or	 (ii)	if	required	by	a	Social	Site.	In such	event,	Curalate will	refund	a	pro-rata	portion	of	any	pre-paid	fees."
    s = "	Client	shall	pay	Curalate	an	annual license	subscription	fee of	$27,083 USD, which	Curalate	will	invoice	quarterly beginning	February	1,	2015	with	net	30	day	payment	terms."
    print TextFunctions().extra_space_removal(s)

    #" ".join(sentence.split())

    return

    accent_convert()

    return

    s = "token=K5sVWj97MtOTG9kzGzqE7Gth&team_id=T029TKV1Q&team_domain=curalate&service_id=3712328217&channel_id=C03LYAXPD&channel_name=reporting&timestamp=1423831882.000008&user_id=U03H3BBFT&user_name=chriscruz&text=shippy+another+test&trigger_word=shippy"
    print TextFunctions().dict_from_url_string(s)

    return
    s = "January 9, 2014"
    print TextFunctions().date_convert_try(s)

    return

    s = "sfdc|Select sum(amount) from Opportunity where StageName = 'Closed Won' AND CloseDate = This_Week AND IsDeleted = False AND Type IN ('New Business','Upsell - New')"
    s = "sfdc|Select sum(amount) from Opportunity where StageName = 'Closed Won' AND CloseDate = This_Week AND IsDeleted = False AND Type IN ('Upsell - New','Renewal','Upsell')"
    s = "sfdc|Select sum(amount) from Opportunity where StageName = 'Closed Won' AND Type IN ('Upsell - New','Upsell','Renewal') AND CloseDate = This_Quarter AND IsDeleted = False"
    print TextFunctions().string_between_pull_multiple_ignore(s, start="'", end="'")

    return
    s = u"//shippy2.firebaseio.com/Data/Commissions/Data/bs'"
    s = TextFunctions().binary_from_string(s)
    # print s
    # return
    # s = "https=Ly9zaGlwcHkyLmZpcmViYXNlaW8uY29tL0RhdGEvQ29tbWlzc2lvbnMvRGF0YS9icyc="
    print StringBinaryConversion().binary_to_text(s)

    return
    #how to change a string with binary values to dictionary
    s = "ButtonParams=U3ViamVjdCxFbWFpbA==&Email=Q3J1emMwOUBnbWFpbC5jb20=&Subject=TXkgU3ViamVjdA=="
    print TextFunctions().dict_from_binary_url_string(s)

    return
    print TextFunctions().number_date_convert_try_conditional('0.16', strf="%m/%d/%Y", numformat=True)

    return

    s = "Deals closed after 10/1/14 follow the commission structure that 25% are closed on close date and 75% is closed on opt out date. As a result, Ted Baker-2014 dashboard & fanreel & Like2Buy pays 6630.0 on 2015-04-01 ."
    print TextFunctions().number_date_convert_try_string(s)

    return
    s = "0"
    print TextFunctions().date_convert_try(s, strf="%m/%d/%Y")
    return

    print TextFunctions().date_convert_try(s)

    return
    print TextFunctions().date_string_check('bobby fisher')

    return
    print TextFunctions().letter_number_convert("A")

    return
    #How to check if text is number or date and appropriately format
    s = '09/23/14'
    s = "41"
    s = "0114 Revenue Recognition"
    func = lambda s: TextFunctions().number_date_convert_try(s)

    l = [{'Category': '41000', 'Memo/Description': '0114 Revenue Recognition', 'Name': '', 'Section Number': '41',
          'Transaction Type': 'Journal Entry', 'Amount': 0, 'Num': '265', 'Category Section': '41000 Analytics',
          'Line Item': '', 'Date': '01/31/2014', 'First Section Number': '4', 'Balance': '997.80"', 'Class': '',
          'Split': '-Split-'},
         {'Category': '41000', 'Memo/Description': '0214 Revenue Recognition', 'Name': '', 'Section Number': '41',
          'Transaction Type': 'Journal Entry', 'Amount': 0, 'Num': '271', 'Category Section': '41000 Analytics',
          'Line Item': '', 'Date': '02/28/2014', 'First Section Number': '4', 'Balance': '784.29"', 'Class': '',
          'Split': '-Split-'},
         {'Category': '41000', 'Memo/Description': '0314 Revenue Recognition', 'Name': '', 'Section Number': '41',
          'Transaction Type': 'Journal Entry', 'Amount': 0, 'Num': '276', 'Category Section': '41000 Analytics',
          'Line Item': '', 'Date': '03/31/2014', 'First Section Number': '4', 'Balance': '037.18"', 'Class': '',
          'Split': '-Split-'},
         {'Category': '41000', 'Memo/Description': '1113 Revenue Recognition', 'Name': '', 'Section Number': '41',
          'Transaction Type': 'Journal Entry', 'Amount': 0, 'Num': '287', 'Category Section': '41000 Analytics',
          'Line Item': '', 'Date': '04/30/2014', 'First Section Number': '4', 'Balance': '542.19"', 'Class': '',
          'Split': '-Split-'},
         {'Category': '41000', 'Memo/Description': '1113 Revenue Recognition', 'Name': '', 'Section Number': '41',
          'Transaction Type': 'Journal Entry', 'Amount': 0, 'Num': '288', 'Category Section': '41000 Analytics',
          'Line Item': '', 'Date': '04/30/2014', 'First Section Number': '4', 'Balance': '357.84"', 'Class': '',
          'Split': '-Split-'}, {'Category': '41000', 'Memo/Description': '', 'Name': '', 'Section Number': '41',
                                'Transaction Type': 'Journal Entry', 'Amount': 0, 'Num': '305',
                                'Category Section': '41000 Analytics', 'Line Item': '', 'Date': '05/31/2014',
                                'First Section Number': '4', 'Balance': '744.12"', 'Class': '', 'Split': '-Split-'},
         {'Category': '41000', 'Memo/Description': '1113 Revenue Recognition', 'Name': '', 'Section Number': '41',
          'Transaction Type': 'Journal Entry', 'Amount': 0, 'Num': '317', 'Category Section': '41000 Analytics',
          'Line Item': '', 'Date': '06/30/2014', 'First Section Number': '4', 'Balance': '241.53"', 'Class': '',
          'Split': '-Split-'},
         {'Category': '41000', 'Memo/Description': "July '14 Revenue Recognition", 'Name': '', 'Section Number': '41',
          'Transaction Type': 'Journal Entry', 'Amount': 0, 'Num': '344', 'Category Section': '41000 Analytics',
          'Line Item': '', 'Date': '07/31/2014', 'First Section Number': '4', 'Balance': '809.26"', 'Class': '',
          'Split': '-Split-'},
         {'Category': '41000', 'Memo/Description': "Aug '14 Revenue Recognition: AK900-AK929", 'Name': '',
          'Section Number': '41', 'Transaction Type': 'Journal Entry', 'Amount': 0, 'Num': '366',
          'Category Section': '41000 Analytics', 'Line Item': '', 'Date': '08/31/2014', 'First Section Number': '4',
          'Balance': '913.34"', 'Class': '', 'Split': '-Split-'},
         {'Category': '41000', 'Memo/Description': 'Sept 14 Rev', 'Name': '', 'Section Number': '41',
          'Transaction Type': 'Journal Entry', 'Amount': 0, 'Num': '387', 'Category Section': '41000 Analytics',
          'Line Item': '', 'Date': '09/30/2014', 'First Section Number': '4', 'Balance': '751.58"', 'Class': '',
          'Split': '-Split-'}]
    D = l[0]
    l = D.values()
    for i in l:
        print str(i) + "--->" + str(func(i))

    return
    s = "<ul>Adfads</ul><ul>Adfads</ul><ul>Bfdsafd</ul>"
    l = TextFunctions().string_between_pull_multiple(s, start='<ul>', end='</ul>')

    print l

    return
    s = "Month's MRR: {{sfdc | select sum(MRR__c) from Opportunity where Contract_End_Date__c >= TODAY AND Contract_Start_Date__c < NEXT_MONTH AND StageName = 'Closed Won' AND OTF__c = False AND IsDeleted = False}} & Month's Bookings {{sfdc|Select sum(Amount) from Opportunity where StageName = 'Closed Won' AND CloseDate = This_Month AND IsDeleted = False}}"
    return s

    print TextFunctions().int_convert_from_string("1223232.0")

    return

    Q = "Select Count(leadsource) from Lead where lifecycle_stage = lead"
    func = TextFunctions().func_return_from_string(Q)
    print func(Q)
    return
    #I tried different variations too



    s = "Select hi From Select bye From"

    print TextFunctions().string_between_pull_multiple(s)

    return
    print TextFunctions().string_parens_pull("hello (t)")

    return

    print TextFunctions().float_convert_from_string('1.0')

    return

    print TextStructureReformat().string_to_date_try("7/9/2014")


if __name__ == "__main__": main()


#tier_growth_analysis.py

from Shippy.API.gspread_api import GspreadFunctions
from Shippy.API.firebase_api import FirebaseFunctions
from Shippy.API.dropbox_api import DropboxFunctions
import tessera
from Shippy.Functions.csv_functions import CSVFunctions
from Shippy.Functions.text_functions import TextFunctions
from Shippy.Functions.dictionary_functions import DictionaryFunctions
from Shippy.Functions.pickle_functions import PickleFunctions
from Shippy.API.salesforce_api import Update, Query
from bs4 import BeautifulSoup
from Shippy.Functions.time_functions import TimeFunctions
from Shippy.API.mandrill_api import MandrillEmail
import HTML
import requests
from Shippy.API.iron_api import IronFunctions
from Shippy.API.iron_mq_api import IronMQFunctions
import time
from Shippy.API.bamboo_api import BambooFunctions
from Shippy.API.bill_api import BillFunctions
from Shippy.API.selenium_scrape import ScrapeFunctions
from Shippy.API.expensify_api import ExpensifyFunctions
from Shippy.Components.api_components import APIComponents
from Shippy.Components.function_components import FunctionComponents
from Shippy.Functions.file_functions import FileFunctions
from Shippy.API.slack_api import SlackFunctions
from Shippy.API.requests_scrape import RequestsFunctions
from Shippy.Functions.performance_functions import PerformanceFunctions
from Shippy.Components.project_components import ProjectComponents


class Data(object):
    def __init__(self):
        func = lambda: Query().query_all_ordered_dict("select accountid,account.name,name,id,mrr__c,Account_Revenue_Tier__c,contract_start_date__c,contract_end_date__c from opportunity where stagename = 'Closed Won'")
        self.data = APIComponents().data_push_pickle_check(func,'tier_growth_data_analysis')


    def data_assess(self):
        l = self.data

        l = filter(lambda D: D['Contract_Start_Date__c'] >= '2015-01-01' and str(D['Account_Revenue_Tier__c']).lower() == 'no data',l)
        l = DictionaryFunctions().collapse_dict_sum_deduped_keys(l,'AccountId')
        PerformanceFunctions().result_print(l)
        GspreadFunctions().gspread_push_simple('Upsell Growth of Rev Tier','Accounts',l,HeaderOrder=['Account_Name','AccountId','MRR__c'])



Data().data_assess()








#time_functions.py

# from Shippy.Functions.time_functions import TimeFunctions
from __future__ import division
from isoweek import Week
import math
import time
import datetime
from datetime import datetime, timedelta, time, date
import time
import pytz
import dateutil.parser
from time import strptime
import re
from dateutil.relativedelta import relativedelta
import calendar
from pytz import timezone
from operator import itemgetter
from itertools import groupby

class DictionaryListManipulate(object):
    def array_filter_from_date(self,l,date_range='Q2-16',key_name='CloseDate',add_days=None,error_safe=True):
        date_tup = TimeFunctions().date_convert_from_string(date_range)
        if add_days:
            date_range_tup = "-".join(map(lambda i: TimeFunctions().date_add_interval(i, add_days, strf='%m/%d/%y'),date_tup))
            date_tup = TimeFunctions().date_convert_from_string(date_range_tup)
        if error_safe:
            def filter_date(func_D):
                try:
                    return date_tup[0] <= func_D[key_name] <= date_tup[1]
                except KeyError:
                    return False
            l = filter(lambda D: filter_date(D), l)
        else:
            l = filter(lambda D: date_tup[0] <= D[key_name] <= date_tup[1], l)

        return l

    #TimeFunctions().array_filter_from_date()

    # return true if its a number
    def number_check(self, v, numformat=None):
        initial_v = v
        try:
            v = v.replace("\"", "").replace(",", "").replace("'", "").replace("$","")
            if "(" in str(v) and ")" in str(v):
                v = "-" + str(v.replace("(","").replace(")",""))
            v = float(v)
        except AttributeError:
            #print "Line 20: AttributeError"
            pass
        except ValueError:
            #print "Line 23: ValueError"
            pass
        if initial_v == v:
            return False
        else:
            return True

    def date_convert_try_else_same(self,D):
        try:
            if not self.number_check(v):
                v = dateutil.parser.parse(v, ignoretz=True)
            else:
                pass
        except:
            pass
        return v


    # purpose: group an array into dates

    # return several versions of the list (each grouped by date differently)
    # that way each can be evaluated
    def array_date_group(self,l):
        # determine which keys are a date
        # group into day, week, month, quarter, and year
        return l

class ExcelTimeFunctions(DictionaryListManipulate):
    def eomonth(self,s):#http://stackoverflow.com/questions/42950/get-last-day-of-the-month-in-python
        year = TimeFunctions().date_format_from_string(s,strf='%Y')
        month = TimeFunctions().date_format_from_string(s,strf='%m')
        last_day_of_month = calendar.monthrange(int(year),int(month))[1]
        v = "{}-{}-{}".format(year,month,last_day_of_month)
        return v

    def bomonth(self,s):#http://stackoverflow.com/questions/42950/get-last-day-of-the-month-in-python
        year = TimeFunctions().date_format_from_string(s,strf='%Y')
        month = TimeFunctions().date_format_from_string(s,strf='%m')
        #beginning_of_month = calendar.monthrange(int(year),int(month))[0]
        #beginning_of_month = 1
        v = "{}-{}-{}".format(year,month,'01')
        return v

class DateStringFormat(ExcelTimeFunctions):

    # def date_group_from_date_list(self,data):
    #     ranges = []
    #     for k, g in groupby(enumerate(data), lambda (i, x): TimeFunctions().days_number_between_dates(i,x)):
    #         group = map(itemgetter(1), g)
    #         ranges.append((group[0], group[-1]))
    #     return ranges

    def date_group_from_date_list(self,dates):#http://stackoverflow.com/questions/21768963/group-consecutive-dates-together-with-python
        dates = map(lambda i: dateutil.parser.parse(i, ignoretz=True),dates)
        def group_consecutive(dates):
            dates_iter = iter(sorted(set(dates)))  # de-dup and sort

            run = [next(dates_iter)]
            for d in dates_iter:
                if (d.toordinal() - run[-1].toordinal()) == 1:  # consecutive?
                    run.append(d)
                else:  # [start, end] of range else singleton
                    yield [run[0], run[-1]] if len(run) > 1 else run[0]
                    run = [d]

            yield [run[0], run[-1]] if len(run) > 1 else run[0]

        l = list(group_consecutive(dates)) if dates else False
        return l

    def date_list_to_string_sentence_format(self,date_list,strf='%m/%d'):
        """
        Purpose is to turn a list of dates into a formatted set of dates and represent the date list as succinct as possible

        e.g.

        [1,2,3,4,8] -> 1-4,8
        Parameters
        ----------
        date_list

        Returns
        -------

        """
        grouped_dates = self.date_group_from_date_list(date_list)
        #['2016-01-01', ['2017-01-01', '2017-01-03'], '2017-01-05']
        grouped_dates_func = lambda tup: "{}-{}".format(tup[0].strftime(strf),tup[1].strftime(strf))
        func = lambda i: grouped_dates_func(i) if isinstance(i,list) else i.strftime(strf)
        date_list = map(func,grouped_dates)

        date_string_list = ",".join(date_list)
        return date_string_list


    # Input: 2015-03-17T16:00:00.000Z,2015-03-16T16:00:00.000Z,2015-03-12T16:00:00.000Z
    # sequence_request = 'first','last' The one that you want
    def first_last_sequence_request_from_date_string(self,date_field,sequence_request='first'):
        date_fields = [TimeFunctions().date_format_from_string(i) for i in date_field.split(',')]
        if str(sequence_request).lower() == 'first':
            date_fields.sort()
            date_field = date_fields[0]
        elif str(sequence_request).lower() == 'last':
            date_fields.sort(reverse=True)
            date_field = date_fields[0]
        return date_field



    # can i deprecate this one
    def date_parser_from_string(self, val, strf='%Y-%m-%d'):
        val = dateutil.parser.parse(val, ignoretz=True)
        return val


    def date_format_from_string(self, val, strf='%Y-%m-%d'):
        try:
            val = dateutil.parser.parse(val, ignoretz=True)
            val = val.strftime(strf)
        except ValueError: #in the case an input like Last_Month is put in, then run a different func

            val = TimeFunctions().date_convert_from_string(val)[0]
            val = dateutil.parser.parse(val, ignoretz=True)
            val = val.strftime(strf)
        except TypeError: #in the case an input like Last_Month is put in, then run a different func
            val = TimeFunctions().date_convert_from_string(val)[0]
            val = dateutil.parser.parse(val, ignoretz=True)
            val = val.strftime(strf)
        return val

    def date_format_range_from_string(self,start_date,end_date,strf='%-m/%-d'):
        start_date_formated = self.date_format_from_string(start_date,strf=strf)
        end_date_formated = self.date_format_from_string(end_date, strf=strf)
        date_string = "-".join([start_date_formated,end_date_formated])
        return date_string

    def date_format_from_string_try(self, val, strf='%Y-%m-%d',alt='2020-01-01'):
        try:
            val = dateutil.parser.parse(val, ignoretz=True)
            val = val.strftime(strf)
        # except ValueError: #in the case an input like Last_Month is put in, then run a different func
        #     val = TimeFunctions().date_convert_from_string(val)[0]
        #     val = dateutil.parser.parse(val, ignoretz=True)
        #     val = val.strftime(strf)
        except:
            #print "<date_format_from_string_try>, time_functions.py"
            try:
                pass
                #print "\tERROR: {}".format(str(val))
            except UnicodeEncodeError:
                print "\tUnicode Encode Error"
            val = alt

        return val

    #determine if its the same month
    def is_same_month_year(self,a,b):
        a =  TimeFunctions().date_format_from_string(a,'%b-%Y')
        b =  TimeFunctions().date_format_from_string(b,'%b-%Y')
        return a == b


    # numerical quarter
    # Q3-15 = 15.75

    def numerical_quarter_calculate(self,i):
        v = TimeFunctions().date_format_from_string(i, strf="%m")  #month as a number
        i = TimeFunctions().date_format_from_string(i, strf="%y")
        v = str(int(((int(v) - 1) / 3) + 1))
        v = float(i) + float(v)/4
        return v

    def end_of_time_period(self,date_range='quarter'):

        d = datetime.now(timezone('US/Eastern'))
        if date_range.lower() == 'week':
            end_of_week = d + timedelta(days=5 - d.weekday())
            return end_of_week
        elif date_range.lower() == 'month':
            end_of_month = date(year=d.year, month=(d.month + 1) % 12 if (d.month + 1) % 12 != 0 else 12,
                                day=1) - timedelta(
                days=1)  # date(year=(d.year + int(d.month % 12 == 0)), month=(d.month + 1) % 12, day=1) - timedelta(days=1)
            return end_of_month
        if date_range.lower() == 'quarter':
            end_month_of_quarter = {1:3,2:6,3:9,4:12}
            end_month_of_quarter_next = {1: 4, 2: 7, 3: 10, 4: 1}
            end_month_of_quarter_year_add = {1: 0, 2: 0, 3: 0, 4: 1}
            quarter = math.ceil(float(d.month/3))
            end_of_quarter =  date(year=d.year + end_month_of_quarter_year_add[quarter], month=end_month_of_quarter_next[quarter],day=1) - timedelta(days=1)
            return end_of_quarter
        if date_range == 'year':
            end_of_year = datetime.date(year=d.year, month=12, day=31)
            return end_of_year


        #today = datetime.date.today()


        # v = TimeFunctions().date_format_from_string(i, strf="%m")  #month as a number
        # #i = TimeFunctions().date_format_from_string(i, strf="%y")
        # quarter_number = str(int(((int(v) - 1) / 3) + 1))
        # TimeFunctions().eomonth()
        # #v = float(i) + float(v)/4
        # return v

    def numerical_quarter_calculate_dict_is_same(self,dicta,dictb,key):
        a = dicta[key]
        b = dictb[key]
        return self.numerical_quarter_calculate(a) == self.numerical_quarter_calculate(b)

    def date_format_from_string_query(self, i, value):
        if value.lower() == 'monthyear':
            i = TimeFunctions().date_format_from_string(i, strf="%b-%y")
        elif value.lower() == 'monthyear_apostrophe':
            i = TimeFunctions().date_format_from_string(i, strf="%b-%y")
            i = "'" + i
        elif value.lower() == 'weekyear':
            i = TimeFunctions().date_days_before(i, days=-6)
            i = TimeFunctions().date_format_from_string(i, strf="%YW%U")
        elif value.lower() == 'year':
            i = TimeFunctions().date_format_from_string(i, strf="%Y")
        elif value.lower() == 'quarteryear':
            v = TimeFunctions().date_format_from_string(i, strf="%m")  #month as a number
            i = TimeFunctions().date_format_from_string(i, strf="%y")
            v = str(int(((int(v) - 1) / 3) + 1))  #turns month number to quarter number
            i = "Q" + v + "-" + i
        elif value.lower() == 'daymonthyear':
            i = TimeFunctions().date_format_from_string(i, strf="%Y-%m-%d")
        return i


    # takes in a date and returns tuples of the date and the version
    def date_type_list_from_date(self,i,date_keys = ['monthyear','weekyear','year','quarteryear']):
        date_type_tup = lambda date_type: (date_type,self.date_format_from_string_query(i,date_type))
        l = [date_type_tup(k) for k in date_keys]
        return l

    #Take in a dictionary (e.g. {'CloseDate':'2014-01-01'})
    #convert it to {CloseDate_monthyear:'Jan-14'},etc.
    def date_formats_from_dict(self, D, L=['monthyear_apostrophe','monthyear', 'weekyear', 'year', 'quarteryear']):
        D = dict([(str(D.keys()[0]) + "_" + i, self.date_format_from_string_query(D.values()[0], i)) for i in L])
        return D

    # Borrowed from TextFunctions
    def string_type_evaluate(self, s):
        regex = r'\d{4}[-/]\d{2}[-/]\d{2}'
        if re.search(regex, str(s)):
            return "date"
        elif re.search('[.]', str(s)) or re.search('^-?[0-9]+$', str(s)):  #if number exists and nothing else
            return "number"
        else:
            return "string"


    def date_keys_from_dict(self,D):
        if isinstance(D,dict):
            l = [tup[0] for tup in D.items() if self.string_type_evaluate(tup[1]) == 'date']
        elif isinstance(D,list):
            D = D[0] #in case it's actually a list
            l = [tup[0] for tup in D.items() if self.string_type_evaluate(tup[1]) == 'date']


        return l


    # takes in a dictionary and converts all values of keys that are dates and adds a new key with monthyear, weekyear, etc.
    # this one takes in a dictionary, identifies the dates, and then creates a new dictionary
    def dict_time_frame_append(self,D,date_keys=None,time_periods = ['monthyear','weekyear','year','quarteryear']):
        if not date_keys:
            l = [tup for tup in D.items() if self.string_type_evaluate(tup[1]) == 'date']
        else:
            l = [tup for tup in D.items() if tup[0] in date_keys] #just use a certain set of date keys, other wise just use any key that is a date
        #print "<dict_time_frame_append>"
        #print "\tl: {}".format(str(l))
        L = []
        for tup in l:
            subli = TimeFunctions().date_type_list_from_date(tup[1],date_keys=time_periods) # returns list of tuples for each date type needed
            subli = [("{}_{}".format(str(tup[0]),str(tupa[0])),tupa[1]) for tupa in subli]
            #print "\tsubli: {}".format(str(subli))
            L.extend(subli)
        D = dict(L)
        return D


class TimeBooleans(DateStringFormat):
    # Checks a cron syntaxed schedule against datetime (today by default)
    # input '* * * * *'
    # i.e. minute,hour,day of month, month, day of week
    # output: a boolean
    def cron_syntax_check(self, s, now=datetime.now()):
        if s == '':
            return False
        s = s.strip().split(' ')
        mi = s[0]
        h = s[1]
        dom = s[2]
        mon = s[3]
        dow = s[4]

        dic = {'mi': mi, 'h': h, 'dom': dom, 'mon': mon, 'dow': dow}
        for key in dic:
            if dic[key] != '*':
                dic[key] = int(dic[key])

        if dic['mi'] == '*':
            dic['mi'] = True
        else:
            dic['mi'] = dic['mi'] == now.minute

        if dic['h'] == '*':
            dic['h'] = True
        else:
            dic['h'] = dic['h'] == now.hour

        if dic['dom'] == '*':
            dic['dom'] = True
        else:
            dic['dom'] = dic['dom'] == now.day

        if dic['mon'] == '*':
            dic['mon'] = True
        else:
            dic['mon'] = dic['mon'] == now.month

        if dic['dow'] == '*':
            dic['dow'] = True
        else:
            dic['dow'] = dic['dow'] == now.weekday() + 1

        if False in dic.values():
            return False
        else:
            return True


    #checks to see if time occured in the last minutes
    #returns true or false
    def time_check(self, time1, time2):
        if time1.hour is time2.hour and time1.minute is time2.minute:
            return True
        else:
            return False


    def time_occurence_check(self, s, step, Interval="minutes"):
        try:
            s = dateutil.parser.parse(s, ignoretz=True)
        except:  #incase it's epoch
            try:  #in case I need to divide by a 1000 and its epoch
                s = datetime.fromtimestamp(int(str(s)))
            except ValueError:  #in case in miliseconds divide by 1000. May still get year is otu of range for epoch.
                s = datetime.fromtimestamp(int(str(s)) / 1000)
        D = datetime.now() - timedelta(**{Interval: step})
        if D < s:
            return True
        else:
            return False


    def date_check_between_dates(self, start_date=None, end_date=None, date_compare=None):
        #['2014-06-01', '2014-06-30']
        if not date_compare:
            date_compare = str(date.today())
        Func = lambda val: dateutil.parser.parse(val, ignoretz=True)
        if Func(start_date) <= Func(date_compare) <= Func(end_date):
            return True
        else:
            return False

    def unicode_timeframe_check(self, val, timeframe='This_Month'):
        if isinstance(timeframe,str):
            subli = TimeFunctions().date_convert_from_string(timeframe)
        else:
            subli = timeframe
        if subli[0] <= TimeFunctions().unicode_to_day_date(val, strf='%Y-%m-%d') <= subli[1]:
            return True
        else:
            return False


class UnicodeTimeFunctions(TimeBooleans):
    def now_unicode(self):
        val = datetime.utcnow() - timedelta(hours=4)
        val = int(time.mktime(val.timetuple()))
        return val

    #time fix is so that it defaults to the current time since 4 hours needs to be subtracted
    def now_unicode_minus_time_interval(self,interval='hours',time_range=4,time_fix=True):
        #print "time_functions.py, <now_unicode_minus_time_interval>"
        if time_fix:
            val = datetime.utcnow() - timedelta(hours=4)
        else:
            val = datetime.utcnow()
        val = val - timedelta(**{interval: time_range})
        val = int(time.mktime(val.timetuple()))
        return val

    def unicode_from_date(self, val,exception_return=None):
        try:
            return time.mktime((dateutil.parser.parse(val, ignoretz=True)).timetuple())
        except:
            if exception_return:
                return exception_return
            else:
            #print "time_functions.py, unicode_from_date, ERROR: {}".format(str(val))
                return time.mktime((dateutil.parser.parse(val, ignoretz=True)).timetuple())

    def minutes_difference(self,start,end,exception_return=0):#http://stackoverflow.com/questions/2788871/python-date-difference-in-minutes
        try:
            datetime_end = dateutil.parser.parse(end, ignoretz=True)
            datetime_start =dateutil.parser.parse(start, ignoretz=True)
            return (datetime_end - datetime_start).total_seconds() / 60.0
        except:
            if exception_return:
                return exception_return
            else:
                datetime_end = dateutil.parser.parse(end, ignoretz=True)
                datetime_start = dateutil.parser.parse(start, ignoretz=True)
                return (datetime_end - datetime_start).total_seconds() / 60.0

    def date_from_last_unix(self, l, Date):
        v = TimeFunctions().unicode_from_date(Date) + 86400
        l = [i for i in l if i < v]
        l = sorted(l, reverse=True)
        v = l[0]
        return v

    def unicode_to_day_date(self, Unicode, strf='%m/%d/%Y'):
        try:
            try:
                Unicode = Unicode + 14400
                Day = (datetime.fromtimestamp(int(str(Unicode))).strftime(strf))  #%H:%M:%S
            except:
                Day = (datetime.fromtimestamp(float(str(Unicode))).strftime(
                    strf))  #%H:%M:%S #because unicode coming in was a float
        except ValueError:
            Day = 0
        return Day

    def date_from_unicode_adjust(self,Unicode,strf='%m/%d/%Y',time_delta=4):
        Day = datetime.fromtimestamp(float(str(Unicode)))- timedelta(hours=time_delta)
        Day = Day.strftime(strf)
        return Day

    def date_adjust(self,date,strf='%m/%d/%Y',time_delta=4):
        Unicode = TimeFunctions().unicode_from_date(date)
        Day = datetime.fromtimestamp(float(str(Unicode)))- timedelta(hours=time_delta)
        Day = Day.strftime(strf)
        return Day

class TimeRanges(UnicodeTimeFunctions):
    #This method creates a list of historic dates taht are 30 days apart
    def historic_date_list(self, steps, step_range=30, interval="days", base=None):
        if base == None:
            base = date.today()
        else:
            val = dateutil.parser.parse(base)
            base = date(val.year, val.month, val.day)
        l = [i - (step_range * steps) for i in range(1, steps)]
        #convert it into dates
        return l

    #returns the dates between d1 and d2 that are in steps of 3 months or 2 months, etc.
    def months_between_dates_frequency(self, d1, d2, steps,interval='months',strf=None):
        l = [TimeFunctions().date_add_months(d1, (i * steps),interval=interval) for i in range(100) if
             TimeFunctions().date_add_months(d1, (i * steps),interval=interval) <= TimeFunctions().date_format_from_string(d2)]
        if strf:
            l = map(lambda D: TimeFunctions().date_format_from_string(D,strf=strf),l)
        return l


    def dates_list(self, days=100, base=None, strf='%Y-%m-%dT%H:%M:%S.%fZ', Interval='days'):
        if base == None:
            base = date.today()
        else:
            val = dateutil.parser.parse(base)
            base = date(val.year, val.month, val.day)  #so doesnt change to date time
        date_list = [base - timedelta(**{Interval: x}) for x in range(0, days)]
        lst = map(str, date_list)
        Func = lambda val: dateutil.parser.parse(val).strftime(strf)
        lst = map(Func, lst)
        return lst

    def date_range_list(self, days=100, base=None, strf='%Y-%m-%dT%H:%M:%S.%fZ', Interval='days'):
        l1 = self.dates_list(days=days, base=base, strf=strf, Interval=Interval)
        l2 = self.dates_list(days=days + 1, base=base, strf=strf, Interval=Interval)
        l2.pop(0)
        l = zip(l1, l2)
        return l

    def dates_list_steps(self, days=100, steps=5, base=None, strf='%Y-%m-%dT%H:%M:%S.%fZ', Interval='days'):
        if base == None:
            base = date.today()
        else:
            val = dateutil.parser.parse(base)
            base = date(val.year, val.month, val.day)  #so doesnt change to date time
        if str(Interval).lower() == 'months':
            date_list = [(base + timedelta(x*steps*365/12)).isoformat() for x in range(0, days)]
        else:
            date_list = [base + timedelta(**{Interval: x * steps}) for x in range(0, days)]
        lst = map(str, date_list)
        Func = lambda val: dateutil.parser.parse(val).strftime(strf)
        lst = map(Func, lst)
        return lst

    # purpose is to serve dates_list_steps_bucket
    # takes in a list of tuples that are dates and ends the list at a specified end date
    # end_date must be in the format required
    def list_end_date_apply(self,l,end_date):
        func = lambda i: TimeFunctions().date_format_from_string(i,strf='%Y-%m-%d')
        l = [tup for tup in l if func(tup[0]) <= func(end_date)]
        end_tup = (l[-1:][0][0],end_date)
        l.pop(len(l)-1)#pop off the last one
        l.append(end_tup) # add the last one back in
        return l

    #return range of tuples
    # steps - number of days between each start and end date of each tuple
    # n - the number of tuples to return
    # base -can be a date like '2014-01-01'
    # end_date tells it when the list of tuples should stop even if there are more number of tuples that n specified
    # The list progresses forward
    # end_date_apply- just determines if the last date will be the end date
    def dates_list_steps_bucket(self, n=None, steps=45, base=None, strf='%Y-%m-%dT%H:%M:%S.%fZ', Interval='days',end_date=None,end_date_apply=False):
        if not n and end_date: #to calculate n just in case and dont have to worry about n not being big enough or efficiency with this
            if not base:
                base = date.today()
            n = int(float(self.days_number_between_dates(base,end_date))/float(steps))+1

        l1 = self.dates_list_steps(days=n + 1, steps=steps, base=base, strf=strf, Interval=Interval)
        l2 = self.dates_list_steps(days=n + 1, steps=steps, base=base, strf=strf, Interval=Interval)
        l2.pop(0)
        l = zip(l1, l2)
        l = [(tup[0], self.date_add_interval(tup[1], -1, strf=strf)) for tup in l]

        if end_date and end_date_apply:
            end_date = TimeFunctions().date_format_from_string(end_date,strf=strf)
            l = self.list_end_date_apply(l,end_date)
        return l



    def last_day_of_month(self,any_day):
        try:
            next_month = any_day.replace(day=28) + datetime.timedelta(days=4)  # this will never fail
        except TypeError:
            any_day = dateutil.parser.parse(any_day, ignoretz=True)
            next_month = any_day.replace(day=28) + timedelta(days=4)  # this will never fail

        date_time = next_month - timedelta(days=next_month.day)
        v = TimeFunctions().date_format_from_string(date_time)
        return v

    def last_day_of_last_month(self):
        tup = TimeFunctions().date_convert_from_string('Last_Month')
        return tup[1]





    def days_between_dates(self, vala, valb, strf='%Y-%m-%d'):
        Func = lambda val: time.mktime((dateutil.parser.parse(val, ignoretz=True)).timetuple())
        end_date = valb
        vala = Func(vala)
        valb = Func(valb)
        val = valb - vala
        val = int(val / 86400) + 1
        l = self.dates_list(days=val, base=end_date, strf=strf)
        return l

    def days_between_dates_from_dict(self,key_name1,key_name2,Dict,strf='%Y-%m-%d'):
        vala = TimeFunctions().date_format_from_string(Dict[key_name1])
        valb = TimeFunctions().date_format_from_string(Dict[key_name2])
        return self.days_between_dates(vala,valb,strf=strf)


    # convenience function
    def eo_month_days_between_dates(self, start_date, end_date, strf='%Y-%m-%d'):
        l = list(set([TimeFunctions().eomonth(i) for i in TimeFunctions().days_between_dates(start_date,end_date,strf=strf)]))
        return l

    def dates_between_dates(self, vala, valb, strf='%Y-%m-%d'):
        Func = lambda val: time.mktime((dateutil.parser.parse(val, ignoretz=True)).timetuple())
        end_date = valb
        vala = Func(vala)
        valb = Func(valb)
        val = valb - vala
        val = int(val / 86400) + 1
        l = list(set(self.dates_list(days=val, base=end_date, strf=strf)))
        return l


    # if error_check, just return false
    def days_between_dates_check(self,s,time_frame,error_check=True):
        time_frame = TimeFunctions().date_convert_from_string(time_frame)
        try:
            s = TimeFunctions().date_format_from_string(s)
            if time_frame[0] <= s <= time_frame[1]:
                return True
        except AttributeError:
            return False
        except:
            return False


    # pulls the dates list since a date
    def days_since_date(self,val,strf='%Y-%m-%d'):
        today = TimeFunctions().today_date_stamp()
        l = self.days_between_dates(val,today,strf=strf)
        return l

    def dates_list_between_dates_from_string(self,time_range,strf='%Y-%m-%d'):
        time_range = TimeFunctions().date_convert_from_string(time_range)
        l = self.days_between_dates(time_range[0],time_range[1],strf=strf)
        if time_range[0] not in l:
            l = l + [time_range[0]]
        l.sort()
        return l


    def days_between_dates_from_string(self,s,strf='%Y-%m-%d'):
        tup = TimeFunctions().date_convert_from_string(s)
        l = self.days_between_dates(tup[0],tup[1],strf=strf)
        return l


    def days_between_filler(self,l,k='CloseDate',start_date='2013-01-01',end_date='2015-12-31',Dict={'Amount':0,'Name':'None'}):
        L = TimeFunctions().days_between_dates(start_date,end_date,strf='%Y-%m-%d')
        CloseDates = map(lambda D: D[k] ,l)
        for i in L:
            if i not in CloseDates:
                #D = dict([(i,0) for i in l[0].keys()])
                sub = Dict.items()
                sub.append((k,i))
                #Dict.update({k:i})
                D = dict(sub)
                #D = {'Amount':0,'Name':'None',k:i}
                #D.update({k:i})
                l.append(D)
        return l

    #out of the list, pull the latest date that comes before a given date at a certain key
    #l - array
    #k - the date key
    #i - the date that is the max key
    # Reverse False Gives Lowest to HIghest or earliest ot latest
    def latest_dict_based_on_key(self,l,k,i):
        l = sorted(l, key=lambda Dict: Dict[k], reverse=True)
        for D in l:
            if D[k] <= i:
                return D #the instant a dict is earlier or equal to the desired key, return that dict

        #if nothing comes before it because it comes before teh date range starts, just return teh first one
        return l[0]


        # sort the dictionary based on the key from smallest to highest
        #return l
    # kis the date field
    def days_between_filler_beginning_end(self,l,k):
        print "<days_between_filler_beginning_end>, time_functions.py"
        #print "time_functions.py , <days_between_filler_beginning_end>"
        key_dates = map(lambda D: D[k],l)
        key_dates.sort() #sorts from oldest to newest
        start_date = key_dates[0]
        end_date = key_dates[-1:][0]

        print "\tstart_date: {}".format(str(start_date))
        print "\tend_date: {}".format(str(end_date))

        date_range_dates = TimeFunctions().days_between_dates(start_date,end_date,strf='%Y-%m-%d')
        #print "\tdate_range_dates: {}".format(str(date_range_dates))
        for i in date_range_dates:
            if i not in key_dates:
                #print "\ti:{}".format(str(i))
                Dict = self.latest_dict_based_on_key(l,k,i)
                #print "\tdict: {}".format(str(Dict))
                Dict = dict(Dict.items() + [(k,i)])
                #dict = dict(dict.items().append((k,i)))
                #dict.update({k:i})
                #print "\tdict: {}".format(str(Dict))
                l.append(Dict)
        return l


    #same as before, but better format
    def days_before_from_today(self,val):
        # '2014-03-22'
        val = time.mktime((dateutil.parser.parse(val, ignoretz=True)).timetuple())
        #return val
        Today = str(date.today())
        Today = time.mktime((dateutil.parser.parse(Today, ignoretz=True)).timetuple())
        Delta = Today - val
        return Delta / 86400  #Ret

    def days_before_from_today_date(self,val):
        return TimeFunctions().date_add_interval(TimeFunctions().today_date_stamp(),val)

    #it's  d1 -d2 so the later dates is d2
    def months_number_between_dates(self, d2,
                                    d1):  # http://stackoverflow.com/questions/4039879/best-way-to-find-the-months-between-two-dates?answertab=votes#tab-top
        d1 = dateutil.parser.parse(d1, ignoretz=True)
        d2 = dateutil.parser.parse(d2, ignoretz=True)
        v = (d1.year - d2.year) * 12 + d1.month - d2.month
        return v

    def date_add_months(self, date, val,
                        strf='%Y-%m-%d',interval='months'):  #http://stackoverflow.com/questions/4130922/how-to-increment-datetime-month-in-python
        v = dateutil.parser.parse(date, ignoretz=True) + relativedelta(**{interval: val})
        v = v.strftime(strf)
        return v


    def date_add_interval(self, date, num, strf='%Y-%m-%d',interval='days'):  #http://stackoverflow.com/questions/4130922/how-to-increment-datetime-month-in-python
        v = dateutil.parser.parse(date, ignoretz=True) + relativedelta(**{interval: num})
        v = v.strftime(strf)
        return v

    # valb is the later date
    def days_number_between_dates(self, vala, valb,interval='days'):
        try:
            Func = lambda val: time.mktime((dateutil.parser.parse(val, ignoretz=True)).timetuple())
            vala = Func(vala)
            valb = Func(valb)
            val = valb - vala
            if interval == 'days':
                val = val / 86400
            elif interval == 'hours':
                divider = 86400/24
                val = val / divider
            else:
                val = val / 86400


        except AttributeError:
            # print "time_functions.py, line 270, <days_number_between_dates>"
            # print "vala: {}\nvalb: {}".format(str(vala),str(valb))
            # print "AttributeError: 'NoneType' object has no attribute 'read'"
            # print "returned 0"
            val = 0


        return val  #returns -304.0

    #takes in a list of dates and gets the average number of days between the dates
    def average_number_of_days_between_dates_list(self, l):
        l = map(lambda i: time.mktime((dateutil.parser.parse(i, ignoretz=True)).timetuple()), l)
        length = len(l) if len(l) > 0 else 1
        l.sort(reverse=True)
        l = [n - l[i + 1] for i, n in enumerate(l[:-1])]
        v = sum(l) / length
        v = v / 86400
        return v

    def date_days_before(self, val, days=1,strf='%Y-%m-%d'):
        val = dateutil.parser.parse(val, ignoretz=True)
        val = val - timedelta(days=days)
        return val.strftime(strf)


class TimeObject(TimeRanges):
    def now_date_time_eastern(self,adjusted_time=True,strf='%m/%d/%y %I:%M:%S%p',eastern_time=True):
        if eastern_time:
            val = datetime.now(timezone('US/Eastern'))  # http://stackoverflow.com/questions/1398674/python-display-the-time-in-a-different-time-zone
        else:
            val = datetime.utcnow()
        if adjusted_time:
            val = val.strftime(strf)
        return val

    def now_date_time(self):
        return datetime.utcnow() - timedelta(hours=4)

    def today_date_stamp_eastern(self,  strf='%Y-%m-%d'):
        val = datetime.now(timezone('US/Eastern'))  # http://stackoverflow.com/questions/1398674/python-display-the-time-in-a-different-time-zone
        val = val.strftime(strf)
        return val

    def today_date_stamp(self, strf='%Y-%m-%d'):
        val = datetime.now(timezone('US/Eastern'))  # http://stackoverflow.com/questions/1398674/python-display-the-time-in-a-different-time-zone
        val = val.strftime(strf)
        return val


        # val = datetime.utcnow() - timedelta(hours=4)
        # val = val.strftime(strf)
        # return val
    # convenience function
    def yesterday_date_stamp(self,strf='%Y-%m-%d'):
        val = TimeFunctions().date_add_interval(TimeFunctions().today_date_stamp(strf='%Y-%m-%d'),-1,strf=strf)
        return val


    def tomorrow_date_stamp(self):
        val = TimeFunctions().date_add_interval(TimeFunctions().today_date_stamp(strf='%Y-%m-%d'), 1)
        return val


class StringTimeConvert(TimeObject):
    def time_from_string(self, val):
        return datetime.strptime(val, "%I:%M %p")


class StringDateConvertObject(TimeObject):
    def datetime_form_string(self, val):
        val = dateutil.parser.parse(val, ignoretz=True)
        return val

    def datetime_form_string_delta(self, v, steps, interval="days", strf='%m/%d/%Y'):
        v = dateutil.parser.parse(v, ignoretz=True)
        v = v + timedelta(**{interval: steps})
        v = v.strftime(strf)
        return v


class StringDateConvert(StringDateConvertObject):
    # def dates_list(self,days=100,base=None,DateTime=True):
    # 	if base == None:
    # 		base = date.today()
    # 	else:
    # 		val = dateutil.parser.parse(base)
    # 		base = date(val.year,val.month,val.day) #so doesnt change to date time
    # 	date_list = [base - timedelta(days=x) for x in range(0, days)]
    # 	lst = map(str,date_list)
    # 	if DateTime == True:
    # 		Func= lambda val: dateutil.parser.parse(val).strftime('%Y-%m-%dT%H:%M:%S.%fZ')
    # 		lst = map(Func,lst)
    # 	return lst

    #Converts 'Jun-2014' to ['2014-06-01','2014-06-30']
    def MonthBeginningEndFromString(self, val):
        #print "\tinitial val:"
        #print "\t" + str(val)
        val = val.replace(val[-2:], "28-20" + val[-2:])  #replace the year with 2014 #wont work if already is 2014
        #print "time_functions.py , <MonthBeginningEndFromString>"
        #print "\tval:"
        #print "\t" + str(val)
        val = (dateutil.parser.parse(val, ignoretz=True))
        vala = date(val.year, val.month, 1)
        try:
            valb = date(val.year, val.month + 1, 1) - timedelta(days=1)
        except ValueError:  #Just in case it's December
            valb = date(val.year + 1, 1, 1) - timedelta(days=1)
        return [str(vala), str(valb)]  #returns datetime object if not stringified


    def TimePeriodConvert(self, val):
        if "QTD" in val or "Quarter" in val:
            return "This_Quarter"
        elif "YTD" in val or "Year" in val:
            return "This_Year"
        elif "MTD" in val or "Month" in val:
            return "This_Month"
        elif "Week" in val or "WTD" in val:
            return "This_Week"
        elif "Today" in val:
            return "Today"
        elif "Yesterday" in val or "Yest" in val:
            return "Yesterday"
        else:
            return 0 / 0

    def BeginningEndWeek(self, val):

        #input is 2014W45
        val = val.split("W")
        #>>['2014', '45']
        val = Week(int(val[0]), int(val[1]))
        vala = val.monday()
        valb = val.sunday()
        val = [str(vala), str(valb)]
        return val


    def BeginningEndQuarter(self, val):
        val = val.split("-")
        vala = int(val[0][1]) - 1
        #>> Q1 >> 1 >> 0 #purpose is to be able to refer to below list
        lst = [(1, 3), (4, 6), (7, 9), (10, 12)]
        vala = lst[vala]
        #(7, 9)

        valb = val[1]  #returns the year

        #print "\tvalb: {}".format(str(valb))
        #print "\tvala: {}".format(str(vala))

        Func = lambda item: (dateutil.parser.parse(str(item) + "/01/" + "20" + valb, ignoretz=True))
        #returns the date of the month of the quarter
        val1 = Func(vala[0])
        val1 = date(val1.year, val1.month, 1)

        val2 = Func(vala[1])
        #2014-12-14 00:00:00

        try:
            val2 = date(val2.year, val2.month + 1, 1) - timedelta(days=1)
        except ValueError:  #Just in case it's December
            val2 = date(val2.year + 1, 1, 1) - timedelta(days=1)
        #have to add 1 to the year since it's 1 day before 1/1/13
        return [str(val1), str(val2)]

    def BeginningEndMonth(self, val):
        try:  #in case the input is "This_Month" or something
            val = self.TimePeriodConvert(val)
            return [val, val]
        except ZeroDivisionError:
            pass
        if "Q" in val:  #in case it receives Q1-14 or something liek that
            return self.BeginningEndQuarter(val)  #run the quarter formula if month doesnt work
        else:
            pass

        if "W" in val:
            return self.BeginningEndWeek(val)
        else:
            pass

        if "201" in val:
            #Then treat it as a one date valeu
            val = str(dateutil.parser.parse(val).date())
            return [val, val]
        else:
            pass

        val = val.replace(val[-2:], "28-20" + val[-2:])  #replace the year with 2014 #wont work if already is 2014
        val = (dateutil.parser.parse(val, ignoretz=True))
        vala = date(val.year, val.month, 1)
        try:
            valb = date(val.year, val.month + 1, 1) - timedelta(days=1)
        except ValueError:  #Just in case it's December
            valb = date(val.year + 1, 1, 1) - timedelta(days=1)
        return [str(vala), str(valb)]  #returns datetime object if not stringified

    def BeginningEndMonthDateTime(self, val):
        try:  #in case the input is "This_Month" or something
            val = self.TimePeriodConvert(val)
            return [val, val]
        except ZeroDivisionError:
            pass

        if "Q" in val:  #in case it receives Q1-14 or something liek that
            return self.BeginningEndQuarter(val)  #run the quarter formula if month doesnt work
        else:
            pass
        if "W" in val:
            lst = self.BeginningEndWeek(val)
            Func = lambda val: (dateutil.parser.parse(val, ignoretz=True)).strftime('%Y-%m-%dT%H:%M:%S.%fZ')
            lst = map(Func, lst)
            return lst
        else:
            pass
        if "201" in val:
            #Then treat it as a one date valeu
            vala = dateutil.parser.parse(val).strftime('%Y-%m-%dT%H:%M:%S.%fZ')
            valb = dateutil.parser.parse(val) + timedelta(days=1)
            valb = valb.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
            return [vala, valb]
        else:
            pass
        val = val.replace(val[-2:], "20" + val[-2:])  #replace the year with 2014 #wont work if already is 2014
        val = (dateutil.parser.parse(val, ignoretz=True))
        vala = date(val.year, val.month, 1)
        vala = vala.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
        try:
            valb = date(val.year, val.month + 1, 1) - timedelta(days=1)
            valb = valb.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
        except ValueError:  #Just in case it's December
            valb = date(val.year + 1, 1, 1) - timedelta(days=1)
            valb = valb.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
        return [str(vala), str(valb)]  #returns datetime object if not stringified



    def TimePeriodConvertDates(self, val, FirstDayofWeek='Monday'):
        #Return the 14 days before
        if "Prior_Week" in val or "Prior Week" in val:
            DaysBefore = 14
            if FirstDayofWeek == 'Monday':
                val = Week(Week.thisweek().year, Week.thisweek().week)
                vala = val.monday() - timedelta(days=DaysBefore)
                valb = val.sunday() - timedelta(days=DaysBefore)
                val = [str(vala), str(valb)]
                return val
            elif FirstDayofWeek == 'Sunday':
                val = Week(Week.thisweek().year, Week.thisweek().week)
                vala = val.monday() - timedelta(days=1 + DaysBefore)
                valb = val.sunday() - timedelta(days=1 + DaysBefore)
                val = [str(vala), str(valb)]
                return val
        if "last_week" in val.lower() or "Last Week" in val:
            DaysBefore = 7
            if FirstDayofWeek == 'Monday':
                val = Week(Week.thisweek().year, Week.thisweek().week)
                vala = val.monday() - timedelta(days=DaysBefore)
                valb = val.sunday() - timedelta(days=DaysBefore)
                val = [str(vala), str(valb)]
                return val
            elif FirstDayofWeek == 'Sunday':
                val = Week(Week.thisweek().year, Week.thisweek().week)
                vala = val.monday() - timedelta(days=1 + DaysBefore)
                valb = val.sunday() - timedelta(days=1 + DaysBefore)
                val = [str(vala), str(valb)]
                return val
        elif "this_week" in val.lower() or "Week" in val or 'wtd' in val.lower():
            if FirstDayofWeek == 'Monday':
                val = Week(Week.thisweek().year, Week.thisweek().week)
                vala = val.monday()
                valb = val.sunday()
                val = [str(vala), str(valb)]
                return val
            elif FirstDayofWeek == 'Sunday':
                val = Week(Week.thisweek().year, Week.thisweek().week)
                vala = val.monday() - timedelta(days=1)
                valb = val.sunday() - timedelta(days=1)
                val = [str(vala), str(valb)]
                return val
        #in case i want something from 7 days ago, or 14 days ago
        elif "_days_ago" in val.lower():
            today = TimeFunctions().today_date_stamp_eastern()
            number_of_days = val.split('_')[0] #val.lower()[lower_case_query.index()]
            start_date = TimeFunctions().date_add_interval(today,int(number_of_days)*-1,interval='days')
            tup = [start_date,start_date]
            return tup

        #NEXT_90_DAYS
        elif "last_" in val.lower() and "_days" in val.lower():
            today = TimeFunctions().today_date_stamp_eastern()
            number_of_days = val.split('_')[1] #val.lower()[lower_case_query.index()]
            start_date = TimeFunctions().date_add_interval(today,int(number_of_days)*-1,interval='days')
            tup = [start_date,today]
            return tup
        elif "next_" in val.lower() and "_days" in val.lower():
            today = TimeFunctions().today_date_stamp_eastern()
            number_of_days = val.split('_')[1] #val.lower()[lower_case_query.index()]
            end_date = TimeFunctions().date_add_interval(today,int(number_of_days),interval='days')
            tup = [today,end_date]
            return tup
        elif "last_quarter" in val.lower() or "last quarter" in val.lower():
            today = TimeFunctions().today_date_stamp()
            this_quarter = TimeFunctions().date_format_from_string_query(today, "QuarterYear")
            tup = TimeFunctions().BeginningEndQuarter(this_quarter)
            beginning_of_next_quarter = TimeFunctions().date_add_interval(tup[0],-1,interval='days')
            next_quarter = TimeFunctions().date_format_from_string_query(beginning_of_next_quarter, "QuarterYear")
            tup = TimeFunctions().BeginningEndQuarter(next_quarter)
            return tup
        elif "next_quarter" in val.lower() or "next quarter" in val.lower():
            today = TimeFunctions().today_date_stamp()
            this_quarter = TimeFunctions().date_format_from_string_query(today, "QuarterYear")
            tup = TimeFunctions().BeginningEndQuarter(this_quarter)
            beginning_of_next_quarter = TimeFunctions().date_add_interval(tup[1],1,interval='days')
            next_quarter = TimeFunctions().date_format_from_string_query(beginning_of_next_quarter, "QuarterYear")
            tup = TimeFunctions().BeginningEndQuarter(next_quarter)
            return tup
        elif "QTD" in val or "quarter" in val.lower():
            a = TimeFunctions().today_date_stamp()
            b = TimeFunctions().date_format_from_string_query(a, "QuarterYear")
            c = TimeFunctions().BeginningEndQuarter(b)
            return c
        elif "next year" in val.lower() or "next_year" in val.lower():
            new_date = TimeFunctions().date_add_interval(TimeFunctions().today_date_stamp(strf='%Y-01-01'),366)
            start_date = TimeFunctions().date_format_from_string(new_date,strf='%Y-01-01')
            end_date = TimeFunctions().date_format_from_string(new_date,strf='%Y-12-31')
            l = [start_date,end_date]
            return l
        elif "YTD" in val or "year" in val.lower():
            l = [TimeFunctions().today_date_stamp(strf='%Y-01-01'), TimeFunctions().today_date_stamp(strf='%Y-12-31')]
            return l
        #return last month by calling beginngig end month of last month
        #made it 15 since it's right smack in the middle of the month
        elif "last_month" in val.lower() or "Last Month" in val:
            val = date.today()
            if val.month == 1:  #if it's january, it should return december
                val_month = 12
                val_year = val.year - 1
            else:
                val_month = val.month - 1
                val_year = val.year
            val = date(val_year, val_month, 15).strftime('%B-%y')
            return self.BeginningEndMonth(val)
        elif "MTD" in val or "month" in val.lower():
            val = datetime.now(timezone('US/Eastern'))
            val = val.strftime('%B-%y')
            return self.BeginningEndMonth(val)
        elif "week" in val.lower() or "WTD" in val:
            return "This_Week"
        elif "today" in val.lower():
            val = TimeFunctions().today_date_stamp()
            #val = date.today()

            return [str(val), str(val)]
        elif "yesterday" in val.lower() or "Yest" in val:
            val = TimeFunctions().yesterday_date_stamp()
            return [str(val), str(val)]
        elif "tomorrow" in val.lower() or "tom" in val:
            val = TimeFunctions().tomorrow_date_stamp()
            return [str(val), str(val)]
        else:
            return 0 / 0


    def date_convert_from_string(self, val):
        if '000000z' in str(val).lower():
            val = val.split('T')[0]
        try:  #in case the input is "This_Month" or something
            val = self.TimePeriodConvertDates(val, FirstDayofWeek='Sunday')
            return val
        except ZeroDivisionError:
            pass
        if "/" in val:  #input format would need to be "2/10/2014 - 2/16/2014"
            val = self.BetweenTwoDates(val)
            return val
        if "Q" in val:  #in case it receives Q1-14 or something liek that
            return self.BeginningEndQuarter(val)  #run the quarter formula if month doesnt work
        else:
            pass
        if "W" in val:
            return self.BeginningEndWeek(val)
        else:
            pass

        if "201" in val:
            #Then treat it as a one date valeu
            if len(str(val)) == 4:  #in the case that this is suppose to be a year
                return [str(val) + '-01-01', str(val) + '-12-31']
            else:
                val = str(dateutil.parser.parse(val).date())
                return [val, val]
        else:
            self.MonthBeginningEndFromString(val)
        return self.BeginningEndMonth(val)  #incase all else fails

    #return "whatever"


    #Takes in the time frame and spits it out as iso
    #BetweenTwoDates takes in Month and Time Frame (e.g. 'Jan-14,2/10/2014 - 2/16/2014)
    #Utilize this to just build on DateConvertFromString to get ['2014-04-28', '2014-05-04']
    def date_convert_from_string_iso(self, val):
        lst = self.date_convert_from_string(val)
        try:  #in the case where dateformatconvert wouldn't work because dateconvertfromstring spits out "This_Quarter"
            Str = self.DateFormatConvert(lst)
            lst = self.BetweenTwoDatesIso(Str)
            return lst

        except TypeError:
            return lst

    #Originates from BetweenTwoDatesIso above but has less code
    #No longer accomdates for type errors etc.
    def BetweenTwoDatesIso(self, val):
        lst = val.split("-")
        lst[1] = lst[1] + " 11:59:59PM"  #make it the final minute of the day
        lst = map(dateutil.parser.parse, lst)
        Func = lambda val: val.strftime('%Y-%m-%dT%H:%M:%S.%fZ')  #so that it doesnt show time
        lst = map(Func, lst)
        return lst

    #Purpose is to turn ['2014-04-28', '2014-05-04'] to 2/10/2014 - 2/16/2014
    #Turn list into datetime objects, and then change to format
    def DateFormatConvert(self, lst):
        Func = lambda val: (dateutil.parser.parse(val, ignoretz=True)).strftime('%m/%d/%Y')
        lst = map(Func, lst)
        return lst[0] + " - " + lst[1]

    #convert string into two dates return as list
    #input:  "2/10/2014 - 2/16/2014"
    def BetweenTwoDates(self, val):
        lst = val.split("-")
        Func = lambda val: str(dateutil.parser.parse(val, ignoretz=True).date())
        lst = map(Func, lst)
        return lst


class TimeFunctions(StringDateConvert):
    # Retruns a string with current date and time and passed in text
    def done_now(self, s):
        return s + " " + str(datetime.now())


"""


	GIVE ME LIST OF INTERVAL OF 30 days BACK 


	def TimeIntervalList(self,Steps,Interval="hours",strftime='%Y-%m-%dT%H:%M:%S.%fZ',BaseTime=None):


	lst = [NowTimeStamp - timedelta(**{Interval:step}) for step in range(0, Steps)]
	just do today - 30 day, then today - 60 days , then today - 90 days 

	then just run it again for base time 30 days from now and then the difference 
	will be sets of days for the past 30 days or however many steps 

	turn it into dates, zip it up, and then i have my list of dates to use for the function 
	that would group them and then average them up together. 


"""


def main():
    TimeFunctions().days_between_dates()


    TimeFunctions().date_add_interval(date,-1,interval='months')
    print TimeFunctions().date_format_from_string('This Month', strf="%b-%Y")

    print TimeFunctions().date_format_from_string('Last Month', strf="%b-%Y")

    return
    TimeFunctions().date_format_from_string()

    #print TimeFunctions().date_add_interval('2012-07-01',1,interval='years')

    return
    print TimeFunctions().bomonth('2012-07-01')

    return
    print TimeFunctions().date_format_from_string('2015-09-16 19:44:56.433386',strf='%m/%d/%Y %I:%M%p')


    #print TimeFunctions().date_convert_from_string('2015-08-05')

    return
    print TimeFunctions().date_convert_from_string("2015W27")
    return
    print TimeFunctions().dates_list_steps_bucket()

    return
    s = "Last_Month"
    print TimeFunctions().date_convert_from_string("Last_Month")

    return
    print TimeFunctions().today_date_stamp()
    return
    print TimeFunctions().date_format_from_string_query('2015-01-15', 'monthyear')

    return
    print TimeRanges().dates_list_steps_bucket()
    return

    # s = '1425287379'
    # print TimeFunctions().unicode_to_day_date(s,strf='%Y-%m-%d')

    # return
    # print datetime.today()
    # return
    # s = 1425320225
    # print TimeFunctions().unicode_timeframe_check(s,timeframe='This_Month')
    # return

    s = "Today"
    print TimeFunctions().date_convert_from_string(s)
    return
    #s = "2015-02-20T00:01:51.000+0000"
    #print dateutil.parser.parse(s,ignoretz=True)
    s = "Tue, 2 Dec 2014 16:13:06 -0800"
    #s = "Mar 28,2014"
    s = datetime.datetime(2015, 2, 12, 23, 56, 40)
    print s

    #print TimeFunctions().date_format_from_string(s)


    return
    val = str(date.today())
    dateutil.parser.parse(val, ignoretz=True)
    return
    s = "2012W45"

    print TimeFunctions().date_convert_from_string(s)
    return
    d1 = "09/09/15"
    d2 = "12/09/15"
    print TimeFunctions().date_occurences_calculate(d1, d2, 2)

    return
    print TimeFunctions().days_number_between_dates('2014-10-14', '2014-12-16T22:05:41.000+0000')
    return
    print TimeFunctions().date_range_list()
    return

    s = "Last_Month"
    print TimeFunctions().date_convert_from_string(s)
    return
    print TimeFunctions().date_convert_from_string('2013-10-05')
    return
    print TimeFunctions().time_occurence_check(1419274934803, 48, Interval="hours")

    return
    print TimeFunctions().time_occurence_check('1418642008', 48, Interval="hours")

    return
    print datetime.fromtimestamp(1419367868185)
    return

    return
    print TimeFunctions().date_convert_from_string('this_quarter')

    print TimeFunctions().date_convert_from_string('this_quarter')
    return
    s = "This_Quarter"
    print TimeFunctions().date_convert_from_string(s)

    return
    a = TimeFunctions().today_date_stamp()
    b = TimeFunctions().date_format_from_string_query(a, "QuarterYear")
    c = TimeFunctions().BeginningEndQuarter(b)
    print c

    return
    s = "This_Year"
    print TimeFunctions().date_convert_from_string(s)

    return

    v = "12/15/2014"
    s = TimeFunctions().date_format_from_string_query(v, "WeekYear")
    print s
    return
    print (dateutil.parser.parse(v, ignoretz=True))

    s = "Feb-14"
    print TimeFunctions().date_convert_from_string(s)

    return
    s = TimeFunctions().date_format_from_string_query("2014-10-26", "MonthYear")
    print s
    s = '2014W44'  #[2014-11-02 -  2014-11-08]
    s = '2014W44'  #['2014-10-27', '2014-11-02']



    #print TimeFunctions().date_convert_from_string(s)
    #print l




    return
    s = "This_Month"
    print TimeFunctions().date_convert_from_string(s)

    return
    s = "2014-03-27T17:19:23.000+0000"

    s = TimeFunctions().datetime_form_string_delta(TimeFunctions().date_convert_from_string(s)[0], -60, interval="days",
                                                   strf='%Y-%m-%d')
    print s

    return
    print TimeFunctions().date_convert_from_string(s)
    return
    print TimeFunctions().date_convert_from_string("today")

    return
    print TimeFunctions().today_date_stamp()
    return
    print TimeFunctions().unicode_to_day_date(1410997373)

    return
    print TimeBooleans().cron_syntax_check('13 * * * 1')
    return

    s = "10:00 AM"
    print TimeFunctions().time_check(s, 5)

    return

    a = "09/05/2014"

    print TimeFunctions().date_convert_from_string("This_Year")
    return

    v = TimeFunctions().datetime_form_string_delta(a, 5)
    print v

    return

    v = TimeFunctions().datetime_form_string(a)
    print v

    return

    print TimeFunctions().date_convert_from_string("January 10 2014 -  December 9 2014")


#First test if it will input 'this week or last week'
#This will spit back 0/0 if no conditions are met
#Month-Year to get beginning and end year is last resort
#OUTPUT: ['2014-04-28', '2014-05-04']

if __name__ == "__main__": main()

#TimeFunctions.py

from __future__ import division
from isoweek import Week
import math
import time
import datetime
from datetime import datetime, timedelta, time, date
import time
import pytz
import dateutil.parser
from time import strptime

import re


class DateStringConvert(object):
    # Crate list of dates
    #Return the Q2-14 if the month is that
    #Returns the current quarter
    #Returns the Quarter Number
    def QuarterCurrent(self):
        val = date.today()
        #return val.month #returns 6
        year = date(val.year, val.month - 1, 15).strftime('%y')  #returns the Year as 14
        lst = [(1, 3), (4, 6), (7, 9), (10, 12)]
        #return the index of the one that it falls under
        for tup in lst:
            #return tup[0]
            lsta = range(tup[0], tup[1] + 1)
            if val.month in tup:
                Quarter = lst.index(tup) + 1
        return "Q" + str(Quarter) + "-" + str(year)


    #produces zipped up list of tuples for beginning and end of time frame
    #it could return intervals of days or interval of hours or interval of minutes
    #Input can be minutes, days, hours, weeks
    def TimeIntervalList(self, Steps, Interval="hours", strftime='%Y-%m-%dT%H:%M:%S.%fZ', BaseTime=None):
        if BaseTime == None:
            NowTimeStamp = datetime.utcnow()  #need to store it
        else:
            NowTimeStamp = dateutil.parser.parse(BaseTime)
        lst = [NowTimeStamp - timedelta(**{Interval: step}) for step in range(0, Steps)]
        Func = lambda val: dateutil.parser.parse(str(val)).strftime(strftime)
        lst = map(Func, lst)
        return lst

    #same as TimeInterval list, except that it asks for 1 additional step and appends that way
    #then it also zips up
    def time_difference_list(self, Steps, Interval="days", strftime='%Y-%m-%dT%H:%M:%S.%fZ', BaseTime=None):
        lsta = self.TimeIntervalList(Steps, Interval=Interval, strftime=strftime, BaseTime=BaseTime)
        lstb = self.TimeIntervalList(Steps + 1, Interval=Interval, strftime=strftime, BaseTime=BaseTime)
        lstb.pop(0)
        lst = zip(lstb, lsta)
        return lst


    #Returns list of dates (can be in Datetime format or not)
    def DatesList(self, days=100, base=None, DateTime=False, strf='%Y-%m-%dT%H:%M:%S.%fZ'):
        if base == None:
            base = date.today()
        else:
            val = dateutil.parser.parse(base)
            base = date(val.year, val.month, val.day)  #so doesnt change to date time
        date_list = [base - timedelta(days=x) for x in range(0, days)]
        lst = map(str, date_list)
        if DateTime == True:
            Func = lambda val: dateutil.parser.parse(val).strftime(strf)
            lst = map(Func, lst)
        return lst


    #hours list
    def HoursList(self, days=100, base=None, DateTime=True):
        if base == None:
            base = datetime.utcnow()
        else:
            val = dateutil.parser.parse(base)
            base = date(val.year, val.month, val.day)  #so doesnt change to date time
        date_list = [base - timedelta(weeks=x) for x in range(0, days)]
        lst = map(str, date_list)
        if DateTime == True:
            Func = lambda val: dateutil.parser.parse(val).strftime('%Y-%m-%dT%H:%M:%S.%fZ')
            lst = map(Func, lst)
        return lst


    def BeginningEndWeek(self, val):

        #input is 2014W45
        val = val.split("W")
        #>>['2014', '45']
        val = Week(int(val[0]), int(val[1]))
        vala = val.monday()
        valb = val.sunday()
        val = [str(vala), str(valb)]
        return val


    def BeginningEndQuarter(self, val):
        val = val.split("-")
        vala = int(val[0][1]) - 1
        #>> Q1 >> 1 >> 0 #purpose is to be able to refer to below list
        lst = [(1, 3), (4, 6), (7, 9), (10, 12)]
        vala = lst[vala]
        #(7, 9)

        valb = val[1]  #returns the year

        Func = lambda item: (dateutil.parser.parse(str(item) + "/" + "20" + valb, ignoretz=True))
        #returns the date of the month of the quarter
        val1 = Func(vala[0])
        val1 = date(val1.year, val1.month, 1)

        val2 = Func(vala[1])
        print val2
        #2014-12-14 00:00:00

        try:
            val2 = date(val2.year, val2.month + 1, 1) - timedelta(days=1)
        except ValueError:  #Just in case it's December
            val2 = date(val2.year + 1, 1, 1) - timedelta(days=1)
        #have to add 1 to the year since it's 1 day before 1/1/13
        return [str(val1), str(val2)]

    def TimePeriodConvert(self, val):
        if "QTD" in val or "Quarter" in val:
            return "This_Quarter"
        elif "YTD" in val or "Year" in val:
            return "This_Year"
        elif "MTD" in val or "Month" in val:
            return "This_Month"
        elif "Week" in val or "WTD" in val:
            return "This_Week"
        elif "Today" in val:
            return "Today"
        elif "Yesterday" in val or "Yest" in val:
            return "Yesterday"
        else:
            return 0 / 0

    def TimePeriodConvertDates(self, val, FirstDayofWeek='Monday'):
        #Return the 14 days before
        if "Prior_Week" in val or "Prior Week" in val:
            DaysBefore = 14
            if FirstDayofWeek == 'Monday':
                val = Week(Week.thisweek().year, Week.thisweek().week)
                vala = val.monday() - timedelta(days=DaysBefore)
                valb = val.sunday() - timedelta(days=DaysBefore)
                val = [str(vala), str(valb)]
                return val
            elif FirstDayofWeek == 'Sunday':
                val = Week(Week.thisweek().year, Week.thisweek().week)
                vala = val.monday() - timedelta(days=1 + DaysBefore)
                valb = val.sunday() - timedelta(days=1 + DaysBefore)
                val = [str(vala), str(valb)]
                return val
        if "Last_Week" in val or "Last Week" in val:
            DaysBefore = 7
            if FirstDayofWeek == 'Monday':
                val = Week(Week.thisweek().year, Week.thisweek().week)
                vala = val.monday() - timedelta(days=DaysBefore)
                valb = val.sunday() - timedelta(days=DaysBefore)
                val = [str(vala), str(valb)]
                return val
            elif FirstDayofWeek == 'Sunday':
                val = Week(Week.thisweek().year, Week.thisweek().week)
                vala = val.monday() - timedelta(days=1 + DaysBefore)
                valb = val.sunday() - timedelta(days=1 + DaysBefore)
                val = [str(vala), str(valb)]
                return val
        elif "This_Week" in val or "Week" in val:
            if FirstDayofWeek == 'Monday':
                val = Week(Week.thisweek().year, Week.thisweek().week)
                vala = val.monday()
                valb = val.sunday()
                val = [str(vala), str(valb)]
                return val
            elif FirstDayofWeek == 'Sunday':
                val = Week(Week.thisweek().year, Week.thisweek().week)
                vala = val.monday() - timedelta(days=1)
                valb = val.sunday() - timedelta(days=1)
                val = [str(vala), str(valb)]
                return val
        elif "QTD" in val or "Quarter" in val:
            return "This_Quarter"
        elif "YTD" in val or "Year" in val:
            return "This_Year"
        #return last month by calling beginngig end month of last month
        #made it 15 since it's right smack in the middle
        elif "Last_Month" in val or "Last Month" in val:
            val = date.today()
            val = date(val.year, val.month - 1, 15).strftime('%B-%y')
            return self.BeginningEndMonth(val)
        elif "MTD" in val or "Month" in val:
            val = date.today().strftime('%B-%y')
            return self.BeginningEndMonth(val)
        elif "Week" in val or "WTD" in val:
            return "This_Week"
        elif "Today" in val:
            val = date.today()
            return [str(val), str(val)]
        elif "Yesterday" in val or "Yest" in val:
            val = date.today() - timedelta(days=1)
            return [str(val), str(val)]
        else:
            return 0 / 0


    #Converts 'Jun-2014' to ['2014-06-01','2014-06-30']
    def MonthBeginningEndFromString(self, val):
        val = val.replace(val[-2:], "20" + val[-2:])  #replace the year with 2014 #wont work if already is 2014
        val = (dateutil.parser.parse(val, ignoretz=True))
        vala = date(val.year, val.month, 1)
        try:
            valb = date(val.year, val.month + 1, 1) - timedelta(days=1)
        except ValueError:  #Just in case it's December
            valb = date(val.year + 1, 1, 1) - timedelta(days=1)
        return [str(vala), str(valb)]  #returns datetime object if not stringified

    def BeginningEndMonth(self, val):
        try:  #in case the input is "This_Month" or something
            val = self.TimePeriodConvert(val)
            return [val, val]
        except ZeroDivisionError:
            pass
        if "Q" in val:  #in case it receives Q1-14 or something liek that
            return self.BeginningEndQuarter(val)  #run the quarter formula if month doesnt work
        else:
            pass

        if "W" in val:
            return self.BeginningEndWeek(val)
        else:
            pass

        if "201" in val:
            #Then treat it as a one date valeu
            val = str(dateutil.parser.parse(val).date())
            return [val, val]
        else:
            pass

        val = val.replace(val[-2:], "20" + val[-2:])  #replace the year with 2014 #wont work if already is 2014
        val = (dateutil.parser.parse(val, ignoretz=True))
        vala = date(val.year, val.month, 1)
        try:
            valb = date(val.year, val.month + 1, 1) - timedelta(days=1)
        except ValueError:  #Just in case it's December
            valb = date(val.year + 1, 1, 1) - timedelta(days=1)
        return [str(vala), str(valb)]  #returns datetime object if not stringified

    def BeginningEndMonthDateTime(self, val):
        try:  #in case the input is "This_Month" or something
            val = self.TimePeriodConvert(val)
            return [val, val]
        except ZeroDivisionError:
            pass

        if "Q" in val:  #in case it receives Q1-14 or something liek that
            return self.BeginningEndQuarter(val)  #run the quarter formula if month doesnt work
        else:
            pass
        if "W" in val:
            lst = self.BeginningEndWeek(val)
            Func = lambda val: (dateutil.parser.parse(val, ignoretz=True)).strftime('%Y-%m-%dT%H:%M:%S.%fZ')
            lst = map(Func, lst)
            return lst
        else:
            pass
        if "201" in val:
            #Then treat it as a one date valeu
            vala = dateutil.parser.parse(val).strftime('%Y-%m-%dT%H:%M:%S.%fZ')
            valb = dateutil.parser.parse(val) + timedelta(days=1)
            valb = valb.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
            return [vala, valb]
        else:
            pass
        val = val.replace(val[-2:], "20" + val[-2:])  #replace the year with 2014 #wont work if already is 2014
        val = (dateutil.parser.parse(val, ignoretz=True))
        vala = date(val.year, val.month, 1)
        vala = vala.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
        try:
            valb = date(val.year, val.month + 1, 1) - timedelta(days=1)
            valb = valb.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
        except ValueError:  #Just in case it's December
            valb = date(val.year + 1, 1, 1) - timedelta(days=1)
            valb = valb.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
        return [str(vala), str(valb)]  #returns datetime object if not stringified

    def EndPreviousMonth(self, val):
        if "Q" in val:
            val = self.BeginningEndQuarter(val)[0]  #so that it returns the first day of the quarter
            val = (dateutil.parser.parse(val, ignoretz=True))  #convert back to datetime from text
            val = val - timedelta(days=1)
            return str(val)[:10]  #so that it doesnt show time
        else:
            pass
        val = val.replace(val[-2:], "20" + val[-2:])  #replace the year with 2014 #wont work if already is 2014
        val = (dateutil.parser.parse(val, ignoretz=True))
        val = date(val.year, val.month, 1) - timedelta(days=1)
        return val  #returns datetime object if not stringified

    def BetweenTwoDatesIso(self, val):
        try:
            lst = self.BeginningEndMonth(val)
            lst = map(dateutil.parser.parse, lst)
            Func = lambda val: val.strftime('%Y-%m-%dT%H:%M:%S.%fZ')  #so that it doesnt show time
            lst = map(Func, lst)
            return lst
        except TypeError:  #Generated for Dates like 3/7 - 3/13
            lst = val.split("-")
            lst = map(dateutil.parser.parse, lst)
            Func = lambda val: val.strftime('%Y-%m-%dT%H:%M:%S.%fZ')  #so that it doesnt show time
            lst = map(Func, lst)
            return lst
        except ValueError:
            val = dateutil.parser.parse(val).strftime('%Y-%m-%dT%H:%M:%S.%fZ')
            return [val, val]
        #lst = self.BeginningEndMonth(val)
        #return lst

        #Input: 3/7 - 3/13


    def DayBeforeTextDate(self, val):
        if "QTD" in val or "Quarter" in val:
            val = datetime.utcnow() - timedelta(hours=4)
            if val.month < 4:
                val = date(val.year - 1, 12, 31)
                return str(val)
            elif val.month < 7:
                val = date(val.year - 1, 3, 31)
                return str(val)
            elif val.month < 10:
                val = date(val.year, 6, 30)
                return str(val)
            else:
                val = date(val.year, 9, 30)
                return str(val)
        elif "YTD" in val or "Year" in val:
            val = datetime.utcnow() - timedelta(hours=4)
            val = date(val.year, 1, 1) - timedelta(days=1)
            return str(val)
        elif "MTD" in val or "Month" in val:
            val = datetime.utcnow() - timedelta(hours=4)
            val = date(val.year, val.month, 1) - timedelta(days=1)
            return str(val)
        elif "Today" in val:
            val = datetime.utcnow() - timedelta(hours=4) - timedelta(days=1)
            return str(val)
        elif "Week" in val or "WTD":
            val = datetime.utcnow() - timedelta(hours=4)
            val = val - timedelta(days=val.weekday()) - timedelta(days=2)
            return str(val)

    #Create function that can take in a date and return the date in month year format
    #input would be '2014-06-01'
    #Turn it into a datestring
    #then take the month and the year
    def DatetoMonthYearFormat(self, val):
        val = dateutil.parser.parse(val, ignoretz=True)
        val = val.strftime('%b-%y')

        return val
        return val.year
        return val.month

    #convert string into two dates return as list
    #input:  "2/10/2014 - 2/16/2014"
    def BetweenTwoDates(self, val):
        lst = val.split("-")
        Func = lambda val: str(dateutil.parser.parse(val, ignoretz=True).date())
        lst = map(Func, lst)
        return lst


"""
	Re-Organize DateStringConvert 
"""


class DateConvertFromString(DateStringConvert):
    # First test if it will input 'this week or last week'
    #This will spit back 0/0 if no conditions are met
    #Month-Year to get beginning and end year is last resort
    #OUTPUT: ['2014-04-28', '2014-05-04']
    def DateConvertFromString(self, val):
        try:  #in case the input is "This_Month" or something
            val = self.TimePeriodConvertDates(val, FirstDayofWeek='Sunday')
            return val
        except ZeroDivisionError:
            pass
        if "/" in val:  #input format would need to be "2/10/2014 - 2/16/2014"
            val = self.BetweenTwoDates(val)
            return val
        if "Q" in val:  #in case it receives Q1-14 or something liek that
            return self.BeginningEndQuarter(val)  #run the quarter formula if month doesnt work
        else:
            pass
        if "W" in val:
            return self.BeginningEndWeek(val)
        else:
            pass
        if "201" in val:
            #Then treat it as a one date valeu
            val = str(dateutil.parser.parse(val).date())
            return [val, val]
        else:
            self.MonthBeginningEndFromString(val)

        return DateStringConvert().BeginningEndMonth(val)  #incase all else fails

    #return "whatever"

    #Takes in the time frame and spits it out as iso
    #BetweenTwoDates takes in Month and Time Frame (e.g. 'Jan-14,2/10/2014 - 2/16/2014)
    #Utilize this to just build on DateConvertFromString to get ['2014-04-28', '2014-05-04']
    def DateConvertFromStringIso(self, val):
        lst = self.DateConvertFromString(val)
        try:  #in the case where dateformatconvert wouldn't work because dateconvertfromstring spits out "This_Quarter"
            Str = self.DateFormatConvert(lst)
            lst = self.BetweenTwoDatesIso(Str)
            return lst

        except TypeError:
            return lst

    #Originates from BetweenTwoDatesIso above but has less code
    #No longer accomdates for type errors etc.
    def BetweenTwoDatesIso(self, val):
        lst = val.split("-")
        lst[1] = lst[1] + " 11:59:59PM"  #make it the final minute of the day
        lst = map(dateutil.parser.parse, lst)
        Func = lambda val: val.strftime('%Y-%m-%dT%H:%M:%S.%fZ')  #so that it doesnt show time
        lst = map(Func, lst)
        return lst


    #Purpose is to turn ['2014-04-28', '2014-05-04'] to 2/10/2014 - 2/16/2014
    #Turn list into datetime objects, and then change to format
    def DateFormatConvert(self, lst):
        Func = lambda val: (dateutil.parser.parse(val, ignoretz=True)).strftime('%m/%d/%Y')
        lst = map(Func, lst)
        return lst[0] + " - " + lst[1]


class DateRangeFunctions(DateConvertFromString):
    def DaysfromText(self, val='2014-03-22'):
        # '2014-03-22'
        val = time.mktime((dateutil.parser.parse(val, ignoretz=True)).timetuple())
        #return val
        Today = str(date.today())
        Today = time.mktime((dateutil.parser.parse(Today, ignoretz=True)).timetuple())
        Delta = Today - val
        return Delta / 86400  #Returns 29.0 Number of Days as Integer

    #same as before, but better format
    def days_before_from_today(self,val):
        # '2014-03-22'
        val = time.mktime((dateutil.parser.parse(val, ignoretz=True)).timetuple())
        #return val
        Today = str(date.today())
        Today = time.mktime((dateutil.parser.parse(Today, ignoretz=True)).timetuple())
        Delta = Today - val
        return Delta / 86400  #Ret

    def DaysAddtoText(self, val):
        val = datetime.utcnow() + timedelta(days=val)
        val = val.strftime('%Y-%m-%d')
        return val

    def DaysBetweenDates(self, vala, valb):
        Func = lambda val: time.mktime((dateutil.parser.parse(val, ignoretz=True)).timetuple())
        vala = Func(vala)
        valb = Func(valb)
        val = valb - vala
        val = val / 86400
        return val  # returns -304.0

    ##u'2014-05-14'
    ##u'2015-05-19'

    # input dates in a list and a date
    #return true if it's in the date range, and false if not
    def DateCheckBetweenDates(self, vala, valb):
        #['2014-06-01', '2014-06-30']
        val1 = vala[0]
        val2 = vala[1]
        Func = lambda val: dateutil.parser.parse(val, ignoretz=True)
        if Func(val1) <= Func(valb) <= Func(val2):
            return True
        else:
            return False

    #return a certain number of days before of a string date
    def DateDaysBefore(self, val, days=1):
        val = dateutil.parser.parse(val, ignoretz=True)
        val = val - timedelta(days=days)
        return val.strftime('%Y-%m-%d')


class DateFunctions(DateRangeFunctions):
    def DateStringofEndofLastMonth(self):
        return self.DateofEndofLastMonth.strftime('%Y-%m-%d')

    def DateofEndofLastMonth(self):
        Today = datetime.combine(date.today(), datetime.min.time())
        YearofDate = Today.year
        MonthofDate = Today.month
        D = date(YearofDate, MonthofDate, 1) - timedelta(days=1)
        return D

    def TextDateofLastMonth(self):
        Today = datetime.combine(date.today(), datetime.min.time())
        YearofDate = Today.year
        MonthofDate = Today.month
        D = date(YearofDate, MonthofDate, 1) - timedelta(days=1)
        return D.strftime('%B')

    def DateofEndofLastLastMonth(self):
        Today = datetime.combine(date.today(), datetime.min.time())
        YearofDate = Today.year
        MonthofDate = Today.month - 1  # subtract 1 for last of last month
        D = date(YearofDate, MonthofDate, 1) - timedelta(days=1)
        return D

    def DaysAgo(self, DaysAgo=0):
        Date = datetime.combine(date.today(), datetime.min.time())
        Date = (Date - timedelta(days=DaysAgo))
        # Date = Date.strftime('%Y-%m-%d')
        return Date

    def DaysSinceBeginningofYear(self):
        Today = date.today()
        YearofDate = Today.year
        BoY = date(YearofDate, 1, 1)
        Delta = Today - BoY
        return Delta.days

    def DateTodayDateTime(self):
        return date.today()

    def DateTimeTodayDateTime(self):
        return datetime.utcnow() - timedelta(hours=4)

    def TrueifBeforeToday(self, val):
        # >>u'2014-05-06'
        vala = (dateutil.parser.parse(val, ignoretz=True))
        valb = datetime.today()
        if vala < valb:
            return True
        else:
            return False


class TextFunctions(DateFunctions):
    def TimeParsed(self, val):
        val = dateutil.parser.parse(val, ignoretz=True)
        val = val - timedelta(hours=4)  # dont know why this one is 4 and the other is 5
        return val.strftime('%l:%M%p')

    def DatefromString(self, val):
        val = dateutil.parser.parse(val, ignoretz=True)
        val = val - timedelta(hours=4)  # dont know why this one is 4 and the other is 5
        return val.strftime('%m/%d/%Y')

    def DateStringfromString(self, val, Format='%m/%d/%Y'):
        val = dateutil.parser.parse(val, ignoretz=True)
        # val = val - timedelta(hours=4) #dont know why this one is 4 and the other is 5
        return val.strftime(Format)

    def DateStringfromStringStandard(self, val):
        val = dateutil.parser.parse(val, ignoretz=True)
        # val = val - timedelta(hours=4) #dont know why this one is 4 and the other is 5
        return val.strftime('%Y-%m-%d')

        # Turn a text string into a dateobject

    #Change it to unicode
    #change to date object
    def StringtoDateObject(self, val):
        val = time.mktime((dateutil.parser.parse(val, ignoretz=True)).timetuple())
        val = date.fromtimestamp(val)
        return val


class UnicodeFunctions(TextFunctions):
    def UnicodeofDate(self, DaysAgo):
        val = datetime.utcnow() - timedelta(days=DaysAgo)
        val = time.mktime(val.timetuple())
        return val

    def UnicodeNow(self):
        val = datetime.utcnow()
        val = time.mktime(val.timetuple())
        return val

    def TodayDateStampwPeriods(self):
        val = datetime.utcnow() - timedelta(hours=5)
        val = val.strftime('%m.%d.%Y')
        return val

    def TodayDateStamp(self):
        val = datetime.utcnow() - timedelta(hours=5)
        val = val.strftime('%m/%d/%Y')
        return val

    def YesterdayDateStamp(self):
        val = datetime.utcnow() - timedelta(hours=29)
        val = val.strftime('%m/%d/%Y')
        return val

    def IsoTodayDateStamp(self):
        val = datetime.utcnow() - timedelta(hours=5)
        val = val.strftime('%Y-%m-%d')
        return val

    def NowTimeStamp(self):
        val = datetime.utcnow() - timedelta(hours=5)
        val = val.strftime('%m/%d/%Y %l:%M%p')
        return val

    def NowDateTimeStamp(self):
        val = datetime.utcnow() - timedelta(hours=5)
        val = val.strftime('%m/%d/%Y')
        return val

    def DatetoText(self, val):
        val = dateutil.parser.parse(val, ignoretz=True)
        return val.strftime('%m/%d/%Y')

    def UnicodetoDateObject(self, val):
        val = date.fromtimestamp(val)
        return val

    def UnicodetoDate(self, val):
        val = datetime.fromtimestamp(val).strftime('%m/%d/%Y')
        return val

    def UnicodetoStandardDate(self, val):
        val = datetime.fromtimestamp(val).strftime('%Y-%m-%d')
        return val

    def DatetoUnicode(self, val):
        return time.mktime((dateutil.parser.parse(val, ignoretz=True)).timetuple())

    def TextToDate(self, val):
        return dateutil.parser.parse(val, ignoretz=True).date()

    def BeginningofDay(self, DaysAgo):
        Date = datetime.utcnow() - timedelta(days=DaysAgo)
        BeginningofDay = datetime(Date.year, Date.month, Date.day)
        print BeginningofDay


class TimeFunctions(UnicodeFunctions):
    def Day_DatefromText(self, val):
        return val

        return time.mktime(dateutil.parser.parse(val, ignoretz=True)).timetuple()

    # try:
    # Day = (datetime.fromtimestamp(int(str(time.mktime((dateutil.parser.parse(val,ignoretz=True)).timetuple())))).strftime('%m/%d/%Y')) #%H:%M:%S
    # except ValueError:
    # 	#Day = 0
    # 	Day = (datetime.fromtimestamp(int(str(time.mktime((dateutil.parser.parse(val,ignoretz=True)).timetuple())))).strftime('%m/%d/%Y')) #%H:%M:%S
    # return Day

    def Day_Date(self, Unicode):  #Returns the date for that Unicode Text
        try:
            try:
                Day = (datetime.fromtimestamp(int(str(Unicode))).strftime('%m/%d/%Y'))  #%H:%M:%S
            except:
                Day = (datetime.fromtimestamp(float(str(Unicode))).strftime(
                    '%m/%d/%Y'))  #%H:%M:%S #because unicode coming in was a float
        except ValueError:
            Day = 0
        return Day

    def Day_Date_plus_Four(self, Unicode):
        try:
            try:
                Unicode = Unicode + 14400
                Day = (datetime.fromtimestamp(int(str(Unicode))).strftime('%m/%d/%Y'))  #%H:%M:%S
            except:
                Day = (datetime.fromtimestamp(float(str(Unicode))).strftime(
                    '%m/%d/%Y'))  #%H:%M:%S #because unicode coming in was a float
        except ValueError:
            Day = 0
        return Day

    def Item_Date(self, Unicode):  #Returns the date in Excel format for that Unicode Text
        try:
            time = math.floor((float(Unicode) / 86400) + 25569 + (
            -5 / 24))  #unsure if I have to conver this to a floart first, since the output should be a float in excel
        except ValueError:
            time = 0
        return time

    def Quarter_Date(self, Unicode):  #Returns the date for that Unicode Text
        try:
            month = datetime.utcfromtimestamp(float(Unicode)).month
            Quarter = math.floor((month - 1) / 3) + 1
        except ValueError:
            Quarter = 0
        return Quarter

    def Month_Date(self, Unicode):  #Returns the date for that Unicode Text
        try:
            month = datetime.utcfromtimestamp(float(Unicode)).month
        except ValueError:
            month = 0
        return month

    def Week_Date(self, Unicode):  #Returns the date for that Unicode Text
        try:
            date = datetime.utcfromtimestamp(float(Unicode))
            week = Week.withdate(date)
        except ValueError:
            week = 0
        return week


def main():
    print TimeFunctions().days_from_today("2015-05-01")

    return

    print TimeFunctions().DatesList(days=10)
    return
    print TimeFunctions().TimeDifferenceList(5, BaseTime="08/04/2014 4:00PM")

    return
    print dateutil.parser.parse(str())
    return

    NowTimeStamp = datetime.utcnow()
    print NowTimeStamp
    return

    return
    print TimeFunctions().HoursList(days=10)

    return

    print datetime.utcnow()

    return
    print TimeFunctions().HoursList(days=10)

    return
    print TimeFunctions().DateTodayDateTime()

    return
    print DateRangeFunctions().DateDaysBefore("2014-07-30")

    return
    print TimeFunctions().DatesList(days=10)

    return
    # Create DateStringfromString

    print TimeFunctions().DateStringfromString("3-2-2014", Format='%Y-%m')

    return
    print DateConvertFromString().DateConvertFromStringIso("5/1/14-8/1/14")
    return
    print DateConvertFromString().DateConvertFromStringIso("Q4-13")
    return
    print DateConvertFromString().BeginningEndMonth("'Jan-14")

    print DateConvertFromString().DateConvertFromStringIso("'Jan-14")
    return
    lst = ['2014-04-28', '2014-05-04']
    print DateConvertFromString().DateFormatConvert(lst)
    return
    print DateConvertFromString().BeginningEndMonthDateTime("Jan-14")
    print DateConvertFromString().BeginningEndQuarter("Q2-14")

    return
    TimeRange = " 4/28 - 5/4"
    #print dateutil.parser.parse("2/16/2014")
    print DateConvertFromString().DateConvertFromString(TimeRange)

    return 0
    val = 1401921755
    print TimeFunctions().Week_Date(val)

    return 0
    #val = 'This_Month'
    vala = ['2014-06-01', '2014-06-30']
    #valb = '2014-06-01'
    print DateRangeFunctions().DateCheckBetweenDates(vala, valb)
    #['2014-06-01', '2014-06-30'] and '07/25/2014'
    #Is it within the range or not


    return 0
    """
        DateConvertFromString Test
    """
    # val = DateConvertFromString().DateConvertFromString('Today')
    # print val
    # return val



    """Convert Text to Date Object to be able to say greater or elss than """
    v = UnicodeFunctions().UnicodeNow()
    print v
    valc = UnicodeFunctions().UnicodetoDateObject(v)
    print valc

    # val = TextFunctions().StringtoDateObject("May 25,2100")
    # valb = TextFunctions().StringtoDateObject("May 25,2100")
    # if val <= valc <= valb:
    # 	print True
    # print val

    #print str(UnicodeFunctions().UnicodeNow())
    """"""
    #print DateStringConvert().BeginningEndMonth("'Aug-14")
    #print DateRangeFunctions().DaysfromText(val='2014-06-01')
    """MOnth Number Check"""
    #print date.today().strftime('%B-%y')
    """Week Number Check"""
    #val = "2014W20"
    #print DateStringConvert().BeginningEndWeek(val)
    #w = Week(2011, 20)
    #print "Week %s starts on %s" % (w, w.monday())

    #print "Current week number is", Week.thisweek().year
    #print DateStringConvert().TimePeriodConvertDates("This_Month")

    # """Date to Unicode Test"""
    # vala = u'2014-05-06'
    # valb = u'2012-07-20'
    # valc = u'2014-05-05T19:35:43.282Z'
    # vala = UnicodeFunctions().TextToDate(vala)
    # valc = UnicodeFunctions().TextToDate(valc)

    # if vala > valc:
    # 	print str(vala) + " is greater than " + str(valc)



    #val = DateRangeFunctions().DaysBetweenDates(vala,valb)
    #print val


    #print UnicodeFunctions().DatetoUnicode(val)


    """True if before today function"""
    #val = u'2013-05-20'
    #print DateFunctions().TrueifBeforeToday(val)

    """"""
    #val = '5/9/2014'
    # val.replace(val[-2:],"20"+val[-2:])

    # val = (dateutil.parser.parse(val,ignoretz=True))
    # vala = date(val.year,val.month,1)

    # print val
    #print DateStringConvert().BeginningEndMonth(val)

    """Convert Today or This_Week to Day Before Beginning"""
    #val = DateStringConvert().BeginningEndMonth("'Dec-14 ")
    #print val

    """Convert 3/7 - 3/13 to two date list"""
    #val = "Q1-14"
    #lst = DateStringConvert().BetweenTwoDatesIso(val)
    #print lst



    #print strptime('Feb','%b').tm_mon
    #val = "Q1-14"
    #print DateStringConvert().BeginningEndQuarter(val)
    #val = "Dec-13"
    #print DateStringConvert().BeginningEndMonth(val)


    #val = "2013-06-27 18:03:17"
    #print TextFunctions().DateStringfromString(val)
    #print DateRangeFunctions().DaysAddtoText(4)


    #val = 1398623977000/1000
    #print UnicodeFunctions().UnicodetoStandardDate(val)


    #print DateFunctions().TextDateofLastMonth()

    #val = datetime(2014, 2, 12, 0, 46, 38)
    #print TextFunctions().DateStringfromString(val)

    #print UnicodeFunctions().UnicodeNow()
    #print UnicodeFunctions().NowTimeStamp()
    #print DateRangeFunctions().DaysfromText()

    #print UnicodeFunctions().TodayDateStamp()
    """Days since beginning of year"""
    #print DateFunctions().DaysSinceBeginningofYear()


    """Days since beginning of year"""


# pub = datetime.utcnow()- timedelta(days=1)
#end_date = datetime(pub.year, pub.month, pub.day)
#print end_date
#print datetime(today.year, today.month, today.day, tzinfo=tz.tzutc())
#today = datetime.utcnow().date()
#print datetime(today.year, today.month, today.day, tzinfo=tz.tzutc()).astimezone(est)

#print datetime.utcnow()
#print UnicodeFunctions().UnicodeofDate(4)


if __name__ == "__main__": main()



#Timer.py

import time

class Timer(object):
    def __init__(self, verbose=False):
        self.verbose = verbose

    def __enter__(self):
        self.start = time.time()
        return self

    def __exit__(self, *args):
        self.end = time.time()
        self.secs = self.end - self.start
        self.msecs = self.secs * 1000  # millisecs
        if self.verbose:
            print 'elapsed time: %f ms' % self.msecs
#web_app_functions.py

from Shippy.API.firebase_api import FirebaseFunctions
from Shippy.Functions.time_functions import TimeFunctions
import traceback
import datetime
import time
import sys
from cStringIO import StringIO

# Takes in and returns arguments Time or Now passed in shell. Used to schedule utilize one script for running all the time and check
# for run_now and running every minute to check whether the scheduled equals current time
def get_shell_arg():
	arg = sys.argv
	if len(arg) == 1:
		print '\n',"No shell argument provided"
	elif arg[1] == 'Time':
		arg = 'Time'
	elif arg[1] == 'Now':
		arg = 'Now'
	else:
		print '\n','Invalid shell argument'
	return arg


# Runs a function and stores output in firebase. For the func argument it is recomended to pass main
def web_app_run(func):
	snapshot = 'AppsLogs/' + func.__name__ + '/Std'
	snapshoterr = 'AppsLogs/' + func.__name__ + '/Err'
	try:
			old_stdout = sys.stdout
			sys.stdout = mystdout = StringIO()

			func()

			sys.stdout = old_stdout
			print mystdout.getvalue()
			FirebaseFunctions().firebase_update(
				{'-' + str(int(time.time())):
					{'Log':mystdout.getvalue(),
					'Time':datetime.datetime.now()}
					},
				database='shippy',
				snapshot=snapshot)
	except: 
		err = traceback.format_exc()
		print err
		FirebaseFunctions().firebase_update(
			{'-' + str(int(time.time())):
				{'Log':err  + TimeFunctions().done_now('Error at'),
				'Time':datetime.datetime.now()}
				},
			database='shippy',
			snapshot=snapshot)
		
		FirebaseFunctions().firebase_put(
			{'-' + str(int(time.time())):
				{'Log':err ,
				'Time':datetime.datetime.now()}
				},
			database='shippy',
			snapshot=snapshoterr)

		print '\n'