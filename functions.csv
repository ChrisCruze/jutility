file_name,description,code,name,folder_name
array_functions.js,https://stackoverflow.com/questions/38304401/javascript-check-if-dictionary - determine object type,"//https://stackoverflow.com/questions/38304401/javascript-check-if-dictionary - determine object type<br>function determine_object_type(a){<br>  if (typeof a === ""object""){<br>    return 'object'<br>  }<br>  else if (Array.isArray(a)){<br>    return 'array'<br>  }<br>  else {<br>    return 'other'<br>  }<br>  <br><br><br>}",determine_object_type,function
array_functions.js,array from number. iterate,//array from number. iterate<br>function array_generate_from_number(number_of_rows){<br>  for(var i=0; i < number_of_rows ; i++){<br>    //console.log(i),array_generate_from_number,function
array_functions.js,,"}<br>function format_standardize_from_key_name(D,key_name){<br>  if (Array.isArray(key_name)){<br>    l = []<br>    key_name.forEach(function(i){<br>      l.push(D[i])<br>    })<br>    r = l.join(' ')<br>    //console.log(r)<br>    return r.toLowerCase()<br>  }<br>  else {<br>    return D[key_name].toLowerCase()<br>  }<br>}",format_standardize_from_key_name,function
array_functions.js,array filter tasks for text,"//array filter tasks for text<br>function array_filter_from_text(array,text,key_name){<br>  key_name = key_name || ""content""<br>  array = array.filter(function(D){return format_standardize_from_key_name(D,key_name).indexOf(text.toLowerCase()) !== -1 })<br>  return array <br>}<br><br><br>",array_filter_from_text,function
array_functions.js,converts list of lists to array,"//converts list of lists to array<br>function list_of_lists_to_array(lol,key_names){<br>  key_names = lol[0]||key_names<br>  array = []<br>  lol.forEach(function(row,row_num){<br>    var new_dict =  {}<br>    row.forEach(function(col,col_num){<br>      cell_val = lol[row_num][col_num]<br>      key_name = key_names[col_num]<br><br>      new_dict[key_name] = cell_val<br>    })<br>    array.push(new_dict)<br>  })<br>  return array <br>}<br>",list_of_lists_to_array,function
array_functions.js,filter tasks for text and return sum from it,"//filter tasks for text and return sum from it<br>function array_filter_from_text_sum(array,text,key_name,sum_field){<br>  sum_field = sum_field||'duration'<br>  array = array_filter_from_text(array,text,key_name)<br>  var sum_total = sum_float_convert_from_array_underscore(array,sum_field)<br>  return sum_total",array_filter_from_text_sum,function
array_functions.js,make triple check for the key ,"//make triple check for the key <br>function dictionary_check_keys_triple_return(item,check_key,second_key,third_key,alternative_val){<br>  alternative_val = alternative_val||""null""<br>  check_key = check_key||'fullName'<br>  not_undefined = item[check_key] != undefined<br>  if (not_undefined){<br>      not_second_undefined = item[check_key][second_key] != undefined<br>      if (not_second_undefined){<br>        r = item[check_key][second_key][third_key]||alternative_val<br>      }<br>      else {<br>        r = alternative_val<br>      }<br>  }<br>  else {<br>    r = alternative_val<br>  }<br>  return r <br>}",dictionary_check_keys_triple_return,function
array_functions.js,check for the key on second layer or return null,"//check for the key on second layer or return null<br>function dictionary_check_keys_double_return(item,check_key,second_key,alternative_val){<br>  alternative_val = alternative_val||""null""<br>  check_key = check_key||'fullName'<br>  not_undefined = item[check_key] != undefined<br>  if (not_undefined){<br>    r = item[check_key][second_key]||alternative_val<br><br>  }<br>  else {<br>    r = alternative_val<br>  }<br>  return r <br>}",dictionary_check_keys_double_return,function
array_functions.js,checks if item has a key and gives it null if not,"//checks if item has a key and gives it null if not<br>function dictionary_check_keys(item,check_keys,alternative_val){<br>  alternative_val = alternative_val||""null""<br>  check_keys = check_keys||['fullName','active','connectedAt','id']<br>  check_keys.forEach(function(i){<br>    item[i] = item[i]||'null'<br>  })<br>}",dictionary_check_keys,function
array_functions.js,checks if item has a key and gives it null if not (for the whole array),"//checks if item has a key and gives it null if not (for the whole array)<br>function array_check_keys(array,check_keys){<br>  check_keys = check_keys||['fullName','active','connectedAt','id']<br>  array.forEach(function(item){<br>    dictionary_check_keys(item,check_keys)<br>  })<br>}",array_check_keys,function
array_functions.js, turn an array  e.g. list of dictionaries into a list of lists because certain functions such as datatables takes an input of a list of lists,"// turn an array  e.g. list of dictionaries into a list of lists because certain functions such as datatables takes an input of a list of lists<br>function list_of_lists_from_array(array,keys){<br>  list_of_lists = [] //this is an empty list that will be filled with sublists<br>  array.forEach(function(dictionary_object,index){ //we're going to loop through every dictionary in the array<br>    sublist = []<br>    keys.forEach(function(key_name,key_index){ //we're also going to loop through every key<br>      sublist.push(dictionary_object[key_name]) //then we're going to get the key's definition to create the subli<br>    })<br>    list_of_lists.push(sublist) //push the sublist to the list_of_lists<br>   })<br>  return list_of_lists<br>}",list_of_lists_from_array,function
array_functions.js,convert array to dictionary,"//convert array to dictionary<br>function array_to_dictionary(array,key_name){<br>  key_name = key_name || 'id'<br>  new_dict = {}<br>  array.forEach(function(item,index){<br>    new_dict[String(item[key_name])] = item<br>  })<br>  return new_dict<br>}",array_to_dictionary,function
array_functions.js,"check if key has a value and if not, add it a value","//check if key has a value and if not, add it a value<br>function key_check_func_dictionary(check_keys,item){<br>    check_keys = check_keys||['fullName','active','connectedAt','id']<br>  check_keys.forEach(function(i){<br>    item[i] = item[i]||'null'<br>  })<br>}",key_check_func_dictionary,function
array_functions.js,highlights syntax,"//highlights syntax<br>function syntaxHighlight(json){<br>    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');<br>    return json.replace(/(""(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\""])*""(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {<br>        var cls = 'number';<br>        if (/^""/.test(match)) {<br>            if (/:$/.test(match)) {<br>                cls = 'key';<br>            } else {<br>                cls = 'string';<br>            }<br>        } else if (/true|false/.test(match)) {<br>            cls = 'boolean';<br>        } else if (/null/.test(match)) {<br>            cls = 'null';<br>        }<br>        return '<span class=""' + cls + '"">' + match + '</span>';<br>    });<br>}",syntaxHighlight,function
array_functions.js, prettifies the json or the list,"// prettifies the json or the list<br>function json_prettify(json_input){<br>var str = JSON.stringify(json_input, undefined, 4);<br>    document.body.appendChild(document.createElement('pre')).innerHTML = syntaxHighlight(str);<br><br>}<br>",json_prettify,function
array_functions.js,combines dictionaries,"//combines dictionaries<br>function combine_dicts(a,b){//https://stackoverflow.com/questions/43449788/how-do-i-merge-two-dictionaries-in-javascript<br>  var a = a||{ fruit: ""apple"" },<br>    b = b||{ vegetable: ""carrot"" },<br>    food = Object.assign({}, a, b);<br>    return food<br>}",combine_dicts,function
array_functions.js,check if the dictionary has two layers of key down and then pull and turn it to null to avoid error,"//check if the dictionary has two layers of key down and then pull and turn it to null to avoid error<br>function key_check_make_double(item,primary_key,secondary_key){<br>  item[primary_key] = item[primary_key]||{}<br>  item[primary_key][secondary_key] = item[primary_key][secondary_key] ||'null'<br>}<br>",key_check_make_double,function
date_functions.js,parses a time such as 1:00PM,//parses a time such as 1:00PM<br>function parseTime( t ) {<br>   var d = new Date();<br>   var time = t.match( /(\d+)(?::(\d\d))?\s*(p?)/ );<br>   d.setHours( parseInt( time[1]) + (time[3] ? 12 : 0) );<br>   d.setMinutes( parseInt( time[2]) || 0 );<br>   return d;<br>},parseTime,function
date_functions.js,gives days in the month,"//gives days in the month<br>function daysInMonth (month, year) {<br>    return new Date(year, month, 0).getDate();<br>}",daysInMonth ,function
date_functions.js,number of days this month,"//number of days this month<br>function days_this_month(){<br>  r = new Date()<br>  return daysInMonth(r.getMonth()+1,r.getYear())<br>}",days_this_month,function
date_functions.js,returns true if the date is todays date,"//returns true if the date is todays date<br>function date_is_today(input_date){<br>    // Create date from input value<br>    var inputDate = new Date(input_date);<br><br>    // Get today's date<br>    var todaysDate = new Date();<br><br>    // call setHours to take the time out of the comparison<br>    return inputDate.setHours(0,0,0,0) == todaysDate.setHours(0,0,0,0)<br>}<br><br><br><br>",date_is_today,function
file_functions.js,read directly from a text file,"//read directly from a text file<br>function read_text_file_data(file){<br>  var rawFile = new XMLHttpRequest();<br>  rawFile.open(""GET"", file, false);<br>  rawFile.onreadystatechange = function ()<br>  {<br>    if(rawFile.readyState === 4)<br>    {<br>      if(rawFile.status === 200 || rawFile.status == 0)<br>      {<br>        raw_text_file_data = rawFile.responseText;<br>      }<br>    }<br>  }<br>  rawFile.send(null);<br>};",read_text_file_data,function
file_functions.js,read directly from a text file,//read directly from a text file<br>function read_text_file_data_pull(file){<br>  read_text_file_data(file)<br>  return raw_text_file_data,read_text_file_data_pull,function
file_functions.js,convert a downloadable data url into a download,"//convert a downloadable data url into a download<br>function downloadURI(uri, name) {<br>  var link = document.createElement(""a"");<br>  link.download = name;<br>  link.href = uri;<br>  document.body.appendChild(link);<br>  link.click();<br>  document.body.removeChild(link);<br>  delete link;<br>}",downloadURI,function
file_functions.js,use paparse to read from file,"//use paparse to read from file<br>function papa_parse_array(file,delimter){<br>    delimter = delimter || ""|""<br>    file = file ||""""<br>    read_text_file_data(file)<br>    var results = Papa.parse(raw_text_file_data);<br>    text_lines = results.data<br>    key_names = text_lines[0] <br>    key_names = headers_key_names_list_format_string(key_names)<br>    array = []<br>    text_lines.forEach(function(entry,i){<br>        var singleObj = {}<br>         key_names.forEach(function(kn,num_index){<br>            singleObj[kn] = entry[num_index]<br>         })<br>        array.push(singleObj)<br>    })<br>    return array ",papa_parse_array,function
html_functions.js,add floating chat box,"//add floating chat box<br>function add_floating_chat_box_base(chat_id,message_content_id,message_box_id,favicon,small_chat_date,chat_title,small_chat_box_style,small_chat_style){<br>    favicon = favicon || ""fa fa-comments""<br>    chat_id = chat_id || ""small-chat""<br>    small_chat_style = small_chat_style||""""<br>    badge_icon =  $(""<a>"", {""class"":""open-small-chat""}).append($(""<i>"", {""class"":favicon}))<br>    badge_counter = $(""<span>"", {""class"":""badge badge-warning pull-right""}).text('5')<br>    chat_icon = $(""<div>"", {""id"":chat_id,class:'small-chat',""style"":small_chat_style}).append(badge_counter).append(badge_icon)<br><br>    parent_heading = $(""<div>"", {""class"":""heading""})//,""draggable"":""true""<br>    chat_title = chat_title||""Small Chat""<br>    small_chat_box_style = small_chat_box_style || """"<br>    if(!('draggable' in document.createElement('span'))) {<br>      //handle old browsers                <br>    } else {<br>      parent_heading.attr('draggable', 'true');<br>    }<br><br><br>    small_chat_date = small_chat_date || ""02.19.2015""<br>    message_content_id = message_content_id || ""message_content""<br>    message_box_id = message_box_id || ""message_box_text""<br>    heading = parent_heading.append($(""<small>"", {""class"":""chat-date pull-right""}).text(small_chat_date)).append($(""<span>"",{}).text(chat_title))<br>    message_content = $(""<div>"", {""class"":""content message_content"",""id"":message_content_id})<br>    form_chat =  $(""<div>"", {""class"":""form-chat""}).append($(""<div>"", {""class"":""input-group input-group-sm""}).append($(""<input>"", {""type"":""text"",""class"":""form-control message_box"",""id"":message_box_id})).append($(""<span>"", {""class"":""input-group-btn""}).append($(""<button>"", {""class"":""btn btn-primary message_send"",""type"":""button""}).text(""Send""))))<br>    chat_session = $(""<div>"", {""class"":""small-chat-box fadeInRight animated"",""style"":small_chat_box_style}).append(heading).append(message_content).append(form_chat)<br><br><br>  // <div id=""small-chat""><br>  //   <span class=""badge badge-warning pull-right"">5</span><br>  //   <a class=""open-small-chat""><i class=""fa fa-comments""></i></a><br>  // </div><br>  // <div class=""small-chat-box fadeInRight animated""><br>  //   <div class=""heading"" draggable=""true""><br>  //     <small class=""chat-date pull-right"">02.19.2015</small> Small chat<br>  //   </div><br>  //   <div id=""message_content"" class=""content""><br>  //   </div><br>  //    <div class=""form-chat""><br>  //               <div class=""input-group input-group-sm""><br>  //                   <input id=""message_box_text"" type=""text"" class=""form-control""><br>  //                   <span class=""input-group-btn""> <button<br>  //                       class=""btn btn-primary"" type=""button"">Send<br>  //               </button> </span></div><br>  //     </div><br>  // </div><br><br>    final_element = $(""<div>"", {'class':'chat'}).append(chat_icon,chat_session)<br>    return final_element<br>}<br>",add_floating_chat_box_base,function
html_functions.js,,"<br>function add_floating_chat_box(parent_div,chat_id,message_content_id,message_box_id,favicon,small_chat_date,chat_title,small_chat_box_style,small_chat_style){<br>    parent_div = parent_div|| ""#wrapper""<br>    chat_id = chat_id || ""smallchat""<br>    message_content_id = message_content_id || ""message_content""<br>    message_box_id = message_box_id || ""message_box_text""<br>    favicon = favicon || ""fa fa-comments""<br>    small_chat_date = small_chat_date || ""02.19.2015""<br>    chat_title = chat_title||""Small Chat""<br>    small_chat_style = small_chat_style||""""<br>    small_chat_box_style = small_chat_box_style || """"<br><br><br>    //add_floating_chat_box_base<br>    //""small-chat"",""message_content"",""message_box_text"",""fa fa-comments"",""02.19.2015"",""Small Chat""<br>    $(parent_div).append(add_floating_chat_box_base(chat_id,message_content_id,message_box_id,favicon,small_chat_date,chat_title,small_chat_box_style,small_chat_style))<br>    console.log(chat_id)<br><br>        //Open close small chat<br>    $('.open-small-chat').on('click', function () {<br>        $(this).children().toggleClass('fa-comments').toggleClass('fa-remove');<br>        $(this).closest('.chat').find("".small-chat-box"").toggleClass('active')<br>        //$('.small-chat-box').toggleClass('active');<br>    });<br><br>    // Initialize slimscroll for small chat<br>    $('.small-chat-box .content').slimScroll({<br>        height: '234px',<br>        railOpacity: 0.4,<br>        start: 'bottom'<br>    });<br><br><br>    // $(""#""+chat_id + ' .open-small-chat').on('click', function () {<br>    //     $(this).children().toggleClass('fa-comments').toggleClass('fa-remove');<br>    //     $(""#""+chat_id + ' .small-chat-box').toggleClass('active');<br>    // });<br><br>    // // Initialize slimscroll for small chat<br>    // $(""#""+chat_id + ' .small-chat-box .content').slimScroll({<br>    //     height: '234px',<br>    //     railOpacity: 0.4<br>    // });<br><br><br><br>    // $('#smallchat .open-small-chat').on('click', function () {<br>    //     $(this).children().toggleClass('fa-comments').toggleClass('fa-remove');<br>    //     $('#small-chat  .small-chat-box').toggleClass('active');<br>    // });<br><br>    // $('.small-chat-box .content').slimScroll({<br>    //     height: '234px',<br>    //     railOpacity: 0.4<br>    // });<br>}<br>",add_floating_chat_box,function
html_functions.js,created progress bar div,"//created progress bar div<br>function list_progress_bar_list_element_thick(title_text,id,percentage,parent_identifier,color,metric_text){<br>    percentage = percentage||""48""<br>    title_text = title_text||""title_text""<br>    id = id||""id""<br>    parent_identifier = parent_identifier||""#progress_bar_list""<br>    color = color||""danger""<br><br><br><br>    var outer_div = $(""<div>"", {""id"":id})<br><br>    var title_text_div = $(""<span>"", {}).text(title_text)<br>    var metric_text_div = $(""<small>"", {'class':'pull-right percentage_text'}).text(metric_text)<br><br><br><br>    var progress_bar_parent_div = $(""<div>"",{""class"":""progress progress-small""})<br>    var progress_bar_div = $(""<div>"",{""class"":""progress-bar progress-bar-""+color,""style"":""width:"" + String(percentage) + ""%""})<br><br><br>    metric_div = $(""<div>"", {}).append(title_text_div).append(metric_text_div)<br><br>    bar_div = progress_bar_parent_div.append(progress_bar_div)<br><br><br><br>    final_element = outer_div.append(metric_div).append(bar_div)<br><br>    <br>    $(parent_identifier).append(final_element)<br>    return final_element<br>}<br>",list_progress_bar_list_element_thick,function
html_functions.js,created progress bar div,"//created progress bar div<br>function list_progress_bar_list_element_thin(title_text,id,percentage,parent_identifier){<br>    percentage = percentage||""48""<br>    title_text = title_text||""title_text""<br>    id = id||""id""<br>    parent_identifier = parent_identifier||""#progress_bar_list""<br><br>    var outer_div = $(""<li>"", {""id"":id});<br>    var header_div = $(""<small>"", {}).text(title_text)<br><br><br>    var percent_div = $(""<div>"", {'class':'stat-percent'}).text(percentage + ""%"")<br>    var progress_bar_div = $(""<div>"",{""class"":""progress-bar"",""style"":""width:"" + String(percentage) + ""%""})<br>    var progress_div = $(""<div>"", {'class':'progress progress-mini'}).append(progress_bar_div)<br>    final_div = outer_div.append(header_div).append(percent_div).append(progress_div)<br>    <br>    $(parent_identifier).append(final_div)<br>    return final_div<br>}<br>",list_progress_bar_list_element_thin,function
html_functions.js,add dropdown item to list of items. used in create_task_v2,"//add dropdown item to list of items. used in create_task_v2<br>function add_dropdown_item(title_text,id,item_class,parent_identifier){<br>    title_text = title_text||""hello_world 2""<br>    id = id||""id""<br>    item_class = item_class||""favicon_select""<br>    parent_identifier = parent_identifier||""#favicon_dropdown_menu""<br>    var outer_div = $(""<li>"", {});<br>    var link_elem = $(""<a>"", {""href"": ""#"",""target"":""_blank"",""id"":id,""class"":item_class}).text(title_text)<br>    var final_div = outer_div.append(link_elem)<br>    $(parent_identifier).append(final_div)<br>    return final_div<br>}<br><br>",add_dropdown_item,function
html_functions.js,array input to formulate dropdown list,"//array input to formulate dropdown list<br>function add_dropdown_item_from_array(projects_dictionary){<br>    title_text = title_text||""hello_world 2""<br>    id = id||""id""<br>    item_class = item_class||""favicon_select""<br>    parent_identifier = parent_identifier||""#favicon_dropdown_menu""<br><br>    projects_dictionary.forEach(function(D){<br>        add_dropdown_item(title_text,id,item_class,parent_identifier)<br>    })  <br><br>    $(item_class).on('click', function (e) {<br>        $(""#favicon_select_button"").html($(this))<br>    })<br>}<br>",add_dropdown_item_from_array,function
html_functions.js,add icon from favicon,"//add icon from favicon<br>function add_favicon_div_from_javascript(title_text,url,image_url){<br>    url = url||""https://cruz.site44.com/profile.html""<br>    title_text = title_text||""hello_world 2""<br>    icon_class = icon_class||""fa fa-trophy fa-5x""<br>    var outer_div = $(""<div>"", {""class"": ""col-md-3""});<br>    var inner_div = $(""<div>"", {""class"": ""contact-box center-version""});<br>    var link_elem = $(""<a>"", {""href"": url});<br>    //var image_elem = $(""<img>"", {""src"": image_url});<br>    var image_elem = $(""<i>"", {""class"": icon_class});<br><br>    var text_elem = $(""<h3>"", {""class"": ""m-b-xs""}).text(title_text)<br>    var final_div = link_elem.append(image_elem).append(text_elem)<br>    var final_div = inner_div.append(final_div)<br>    var final_div = outer_div.append(final_div)<br>    $(""#target"").append(final_div)<br>    return final_div",add_favicon_div_from_javascript,function
html_functions.js,creates an image div to append to a jquery object with append,"//creates an image div to append to a jquery object with append<br>function create_image_div(title_text,url,image_url){<br>    url = url||""https://cruz.site44.com/profile.html""<br>    image_url = image_url||""https://cruz.site44.com/img/a2.jpg""<br>    title_text = title_text||""hello_world 2""<br>    var outer_div = $(""<div>"", {""class"": ""col-md-2""});<br>    var inner_div = $(""<div>"", {""class"": ""contact-box center-version""});<br>    var link_elem = $(""<a>"", {""href"": url});<br>    var image_elem = $(""<img>"", {""src"": image_url});<br>    var text_elem = $(""<h3>"", {""class"": ""m-b-xs""}).text(title_text)<br>    var final_div = link_elem.append(image_elem).append(text_elem)<br>    var final_div = inner_div.append(final_div)<br>    var final_div = outer_div.append(final_div)<br>    return final_div",create_image_div,function
html_functions.js,,"<br>function add_percentage_label_html(id,percentage_to_goal){<br>  id = id||'#tasks_completed_number'<br>  percentage_to_goal = percentage_to_goal||.5<br>  label_object = $(id).find("".sub_metric_text"")<br>  .4 < percentage_to_goal && add_remove_labels(label_object,'red');<br>  .7 < percentage_to_goal && add_remove_labels(label_object,'amber');<br>  .9 < percentage_to_goal && add_remove_labels(label_object,'green');<br><br>}",add_percentage_label_html,function
html_functions.js, appends the image div from create_image_div,"// appends the image div from create_image_div<br>function append_image_div(div_id,title_text,url,image_url){<br>    $(div_id).append(create_image_div(title_text,url,image_url))<br>}",append_image_div,function
html_functions.js,,"<br>function add_remove_labels(jquery_object,color){<br>    label_name = {'green':'label-primary','amber':'label-warning','red':'label-danger'}[color]<br>    label_name = label_name || ""label-primary""<br>    jquery_object.removeClass('label-success')<br>    jquery_object.removeClass('label-danger')<br>    jquery_object.removeClass('label-warning')<br>    jquery_object.removeClass('label-default')<br>    jquery_object.addClass(label_name)<br><br>}<br>",add_remove_labels,function
html_functions.js,creates a metric div and adds it to the div,"//creates a metric div and adds it to the div<br>function metric_header_create_label(title_text,sub_title,metric_text,sub_metric_text,id,label_color){<br>    title_text = title_text||""TITLE""<br>    metric_text = metric_text||""metric_text""<br>    sub_metric_text = sub_metric_text||""sub_metric_text""<br>    sub_title = sub_title||""sub_title""<br>    id = id||""null""<br>    label_color = label_color ||""label-default""<br>    var outer_div_one = $(""<div>"", {""class"": ""col-md-2 ""+title_text,""id"":id});<br>    var outer_div_two = $(""<div>"", {""class"": ""ibox float-e-margins""});<br>    var inner_div_one = $(""<div>"", {""class"": ""ibox-title""});<br>    var elem_one = $(""<span>"", {""class"": ""label label-success pull-right""});<br>    var elem_two = $(""<h5>"").text(title_text)<br><br>    var inner_div_two = $(""<div>"", {""class"": ""ibox-content""});<br>    var elem_three = $(""<h1>"", {""class"": ""no-margins metric_text""}).text(metric_text)<br>    //var elem_four = $(""<div>"", {""class"": ""stat-percent font-bold text-success sub_metric_text""}).text(sub_metric_text)<br>    var elem_four = $(""<span>"", {""class"": ""label pull-right sub_metric_text "" + label_color}).text(sub_metric_text)<br><br>    var elem_five = $(""<small>"",{""class"":""sub_title""}).text(sub_title)<br><br><br>    inner_div_one = inner_div_one.append(elem_one).append(elem_two)<br>    inner_div_two = inner_div_two.append(elem_three).append(elem_four).append(elem_five)<br>    var inner_ibox_div = outer_div_two.append(inner_div_one).append(inner_div_two)<br>    var final_div = outer_div_one.append(inner_ibox_div)<br>    return final_div<br>}<br>",metric_header_create_label,function
html_functions.js,creates a metric div and adds it to the div,"//creates a metric div and adds it to the div<br>function metric_header_create(title_text,sub_title,metric_text,sub_metric_text,id){<br>    title_text = title_text||""TITLE""<br>    metric_text = metric_text||""metric_text""<br>    sub_metric_text = sub_metric_text||""sub_metric_text""<br>    sub_title = sub_title||""sub_title""<br>    id = id||""null""<br><br>    var outer_div_one = $(""<div>"", {""class"": ""col-md-2 ""+title_text,""id"":id});<br>    var outer_div_two = $(""<div>"", {""class"": ""ibox float-e-margins""});<br>    var inner_div_one = $(""<div>"", {""class"": ""ibox-title""});<br>    var elem_one = $(""<span>"", {""class"": ""label label-success pull-right""});<br>    var elem_two = $(""<h5>"").text(title_text)<br><br>    var inner_div_two = $(""<div>"", {""class"": ""ibox-content""});<br>    var elem_three = $(""<h1>"", {""class"": ""no-margins metric_text""}).text(metric_text)<br>    var elem_four = $(""<div>"", {""class"": ""stat-percent font-bold text-success sub_metric_text""}).text(sub_metric_text)<br>    var elem_five = $(""<small>"",{""class"":""sub_title""}).text(sub_title)<br><br><br>    inner_div_one = inner_div_one.append(elem_one).append(elem_two)<br>    inner_div_two = inner_div_two.append(elem_three).append(elem_four).append(elem_five)<br>    var inner_ibox_div = outer_div_two.append(inner_div_one).append(inner_div_two)<br>    var final_div = outer_div_one.append(inner_ibox_div)<br>    return final_div<br>}",metric_header_create,function
html_functions.js,creates a metric div and adds it to the div,"//creates a metric div and adds it to the div<br>function append_metric_header_div(div_id,title_text,sub_title,metric_text,sub_metric_text){<br>    $(div_id).append(metric_header_create(title_text,sub_title,metric_text,sub_metric_text))<br>}",append_metric_header_div,function
math_functions.js,round the number,//round the number<br>function round_number(i){<br>  i.toFixed(2)<br>}<br>,round_number,function
math_functions.js,get the median from list of numbers,"//get the median from list of numbers<br>function median_get(values) {<br>    values.sort( function(a,b) {return a - b;} );<br>    var half = Math.floor(values.length/2);<br>    if(values.length % 2)<br>        return values[half];<br>    else<br>        return (values[half-1] + values[half]) / 2.0;<br>}<br>",median_get,function
math_functions.js,create g unique identifier,,create_guid,function
math_functions.js,nction create_guid() {,function create_guid() {<br>  function s4() {<br>    return Math.floor((1 + Math.random()) * 0x10000)<br>      .toString(16)<br>      .substring(1);<br>  }<br>  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +<br>    s4() + '-' + s4() + s4() + s4();<br>},s4,function
string_functions.js,convert stirng to fromatted string ,"//convert stirng to fromatted string <br>function file_formatted_string(header){<br>	return header.replace("" "",""_"").replace("" "",""_"").replace("" "",""_"").replace("" "",""_"").toLowerCase().trim()",file_formatted_string,function
string_functions.js,,"<br>function string_within_string_check(target_string,parent_string){<br>	return file_formatted_string(parent_string).indexOf(file_formatted_string(target_string)) != -1<br>}",string_within_string_check,function
string_functions.js,convert stirng to fromatted string ,"//convert stirng to fromatted string <br>function headers_key_names_list_format_string(headers){<br>  l = []<br>      headers.forEach(function(header,i){<br>        new_header = header.replace("" "",""_"").replace("" "",""_"").replace("" "",""_"").replace("" "",""_"").toLowerCase().trim()<br>        l.push(new_header)<br>      })<br>  return l <br>}",headers_key_names_list_format_string,function
string_functions.js,convert string to binary,//convert string to binary<br>function text2Binary(string) {<br>    return string.split('').map(function (char) {<br>        return char.charCodeAt(0).toString(2);<br>    }).join(' ');,text2Binary,function
web_functions.js,open url in new tab,"//open url in new tab<br>function openInNewTab(url) {<br>  var win = window.open(url, '_blank');<br>  win.focus();<br>}<br>",openInNewTab,function
web_functions.js,get url parameter ,//get url parameter <br>function parameter_attain_from_url(param){<br>	var url = new URL(window.location.href );<br>	var result = url.searchParams.get(param)<br>	return result<br>},parameter_attain_from_url,function
web_functions.js,,<br>function ipLookUp () {,ipLookUp ,function
web_functions.js,.then(,"  .then(<br>      function success(response) {<br>          console.log('User\'s Location Data is ', response);<br>          console.log('User\'s Country', response.country);<br>",success,function
web_functions.js,,"<br>      function fail(data, status) {<br>          console.log('Request failed.  Returned status of',<br>                      status);<br>      }<br>  );<br>}",fail,function
calendar_functions.js,,"<br>function calendar_initiate_base(params){<br>	calendar_selector = params.calendar_selector||'#calendar'<br>	events = params.events<br>	calendar_object = $(calendar_selector).fullCalendar({<br>      header: {<br>        left: 'prev,next today',<br>        center: 'title',<br>        right: 'month,agendaWeek,agendaDay,listWeek'<br>      },<br>      defaultDate: moment().format('YYYY-MM-DD'),//'2018-06-12',<br>      navLinks: true, // can click day/week names to navigate views<br>      editable: true,<br>      eventLimit: true, // allow ""more"" link when too many events<br>      events: events<br>    });<br>}",calendar_initiate_base,library
calendar_functions.js,,"<br>function calendar_initiate(params){<br>	calendar_initiate_base(params)<br>	//setTimeout(calendar_initiate_base,2000,params)<br><br>}",calendar_initiate,library
chartjs_functions.js,initiates a simple bar chart using chartjs,"//initiates a simple bar chart using chartjs<br>function bar_chart_initiate_render_chartjs(chart_id,labels,numbers_list,colors){<br>  labels = labels||['No Data']<br>  numbers_list = numbers_list||[0]<br>  colors = colors||[""#a3e1d4""]<br><br>  simple_chart_data = {labels:labels, datasets: [{data: numbers_list, backgroundColor: colors }] };<br>  <br><br><br><br>  simple_options = {    events: false,<br>    tooltips: {<br>        enabled: false<br>    },<br>    hover: {<br>        animationDuration: 0<br>    },<br>    animation: {<br>        duration: 1,<br>        onComplete: function () {<br>            var chartInstance = this.chart,<br>                ctx = chartInstance.ctx;<br>            ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);<br>            ctx.textAlign = 'center';<br>            ctx.textBaseline = 'bottom';<br><br>            this.data.datasets.forEach(function (dataset, i) {<br>                var meta = chartInstance.controller.getDatasetMeta(i);<br>                meta.data.forEach(function (bar, index) {<br>                    var data = dataset.data[index];                            <br>                    ctx.fillText(data, bar._model.x, bar._model.y - 5);<br>                });<br>            });<br>        }<br>    },legend: {display: false},        scales: {<br>          yAxes: [{<br>            stacked: true,<br>            ticks: {<br>              beginAtZero: true<br>            }<br>          }],<br>          xAxes: [{<br>            stacked: true,<br>            ticks: {<br>              beginAtZero: true<br>            }<br>          }]<br><br>        }, responsive: true, tooltips: {enabled: true}};<br><br><br><br>  var ctx = document.getElementById(chart_id).getContext(""2d"");<br>  simple_chart_object = new Chart(ctx, {type: 'bar', data: simple_chart_data, options:simple_options});<br>  return simple_chart_object<br>}<br>",bar_chart_initiate_render_chartjs,library
chartjs_functions.js,initiates a simple bar chart using chartjs,"//initiates a simple bar chart using chartjs<br>function horizontal_bar_chart_initiate_render_chartjs(chart_id,labels,numbers_list,colors){<br>  labels = labels||['No Data']<br>  numbers_list = numbers_list||[0]<br>  colors = colors||[""#a3e1d4""]<br><br>  simple_chart_data = {labels:labels, datasets: [{data: numbers_list, backgroundColor: colors }] };<br>  simple_options = {legend: {display: false},        scales: {<br>          yAxes: [{<br>            stacked: true,<br>            ticks: {<br>              beginAtZero: true<br>            }<br>          }],<br>          xAxes: [{<br>            stacked: true,<br>            ticks: {<br>              beginAtZero: true<br>            }<br>          }]<br><br>        }, responsive: true, tooltips: {enabled: true}};<br><br>  var ctx = document.getElementById(chart_id).getContext(""2d"");<br>  simple_chart_object = new Chart(ctx, {type: 'horizontalBar', data: simple_chart_data, options:simple_options});<br>  return simple_chart_object<br>}<br>",horizontal_bar_chart_initiate_render_chartjs,library
chartjs_functions.js,updates bar_chart for data ,"//updates bar_chart for data <br>function bar_chart_update_chartjs(chart_object,new_labels,new_data_points,new_colors){<br>    chart_object.data.labels = new_labels // ['label a','label b']<br>    chart_object.data.datasets[0].data = new_data_points//[1,2]<br>    chart_object.data.datasets[0].backgroundColor = new_colors//[""#a3e1d4"",""#dedede""]<br>    chart_object.update()<br>}",bar_chart_update_chartjs,library
chartjs_functions.js,update based on days,"//update based on days<br>function bar_chart_update_category_calculate_function(chart_object,array,date_field,metric_func,date_strf,color_func){<br>  //date_func = date_func || function(D){return D.date_field}<br>  metric_func = metric_func || function(l){return l.length}<br>  date_strf = date_strf ||""MM/DD""<br><br>  grouped_array_dictionary = _.groupBy(array,date_field)<br>  color_func = color_func || function(key_name,index,grouped_array){return ""#a3e1d4""}<br>  labels = []<br>  vals = []<br>  colors = []<br>  dates = Object.keys(grouped_array_dictionary)<br><br>  //dates = _.sortBy(dates, function(num){ return moment(num,date_strf).unix(); });<br>  dates.forEach(function(key_name,i){<br>    val = metric_func(grouped_array_dictionary[key_name])<br>    color = color_func(key_name,i,grouped_array_dictionary)<br>    labels.push(key_name)<br>    vals.push(val)<br>    colors.push(color)<br>  })<br>  bar_chart_update_chartjs(chart_object,labels,vals,colors)<br><br><br>}",bar_chart_update_category_calculate_function,library
chartjs_functions.js,update based on days,"//update based on days<br>function bar_chart_update_time_scale_calculate_function(chart_object,array,date_field,metric_func,date_strf,color_func){<br>  //date_func = date_func || function(D){return D.date_field}<br>  metric_func = metric_func || function(l){ <br>    if (l == undefined){<br>      return 0<br>    }<br>    else {<br>      return l.length<br>    }<br>    }<br>  date_strf = date_strf ||""MM/DD""<br><br><br>  grouped_array_dictionary = _.groupBy(array,function(D){return moment(D[date_field]).format(date_strf)})<br>  color_func = color_func || function(key_name,index,grouped_array){return ""#a3e1d4""}<br>  console.log(grouped_array_dictionary)<br>  labels = []<br>  vals = []<br>  colors = []<br>  dates = Object.keys(grouped_array_dictionary)<br>  console.log(dates)<br>  min_date =_.min(dates, function(num){return moment(num,date_strf).unix()})<br>  console.log(min_date)<br>  dates = dates_between_dates_moment(moment(min_date,date_strf),moment())<br>  console.log(dates)<br>  //dates = _.sortBy(dates, function(num){ return moment(num,date_strf).unix(); });<br>  dates.forEach(function(key_name,i){<br>    key_name = key_name.format(date_strf)<br>    //console.log(key_name)<br>    val = metric_func(grouped_array_dictionary[key_name])<br>    color = color_func(key_name,i,grouped_array_dictionary)<br>    labels.push(key_name)<br>    vals.push(val)<br>    colors.push(color)<br>  })<br>  bar_chart_update_chartjs(chart_object,labels,vals,colors)<br><br><br>}<br><br><br>",bar_chart_update_time_scale_calculate_function,library
crossfilter_functions.js,,"<br>        function print_filter(filter){<br>            var f=eval(filter);<br>            if (typeof(f.length) != ""undefined"") {}else{}<br>            if (typeof(f.top) != ""undefined"") {f=f.top(Infinity);}else{}<br>            if (typeof(f.dimension) != ""undefined"") {f=f.dimension(function(d) { return """";}).top(Infinity);}else{}<br>            console.log(filter+""(""+f.length+"") = ""+JSON.stringify(f).replace(""["",""[\n\t"").replace(/}\,/g,""},\n\t"").replace(""]"",""\n]""));<br>        };<br><br>",print_filter,library
crossfilter_functions.js,,"<br>        function getMonthName(v) {<br>        var n = [""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July"", ""August"", ""September"", ""October"", ""November"", ""December""];<br>        return n[v]<br>        };<br>",getMonthName,library
crossfilter_functions.js,,"<br>        function num_format(){<br>         var numFormat = d3.format("".3s"")<br><br><br>        }<br>",num_format,library
crossfilter_functions.js,,"<br>        function generateYearMonth(lst){<br>            // Author: Koba<br>            // Generates an array of full year concatenated woth a month number. <br>            // Ex.g., generateYearMonth(['20140','20142') will give ['20140','20141','20142']<br>            var nlst = []<br>            nlst.push(lst[0])<br>            var counter = 0<br>            var year = parseInt(nlst[counter].substring(0,4))<br>            var month = parseInt(nlst[counter].substring(4,6))<br>            <br>            while (nlst[nlst.length-1] != lst[lst.length-1]){    <br>                month += 1<br>                <br>                if(month % 12 === 0){<br>                    year += 1<br>                    month = 0<br>                }<br>                <br>                nlst.push(String(year) + String(month))<br>                counter += 1<br>            }<br>            return nlst",generateYearMonth,library
crossfilter_functions.js,,"<br>        function filtered_group(group, bins) {<br>            return {<br>            all:function () {<br>            return group.all().filter(function(d) {<br>            return bins.indexOf(d.key) != -1;<br>            })<br>            }<br>            }<br>        };<br>",filtered_group,library
crossfilter_functions.js,,"<br>        function crossfilter_array_format(params){<br>        	lst = params.data<br>        var Strings = params.strings ||['Name','Type','StageName','Red_Account_Notes__c','OTF__c','Status_Notes__c','Account.Name','LeadSource','Industry__c','Success_Manager__c','Market_Developer__c','Product_Names__c'];<br>        var Dates = params.dates||['CloseDate','Contract_Start_Date__c','Contract_End_Date__c'];<br>        var Integers = params.numbers||['Amount','MRR__c','Probability','Account.Days_Since_Original_Close_Date__c'];<br><br>        lst.forEach(function (d) {<br><br>        Strings.forEach(function(key){d[key] = String(d[key]) || ""None"";});<br>        Dates.forEach(function(key){d.key = d.key || ""9/30/10"";});<br>        Dates.forEach(function(key){d[key] = new Date(d[key] + ' EST');});<br>        Dates.forEach(function(key){d[key + ""Formatted""] = d3.time.format(""%m/%d/%y"")(d[key])});<br>        Dates.forEach(function(key){d[key + ""YearString""] = d3.time.format(""%y"")(d[key])});<br>        Dates.forEach(function(key){d[key + ""DayNumber""] = d3.time.format(""%d"")(d[key])});<br>        Dates.forEach(function(key){d[key + ""Week""] = d[key].getWeek(1)});<br>        Dates.forEach(function(key){d[key + ""MonthName""] = getMonthName(d[key].getMonth())});<br>        Dates.forEach(function(key){d[key + ""YearMonth""] = String(d[key].getFullYear()) + String(d[key].getMonth())});<br>        Dates.forEach(function(key){d[key + ""Quarter""] = String(d[key].getFullYear()) + String(Math.floor((d[key].getMonth() + 3) / 3))});<br>        Dates.forEach(function(key){d[key + ""WeekDay""] = d[key].getDay()+"".""+[""Sun"",""Mon"",""Tue"",""Wed"",""Thu"",""Fri"",""Sat""][d[key].getDay()]});<br>        Dates.forEach(function(key){d[key + ""Year""] = d[key].getFullYear('EST')});<br>        Dates.forEach(function(key){d[key + ""MonthNumber""] = d[key].getMonth()}); <br>        Dates.forEach(function(key){d[key + ""Month""] = d3.time.month(d[key])}); <br>        Integers.forEach(function(key){d[key]=d[key]||""0"";});<br>        Integers.forEach(function(key){d[key] = parseInt(d[key], 10)});<br>        Integers.forEach(function(key){d[key + ""Formatted""] =   d3.format("",.0f"")(d[key])}); <br><br>        });<br><br>        return lst<br><br><br>        }<br>",crossfilter_array_format,library
crossfilter_functions.js,,"<br>function crossfilter_generate(params){<br>        	lst = crossfilter_array_format(params)<br>        	var ndx = params.ndx||crossfilter(lst);<br>            params.ndx = ndx<br>        var numFormat = d3.format("".3s"")",crossfilter_generate,library
crossfilter_functions.js,,"<br>        function row_bar_chart_cross_filter(params) {<br><br>            D = params.dimension<br>            N = params.metric<br>            S = params.chart_identifier <br>            T = params.calculation <br><br><br>            var D1 = ndx.dimension(function(d) {return d[D]})<br><br>            var RowBarChart1 = dc.rowChart(S)<br>            RowBarChart1<br>            .width(180).height(500)<br>            .margins({top: 20, left: 15, right: 10, bottom: 20})<br>            .dimension(D1)<br>            .valueAccessor(function (d) { // must use valueAccessor<br>                return d.value[T];",row_bar_chart_cross_filter,library
crossfilter_functions.js,              .group(D1.group().reduce(,"                .group(D1.group().reduce(<br>                function reduceAdd(p, d) {<br>                ++p.count;<br>                p.sum += d[N]<br>                if (d[N] in p.IDs) p.IDs[d[N]]++;<br>                else {<br>                p.IDs[d[N]] = 1;<br>                p.unique++;<br>                }<br>                p.avg = p.sum/p.count;",reduceAdd,library
crossfilter_functions.js,"              },","                },<br>                function reduceRemove(p, d) {<br>                --p.count;<br>                p.sum -= d[N];<br>                p.IDs[d[N]]--;<br>                if (p.IDs[d[N]] === 0) {<br>                delete p.IDs[d[N]];<br>                p.unique--;<br>                }<br>                p.avg = p.sum/p.count;",reduceRemove,library
crossfilter_functions.js,"              },","                },<br>                function reduceInitial() {<br>                return {<br>                count:0,<br>                sum:0,<br>                unique: 0,<br>                avg : 0,<br>                IDs: {}<br>                };}<br>                ))<br>            .elasticX(true)<br>            .label(function (d) {return d.key + ""  "" + numFormat(d.value[T]);})<br>            .ordering(function(d) { return -d.value[T] })<br>            .xAxis().tickFormat(function(v){return v}).ticks(3);<br><br>        }<br>",reduceInitial,library
crossfilter_functions.js,,"<br>        function pie_chart_crossfilter(params,D,N,S) {<br>        	ndx = params.ndx||ndx<br>        	D = params.dimension||D<br>        	N = params.metric||N<br>        	S = params.chart_selector ||S<br>            var D1 = ndx.dimension(function (d) {return d[D];})<br>            var Chart = dc.pieChart(S)<br>            var Sum = ndx.groupAll().reduceSum(function (d) {return d[N];})<br><br>            Chart<br>            .width(370).height(200).radius(90).innerRadius(40)<br>            .dimension(D1)<br>            .group(D1.group().reduceSum(function (d) {return d[N];}))<br>            .label(function (d) {return d.key + "" ("" + (d.value / Sum.value() * 100).toFixed(2) + ""%"" + "")"";})<br>            .legend(dc.legend().x(290).y(10).itemHeight(13).gap(4))<br>            .renderLabel(true);<br><br>        }<br><br><br><br>        if (params.charts){<br>            params.charts.forEach(function(chart_dict){<br>                if (chart_dict.type == 'pie'){<br>                    pie_chart_crossfilter({},chart_dict.dimension,chart_dict.metric,chart_dict.chart_identifier);<br>                }<br><br>                if (chart_dict.type == 'row'){<br>                    row_bar_chart_cross_filter(chart_dict);<br>                }<br><br><br><br>            })<br><br>        }<br><br><br>         	//pie_chart_crossfilter({},'Dress','Top Sizes','#chart2');<br><br>        	<br><br><br>            dc.renderAll();<br>            return params<br>        }<br>",pie_chart_crossfilter,library
crossfilter_functions.js,,"<br>        function crossfilter_filter(params){<br>        	ndx = params.ndx<br>        var D = params.dimension||""CloseDateYearString""<br>        var CloseDateYearFilter = ndx.dimension(function (d) {return d[D];})<br>        var types = params.types||['14','15']<br>        CloseDateYearFilter.filter(function(d) {return types.indexOf(d) > -1});<br><br><br>        }<br><br><br><br><br><br><br><br><br><br><br><br><br>",crossfilter_filter,library
datatable_functions.js,get table data from datatables table,//get table data from datatables table<br>function datatables_data_get(table){<br>  return table.data().toArray();,datatables_data_get,library
datatable_functions.js,,"<br>function vote_created_cell(td, cellData, rowData, row, col) {<br><br>  $(td).html( '<div class=""vote-actions""> <a href=""#"" class=""vote_up""> <i class=""fa fa-chevron-up""> </i> </a> <div>'+cellData+'</div> <a href=""#"" class=""vote_down""> <i class=""fa fa-chevron-down""> </i> </a> </div>') <br>  $('.vote_up').on('click', function (e) { <br>    console.log('up')<br>    console.log(rowData)<br>    console.log($(this))<br>  })<br>  $('.vote_down').on('click', function (e) { <br>    console.log('down')<br>    console.log(rowData)<br>    console.log($(this))<br>  })<br>} ",vote_created_cell,library
datatable_functions.js,add bar chart within the cell,"//add bar chart within the cell<br>function bar_create_datatable_cell(td, cellData, rowData, row, col) {<br><br>  title_text = cellData<br>  id = cellData<br>  percentage = rowData['percentage']||50<br>  color = 'danger'<br>  parent_identifier = null<br>  metric_text = percentage + ""%""<br>  $(td).html(list_progress_bar_list_element_thick(title_text,id,percentage,parent_identifier,color,metric_text));<br>}<br>",bar_create_datatable_cell,library
datatable_functions.js,This searches and filters https://datatables.net/examples/plug-ins/range_filtering.html || https://datatables.net/manual/plug-ins/search,"//This searches and filters https://datatables.net/examples/plug-ins/range_filtering.html || https://datatables.net/manual/plug-ins/search<br>function datatable_search_filter(){<br><br><br><br>$.fn.dataTable.ext.search.push(<br>    function( settings, searchData, index, rowData, counter ) {<br>        var min = parseInt( $('#min').val(), 10 );<br>        var max = parseInt( $('#max').val(), 10 );<br>        var age = parseFloat( searchData[3] ) || 0; // using the data from the 4th column<br>  <br>        if ( ( isNaN( min ) && isNaN( max ) ) ||<br>             ( isNaN( min ) && age <= max ) ||<br>             ( min <= age   && isNaN( max ) ) ||<br>             ( min <= age   && age <= max ) )<br>        {<br>            return true;<br>        }<br>        return false;<br>    }<br>);<br><br><br>$.fn.dataTable.ext.search.push(<br>    function( settings, data, dataIndex ) {<br>        var min = parseInt( $('#min').val(), 10 );<br>        var max = parseInt( $('#max').val(), 10 );<br>        var age = parseFloat( data[3] ) || 0; // use data for the age column<br> <br>        if ( ( isNaN( min ) && isNaN( max ) ) ||<br>             ( isNaN( min ) && age <= max ) ||<br>             ( min <= age   && isNaN( max ) ) ||<br>             ( min <= age   && age <= max ) )<br>        {<br>            return true;<br>        }<br>        return false;<br>    }<br>);<br>    var table = $('#example').DataTable();<br><br>        table.draw();<br><br><br>}<br><br><br>",datatable_search_filter,library
datatable_functions.js,add filterable column headers for datatables,"//add filterable column headers for datatables<br>function column_header_filterable_autocomplete_apply(table_object,number_of_columns){<br>  l = []<br>  for(var i=0; i < number_of_columns ; i++){<br>    l.push({column_number : i, filter_type: ""auto_complete"", text_data_delimiter: "",""})<br>  }<br>  yadcf.init(table_object, l)<br><br>}<br>",column_header_filterable_autocomplete_apply,library
datatable_functions.js,"add a filter to the column header of the datatable (https://cdn.rawgit.com/ChrisCruze/jutility/master/libs/jquery.dataTables.yadcf.js , https://cdn.rawgit.com/ChrisCruze/jutility/master/libs/jquery.dataTables.yadcf.css | https://github.com/vedmack/yadcf)","//add a filter to the column header of the datatable (https://cdn.rawgit.com/ChrisCruze/jutility/master/libs/jquery.dataTables.yadcf.js , https://cdn.rawgit.com/ChrisCruze/jutility/master/libs/jquery.dataTables.yadcf.css | https://github.com/vedmack/yadcf)<br>function header_filter_add_datatable(){<br><br>var myTable = $('#example').DataTable();<br>  <br>  yadcf.init(myTable, [<br>    {column_number : 0},<br>    {column_number : 1, filter_type: ""range_number_slider"", filter_container_id: ""external_filter_container""},<br>    {column_number : 2, data: [""Yes"", ""No""], filter_default_label: ""Select Yes/No""},<br>    {column_number : 3, filter_type: ""auto_complete"", text_data_delimiter: "",""},<br>    {column_number : 4, column_data_type: ""html"", html_data_type: ""text"", filter_default_label: ""Select tag""}]);<br><br><br>  table = $('#example').dataTable()<br>  table.yadcf([<br>    {column_number : 0},<br>      {column_number : 1,  filter_type: ""range_number_slider"", filter_container_id: ""external_filter_container""},<br>      {column_number : 2, data: [""Yes"", ""No""], filter_default_label: ""Select Yes/No""},<br>      {column_number : 3, text_data_delimiter: "","", filter_type: ""auto_complete""},<br>      {column_number : 4, column_data_type: ""html"", html_data_type: ""text"", filter_default_label: ""Select tag""}]);",header_filter_add_datatable,library
datatable_functions.js,,"<br>function datatables_search_negate(dt,search_word){<br>  dt.columns('status:name').search('^((?!'+search_word+').)*$',true,false).draw()<br>}",datatables_search_negate,library
datatable_functions.js,how to search with datatables,//how to search with datatables<br>function datatables_search(dt){<br>  dt.columns('task_type:name').search('current').draw(),datatables_search,library
datatable_functions.js,add a record to datatables ,"//add a record to datatables <br>function row_add_datatables(table,dictionary_obj){<br>    table.row.add(dictionary_obj).draw( false );<br>}",row_add_datatables,library
datatable_functions.js,update label of status of rag (created: 5/28/18),"//update label of status of rag (created: 5/28/18)<br>function url_create_datatables(td, cellData, rowData, row, col){<br>  title = rowData.name||rowData.title<br>  return $(td).html(""<a target='_blank' href='""+cellData+""'>"" +title + ""</a>"")<br>}",url_create_datatables,library
datatable_functions.js,update label of status of rag (created: 5/28/18),"//update label of status of rag (created: 5/28/18)<br>function airbnb_url_create_datatables(td, cellData, rowData, row, col){<br>  airbnb_url = rowData.airbnb_url<br>  title = rowData.title<br>  return $(td).html(""<a target='_blank' href='""+airbnb_url+""'>"" +title + ""</a>"")<br>}<br>",airbnb_url_create_datatables,library
datatable_functions.js,get the data from the api ,"//get the data from the api <br>function datatables_data_get_from_api(table_id){<br>  table_id = table_id||""#table""<br>  return $(table_id).DataTable().api().rows({ page: ""current"" }).data();<br>}<br>",datatables_data_get_from_api,library
datatable_functions.js,parse the float to two decimals,"//parse the float to two decimals<br>function parse_float_datatable_format(td, cellData, rowData, row, col) {<br>  r = parseFloat(cellData)||0<br>  r = r.toFixed(2)<br>  $(td).html(r)<br>}",parse_float_datatable_format,library
datatable_functions.js,used by cleaners.html to format check in,"//used by cleaners.html to format check in<br>function date_format_check_in(td, cellData, rowData, row, col){<br>  date_format = moment(cellData).format(""MM/DD/YY (dd)"")<br>  $(td).html(date_format)<br><br>}",date_format_check_in,library
datatable_functions.js,used by cleaners.html and others to create guest url ,"//used by cleaners.html and others to create guest url <br>function guest_url_create(data, type, row, meta){<br>    url = ""https://app.guesty.com/reservations/""+row._id+""/inbox""<br>    data = '<a target=""_blank""  href=""' + url + '"">' + data + '</a>';<br>    return data;<br>  }",guest_url_create,library
datatable_functions.js,format the datatables date with the date and time,"//format the datatables date with the date and time<br>function date_time_datatable_format(td, cellData, rowData, row, col) {<br>  date_format = moment(cellData).format(""MM/DD/YY hh:mmA (dd)"");<br>  $(td).attr('title',moment(cellData).fromNow())<br>  $(td).html(date_format);<br>}<br>",date_time_datatable_format,library
datatable_functions.js,simple datatable from array ,"//simple datatable from array <br>function data_table_simple(array,div_id){<br>  key_names = Object.keys(array[0])<br>  columns_list = []<br>  key_names.forEach(function(i){<br>    columns_list.push({data:i,title:i,name:i})<br>  })<br>  div_id = div_id || ""#table""<br>  array.forEach(function(D){<br>          key_check_func_dictionary(key_names,D)<br><br>    <br>  })<br><br>  return $(div_id).DataTable({<br>  paging: false,<br>  dom: '<""html5buttons""B>lTfgitp',<br>  data: array,<br>  columns:columns_list,<br>  select: true,<br>  colReorder: true,<br>  buttons: [<br>    { extend: ""excel"", title: document.title },<br>    { extend: ""colvis"", title: document.title }<br>  ],<br>  order: [3, ""desc""]<br>});<br><br>}",data_table_simple,library
datatable_functions.js,"when you click on row, it changes the value","//when you click on row, it changes the value<br>function clickable_change_value(table_id,editor,){<br>  table_id = table_id||""#table""<br>  $(table_id).on(""click"", ""tbody td"", function(e) {<br>  var table = $(table_id).DataTable();<br>  row_data = table.row(this).data();<br>  if (row_data.status == 'Green'){<br>    change_value = 'Red'<br>  }<br>  else {<br>    change_value = 'Green'<br>  }<br>  row_data['status'] = change_value<br>  editor<br>    .edit(this, false)<br>    .set(""status"", change_value)<br>    .submit();<br>    status_format(this, row_data.name, row_data, 1, 1)<br>});<br>}<br>",clickable_change_value,library
datatable_functions.js,update label of status of rag (created: 5/28/18),"//update label of status of rag (created: 5/28/18)<br>function status_format_datatables(td, cellData, rowData, row, col){<br>    if (rowData.status == 'Green'){<br>      html_result = '<span class=""label label-primary"" style=""min-width: 55px ;display: inline-block"">'+cellData+'</span>'<br>    }<br>    else if (rowData.status  == 'Amber'){<br>      html_result = '<span class=""label label-warning"" style=""min-width: 55px ;display: inline-block"">'+cellData+'</span>'<br>    }<br>    else if (rowData.status  == 'Red'){<br>      html_result = '<span class=""label label-danger"" style=""min-width: 55px ;display: inline-block"">'+cellData+'</span>'<br>    }<br>    else if (rowData.status  == 'Red'){<br>      html_result = '<span class=""label label-danger"" style=""min-width: 55px ;display: inline-block"">'+cellData+'</span>'<br>    }<br>    else {<br>      html_result = '<span class=""label"" style=""min-width: 55px ;display: inline-block"">'+cellData  +'</span>'<br>    }<br>    $(td).html(html_result)<br>}",status_format_datatables,library
datatable_functions.js,convenience function for custom fields,"//convenience function for custom fields<br>function datatable_fields_array_from_custom_fields(custom_fields){<br>  l = []<br>  custom_fields.forEach(function(custom_field){<br>    new_dictionary = {data:custom_field, name: custom_field,title:custom_field}<br>    l.push(new_dictionary)<br>  })<br>  return l <br>}<br>",datatable_fields_array_from_custom_fields,library
datatable_functions.js,convenience function for custom fields,"//convenience function for custom fields<br>function editor_fields_array_from_custom_fields(custom_fields){<br>  l = []<br>  custom_fields.forEach(function(custom_field){<br>    new_dictionary = { label: custom_field + "":"", name: custom_field }<br>    l.push(new_dictionary)<br>  })<br>  return l <br>}<br><br>",editor_fields_array_from_custom_fields,library
datatable_functions.js,this should go at top of datatables,"//this should go at top of datatables<br>function sort_by_unix_datatabes(){<br>	$.fn.dataTable.ext.type.order[""date-format-moment-pre""] = function(d) {<br>	  r = moment(d).utc();<br>	  return r;<br>	};<br>}",sort_by_unix_datatabes,library
datatable_functions.js,"based on filter from table , update a funciton","//based on filter from table , update a funciton<br>function callback_function_sum_datatables(variable_name){<br>  var api = this.api();<br>  variable_name = api.column(variable_name+"":name"", {page:'current'} ).data().sum()<br>  return api <br>}",callback_function_sum_datatables,library
datatable_functions.js,format the datatables date with the date,"//format the datatables date with the date<br>function date_format_with_day(td, cellData, rowData, row, col) {<br>  date_format = moment(cellData).format(""MM/DD/YY (dd)"");<br>  $(td).html(date_format);<br>}",date_format_with_day,library
datatable_functions.js,format the date as its created,"//format the date as its created<br>function date_format_created_moment_datatables(td, cellData, rowData, row, col) {<br>  date_format = moment(cellData).format(""MMM-YYYY"");<br>  $(td).html(date_format);<br>}",date_format_created_moment_datatables,library
datatable_functions.js,,"<br>function editor_initiate(table_id,fields_list){<br>	fields_list == fields_list|| [{label: ""Custom Field:"",name: ""custom_field""}]<br>	editor = new $.fn.dataTable.Editor( {<br>      table: table_id,<br>      fields:fields_list,<br>      idSrc:  'id'<br> 	 });<br>	return editor<br>",editor_initiate,library
datatable_functions.js,process the response from the psot submit,"//process the response from the psot submit<br>function editor_post_submit_function_datatables(func){<br>	editor.on( 'postSubmit', function (e, json, data, action, xhr) {<br>	    json_array = json.data<br>	    json_array.forEach(function(D){<br>	    	func(D)<br>	    })<br>  	});",editor_post_submit_function_datatables,library
datatable_functions.js,,"<br>function datatables_initiate_render(table_id,columns_list,editor,input_data){<br>  input_data = input_data || {}<br>	table_example = $(table_id).DataTable({<br>    dom: '<""html5buttons""B>lTfgitp',<br>    data: [],<br>    columns:columns_list,<br>    // columns: [<br>    //   {data:'account_name',title:'Account Name',name:'Account Name',visible:true},<br>    //   {data:'amount',title:'Amount',name:'Amount',visible:true},<br>    //   {data:'category',title:'Category',name:'Category',visible:true},<br>    //   {data:'date',title:'Date',name:'Date',visible:true,type: ""date-format-moment""},<br>    //   {data:'month',title:'Month',name:'month',visible:true},<br>    //   {data:'description',title:'Description',name:'Description',visible:true},<br>    //   {data:'labels',title:'Labels',name:'Labels',visible:false},<br>    //   {data:'notes',title:'Notes',name:'Notes',visible:false},<br>    //   {data:'original_description',title:'Original Description',name:'Original Description',visible:false},<br>    //   {data:'transaction_type',title:'Transaction Type',name:'Transaction Type',visible:true}<br><br>    // ],<br>    select: true,<br>    colReorder: true,<br>    buttons: [<br>                { extend: ""excel"", title: document.title },<br>                { extend: ""colvis"", title: document.title },<br>                { extend: 'create', editor: editor },<br>                { extend: ""edit"", editor: editor },<br>                {text: 'Clear',name:'Clear', action: function ( e, dt, node, config ) {<br>                  dt.columns('').search('').draw()<br>                }}]<br>  });<br><br>  return table_example",datatables_initiate_render,library
excel_functions.js, Create an Excel with system default font,// Create an Excel with system default font<br>function create_excel_object(){<br>	var excel = $JExcel.new();<br>	return excel                    <br>},create_excel_object,library
excel_functions.js, Create an Excel with Arial 10 Font,"// Create an Excel with Arial 10 Font<br>function create_excel_object_with_formatting(format){<br>	format = format||""Arial 10 #333333""<br>	var excel = $JExcel.new(format);  // Default font is Arial 10 in RGB #333  <br>	return excel             <br>}",create_excel_object_with_formatting,library
excel_functions.js,Create an excel file to download,"//Create an excel file to download<br>function generate_excel_download_file(excel,file_name){<br>	var excel = excel||$JExcel.new();<br>	file_name = file_name||""SampleData.xlsx""<br>	excel.generate(file_name);<br>	return excel <br>}",generate_excel_download_file,library
excel_functions.js,is used to register styles in the Excel document. It requires a style definition object which is made of up to 5 properties:,"//is used to register styles in the Excel document. It requires a style definition object which is made of up to 5 properties:<br>function excel_add_style(excel){<br>	var excel = excel||$JExcel.new();<br>	var excel_style= excel.addStyle ({<br>	  fill: ""#ECECEC"" ,                        // background color in #RRGGBB<br>	  border: ""none,none,none,thin #333333"",    // left border,right border,top border, bottom border<br>	  font: ""Calibri 12 #0000AA B"",          // font-name font-size font-color font-style<br>	  format: ""yyyy.mm.dd hh:mm:ss"",           // display format<br>	  align: ""R T""                          // horizontal-align vertical-align<br>	});<br>	return excel_style<br>}",excel_add_style,library
excel_functions.js,define cell style and add cell value,"//define cell style and add cell value<br>function excel_define_cell(){<br>	var excel = excel||$JExcel.new();<br>	var excel_style = excel.addStyle({font: ""Arial 10 B""});        // Define style Arial 10 bold                <br>	excel.set({sheet:0,col:5,row:3,value: ""HELLO"",style:excel_style});<br>}",excel_define_cell,library
excel_functions.js,defines the name of the sheet,"//defines the name of the sheet<br>function excel_define_sheet_name(excel){<br>	var excel = excel||$JExcel.new();<br>	sheet_name = sheet_name||""Summary""<br>	sheet_number = sheet_number||0<br>	excel.set(sheet_number,undefined,undefined,sheet_name); <br>	return excel <br>}<br><br>",excel_define_sheet_name,library
firebase_functions.js,"{application_function:func,login_url:func}","//{application_function:func,login_url:func}<br>function firebase_check_login_initiate(params) {<br>        return firebase.auth().onAuthStateChanged(function(user) {<br>              if (user) {<br>                user.getIdToken().then(function(accessToken) {<br>                  console.log(user)<br>                  params.application_function(user)<br>                });<br>              } else {<br><br>                  window.location.href = params.login_url||'https://chriscruze.github.io/Taskr/index.html';<br>              }<br>            }, function(error) {<br>                console.log(error);<br>            });<br>    };<br><br><br>",firebase_check_login_initiate,library
firebase_functions.js,,"<br>function firebase_account_create(email,password){<br> firebase.auth().createUserWithEmailAndPassword(email, password).catch(function(error) {<br>    // Handle Errors here.<br>    var errorCode = error.code;<br>    var errorMessage = error.message;<br>    // ...<br>  });<br>}<br>//account_create('cruzc.09@gmail.com','sTorr955')",firebase_account_create,library
firebase_functions.js,,"<br>function firebase_account_login(email,password){<br>  return firebase.auth().signInWithEmailAndPassword(email, password).catch(function(error) {<br>  // Handle Errors here.<br>  var errorCode = error.code;<br>  var errorMessage = error.message;<br>  // ...<br>});<br>}<br>",firebase_account_login,library
firebase_functions.js,sign in using firebase,"//sign in using firebase<br>function firebase_signin(){<br>      // FirebaseUI config.<br>      var uiConfig = {<br>        callbacks: {<br>          signInSuccess: function(currentUser, credential, redirectUrl) {<br>            console.log(currentUser)<br>                        console.log(credential)<br>            console.log(redirectUrl)<br><br>            // Do something.<br>            // Return type determines whether we continue the redirect automatically<br>            // or whether we leave that to developer to handle.<br>            return true;<br>          },<br>          uiShown: function() {<br>            // The widget is rendered.<br>            // Hide the loader.<br>            document.getElementById('loader').style.display = 'none';<br>          }<br>        },<br>        credentialHelper: firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM,<br>        // Query parameter name for mode.<br>        queryParameterForWidgetMode: 'mode',<br>        // Query parameter name for sign in success url.<br>        queryParameterForSignInSuccessUrl: 'signInSuccessUrl',<br>        // Will use popup for IDP Providers sign-in flow instead of the default, redirect.<br>        signInFlow: 'popup',<br>        signInSuccessUrl: 'https://chriscruze.github.io/CruzControl/main.html',<br>        signInOptions: [<br>          // Leave the lines as is for the providers you want to offer your users.<br>          firebase.auth.GoogleAuthProvider.PROVIDER_ID,<br>          firebase.auth.FacebookAuthProvider.PROVIDER_ID,<br>          firebase.auth.TwitterAuthProvider.PROVIDER_ID,<br>          firebase.auth.EmailAuthProvider.PROVIDER_ID<br>        ],<br>        // Terms of service url.<br>        tosUrl: '<your-tos-url>'<br>      };<br><br>      var ui = new firebaseui.auth.AuthUI(firebase.auth());<br>      // The start method will wait until the DOM is loaded.<br>      ui.start('#firebaseui-auth-container', uiConfig);",firebase_signin,library
firebase_functions.js,,,account_sign_in_status,library
firebase_functions.js,nction account_sign_in_status(){,"function account_sign_in_status(){<br>        function initApp() {<br>        firebase.auth().onAuthStateChanged(function(user) {<br>          if (user) {<br>            // User is signed in.<br>            var displayName = user.displayName;<br>            var email = user.email;<br>            var emailVerified = user.emailVerified;<br>            var photoURL = user.photoURL;<br>            var uid = user.uid;<br>            var phoneNumber = user.phoneNumber;<br>            var providerData = user.providerData;<br>            user.getIdToken().then(function(accessToken) {<br>                console.log(displayName)<br>                console.log(email)<br><br>              // $(""#username"").html(displayName)<br>              // $(""#email"").html(email)<br>              // $(""#user_photo"").attr('src',photoURL)<br><br>            });<br>          } else {<br>                            console.log('not signed in')<br><br>            //window.location.href = 'https://chriscruze.github.io/CruzControl/login.html';<br>            document.getElementById('sign-in-status').textContent = 'Signed out';<br>            document.getElementById('sign-in').textContent = 'Sign in';<br>            document.getElementById('account-details').textContent = 'null';<br>          }<br>        <br><br>        }, function(error) {<br>          console.log(error);<br>        });<br>      <br><br><br>      };<br><br>      window.addEventListener('load', function() {<br>        initApp()<br>      });<br><br>}",initApp,library
firebase_functions.js,pull ref from firebase,"//pull ref from firebase<br>function ref_attain_from_firebase(reference_name,child_name){<br>	var dbRef = firebase.database();<br>	var contactsRef = dbRef.ref(reference_name).child(child_name)<br>	return contactsRef<br>}",ref_attain_from_firebase,library
firebase_functions.js,push data to firebase,"//push data to firebase<br>function data_push_to_firebase(contactsRef,data_to_push){<br>  //data_to_push = {'chat_id':chat_id, 'viewer':site_viewer, 'content': input_text, 'timestamp': date_time }<br>  contactsRef.push(data_to_push)<br><br>}",data_push_to_firebase,library
firebase_functions.js,query the contacts ref and run the process_func on the results,"//query the contacts ref and run the process_func on the results<br>function query_elements_array_firebase(contactsRef,process_func){<br>	contactsRef.on('child_added', function(snapshot) {<br>  		process_func(snapshot.val())<br>	})<br>}",query_elements_array_firebase,library
firebase_functions.js,pulls straight json if the firebase is open,"//pulls straight json if the firebase is open<br>function firebase_json_pull(url){<br>    url = url||""https://shippy-ac235.firebaseio.com/DataTablesTest/Test3.json""<br>    l = $.ajax({<br>      url: url,<br>      method: ""GET"",<br>      async:false,<br>      headers: {""Accept"":""application/json; odata=verbose""}<br>    })<br>    results = l.responseJSON<br>    return results<br>  }",firebase_json_pull,library
firebase_functions.js,purpose is to check one dictionary against another and update it ,"//purpose is to check one dictionary against another and update it <br>function dictionary_cross_check_apply_key(D,firebase_defined_dict,key){<br>    	if (firebase_defined_dict != undefined) {<br>      		D[key] = firebase_defined_dict[key]||""null"";<br>    	} else {<br>      		D[key] = ""null"";<br>    	}<br><br>}",dictionary_cross_check_apply_key,library
firebase_functions.js,purpose is to sync firebase array with regular array across keys,"//purpose is to sync firebase array with regular array across keys<br>function firebase_array_integrate(array,firebase_url,identifier,keys) {<br>	keys = keys||['status']<br>	firebase_url = firebase_url||""https://shippy-ac235.firebaseio.com/dashbot/accounts.json""<br>	identifier = identifier||""DT_RowId""<br>  	firebase_dict = firebase_json_pull(firebase_url)||{}<br>  	array.forEach(function(D) {<br>    	firebase_defined_dict = firebase_dict[D[String(identifier)]]<br>    	keys.forEach(function(key){<br>    		dictionary_cross_check_apply_key(D,firebase_defined_dict,key)<br>    	})<br>    	<br><br>  });<br>  return array;<br>}<br>",firebase_array_integrate,library
firebase_functions.js, initialize the firebase instance,"// initialize the firebase instance<br>function firebase_initialize(){<br>	var config = {<br>	apiKey: ""AIzaSyApJBfnH0j3TSugzEABiMFkI_tU_XXeGzg"",<br>	authDomain: ""shippy-ac235.firebaseapp.com"",<br>	databaseURL: ""https://shippy-ac235.firebaseio.com""<br>	};<br>	firebase.initializeApp(config);<br>	return firebase<br>}",firebase_initialize,library
firebase_functions.js,authenticate the user that has been authed,//authenticate the user that has been authed<br>function firebase_auth_user_process(user_process_func){<br>  firebase.auth().onAuthStateChanged((user) => {<br>  if (user) {<br>  	user_process_func(user)<br>    }<br>  });,firebase_auth_user_process,library
jquery_functions.js,https://stackoverflow.com/questions/18614301/keep-overflow-div-scrolled-to-bottom-unless-user-scrolls-up/21067431,//https://stackoverflow.com/questions/18614301/keep-overflow-div-scrolled-to-bottom-unless-user-scrolls-up/21067431<br>function updateScroll(yourDivID){<br>    var element = document.getElementById(yourDivID);<br>    element.scrollTop = element.scrollHeight;<br>},updateScroll,library
jquery_functions.js,how to find parent elements,"//how to find parent elements<br>function find_parent_elements(this_elem){<br>	$(this_elem).closest('.ibox').find("".markdown_edit_form"").show()<br><br>}<br>",find_parent_elements,library
jquery_functions.js,,"<br>function sort_divs_jquery(parent_identifier,sort_attribute){<br>  sort_attribute = sort_attribute || 'data-status'<br>  parent_identifier = parent_identifier||'#target'<br>  $(parent_identifier+' > div').sort(function (a, b) {<br>    var contentA = parseInt($(a).attr(sort_attribute), 10);<br>    var contentB = parseInt($(b).attr(sort_attribute), 10);<br>    return (contentA < contentB) ? 1 : (contentA > contentB) ? -1 : 0;<br>  }).appendTo(parent_identifier);<br><br>}",sort_divs_jquery,library
jquery_functions.js,get the td jquery objects from a table based on a table id,"//get the td jquery objects from a table based on a table id<br>function table_jquery_objects_to_array(table_id){<br>	list_of_lists = []<br>	$(""#""+table_id+"" tr"").each(function(row_number) {<br>	  col_values = Object.values($(this).find('td'))<br>	  	if (col_values.length > 0){<br>	  		col_values.forEach(function(col_val,col_number){<br>	  			new_dictionary = {<br>	  				row_number: row_number,<br>	  				col_number: col_number,<br>	  				cell_value: $(col_val).text(),<br>	  				class_name: $(col_val).attr('class')<br>	  			}<br>	    		list_of_lists.push(new_dictionary)<br>	  		})<br>	  	}<br>	});<br>	return list_of_lists<br>}",table_jquery_objects_to_array,library
jquery_functions.js,upon hovering over change the css,"//upon hovering over change the css<br>function style_change_upon_hover(class_name){<br>	class_name = class_name||'.moreBtn'<br><br>	$(class_name).hover(function(){<br>        $(this).css(""background"", ""blue"")<br>    })<br>}<br>",style_change_upon_hover,library
jquery_functions.js,change text upon mouse over ,"//change text upon mouse over <br>function style_change_upon_mouse_over(class_name){<br>	class_name = class_name||'.moreBtn'<br>	$(class_name).mouseover(function(){<br>    $(this).css({<br>        'color' :'red',<br>        //other styles<br>    })<br>});<br>}<br><br><br>",style_change_upon_mouse_over,library
jquery_functions.js,add tooltip to element,"//add tooltip to element<br>function tooltip_add_jquery(div_id,tooltip_text){<br>	$(div_id).attr(""data-toggle"",""tooltip"")<br>	$(div_id).attr(""title"",tooltip_text)<br>	$('[data-toggle=""tooltip""]').tooltip(); <br>}<br>",tooltip_add_jquery,library
jquery_functions.js,click on a button,//click on a button<br>function div_click_jquery(ref_id){<br>	$(ref_id).click();<br>},div_click_jquery,library
jquery_functions.js,press enter when clicked,//press enter when clicked<br>function enter_press_down_jquery(ref_id){<br>$(ref_id).keypress(function (e) {<br> var key = e.which;<br> if(key == 13)  // the enter key code<br>  {run_function()<br>  }<br>});  <br><br><br>},enter_press_down_jquery,library
jquery_functions.js,function that uses jquery to run a function from a click,"//function that uses jquery to run a function from a click<br>function update_from_click_jquery(div_id){<br>	div_id = div_id||"".cell-value""<br>	$(div_id).on('click', function (e) { $(this)})<br>}",update_from_click_jquery,library
jquery_functions.js,get the td jquery objects from a table based on a table id,"//get the td jquery objects from a table based on a table id<br>function table_jquery_objects(table_id){<br>	list_of_lists = []<br>	$(""#""+table_id+"" tr"").each(function(row_number) {<br>	  row_list = []<br>	  col_values = Object.values($(this).find('td'))<br>	  	if (col_values.length > 0){<br>	  		col_values.forEach(function(col_val,col_number){<br>	  			col_val['row_number'] = row_number<br>	  			col_val['col_number'] = col_number<br>	    		row_list.push(col_val)<br>	  		})<br>	  		list_of_lists.push(row_list)<br>	  	}<br>	});<br>	return list_of_lists<br>}",table_jquery_objects,library
moment_functions.js,"create an interval string with start time, end time and minutes elapsed. used in create_task_v2 to keep track of time","//create an interval string with start time, end time and minutes elapsed. used in create_task_v2 to keep track of time<br>function time_interval_string_format_from_start_time(start_time_core){<br>      end_time = moment().format()<br>      start_time = moment(start_time_core).format(""h:mm:ssa"")<br>      end_time = moment(end_time).format(""h:mm:ssa"")<br>      var now = moment().valueOf()  //now is the time right now<br>      start_time_instance = moment(start_time_core).valueOf()<br>      var elapsed = now - start_time_instance;<br>      seconds = elapsed/1000<br>      elapsed_minutes = String(parseFloat(seconds/60).toFixed(2))  //add a two minute buffer<br>      formatted_string = "" ["" + start_time + ""-"" + end_time + ""|""+ elapsed_minutes+""min]""<br>      return formatted_string<br><br>}",time_interval_string_format_from_start_time,library
moment_functions.js,update the html of the timer,"//update the html of the timer<br>function html_timer_update_from_jquery(jquery_identifier,start_time){<br>    time_text = time_since_start_time_moment(start_time)<br>    $(jquery_identifier).html(time_text)<br>    document.title = time_text<br>}<br>",html_timer_update_from_jquery,library
moment_functions.js,update from jquery identifier the time ,"//update from jquery identifier the time <br>function timer_jquery_html_update_from_start_time_moment(start_time,jquery_identifier){<br>  jquery_identifier = jquery_identifier||""#input_label_timer""<br>  setInterval(html_timer_update_from_jquery,1000,jquery_identifier,start_time)<br>}<br>",timer_jquery_html_update_from_start_time_moment,library
moment_functions.js,used in create_task_v2 to keep track of time,"//used in create_task_v2 to keep track of time<br>function time_since_start_time_moment_to(start_time){<br>    now = moment().valueOf()  //now is the time right now<br>    start_time_instance = moment(start_time).valueOf()<br>    elapsed = start_time_instance - now ;<br>    time_text_value = moment(elapsed).subtract({hours: 19}); //have to subtract 19 hours for some reason<br>    time_text = time_text_value.format(""HH:mm:ss"")<br>    return time_text<br> }<br>",time_since_start_time_moment_to,library
moment_functions.js,used in create_task_v2 to keep track of time,"//used in create_task_v2 to keep track of time<br>function time_since_start_time_moment_compare(end_time,start_time){<br>    now = moment(end_time).valueOf()  //now is the time right now<br>    start_time_instance = moment(start_time).valueOf()<br>    elapsed = now - start_time_instance;<br>    time_text_value = moment(elapsed).subtract({hours: 19}); //have to subtract 19 hours for some reason<br>    <br><br>    time_text = time_text_value.format(""HH:mm:ss"")<br>    return time_text<br> }",time_since_start_time_moment_compare,library
moment_functions.js,used in create_task_v2 to keep track of time,"//used in create_task_v2 to keep track of time<br>function time_since_start_time_moment(start_time){<br>    now = moment().valueOf()  //now is the time right now<br>    start_time_instance = moment(start_time).valueOf()<br>    elapsed = now - start_time_instance;<br>    time_text_value = moment(elapsed).subtract({hours: 19}); //have to subtract 19 hours for some reason<br>    time_text = time_text_value.format(""HH:mm:ss"")<br>    return time_text<br> }<br>",time_since_start_time_moment,library
moment_functions.js,tells us how long ago ,//tells us how long ago <br>function moment_time_ago(input_time){<br>  return moment(input_time).fromNow();<br>},moment_time_ago,library
moment_functions.js,"check if the day is today, 'year, month, week, minute'","//check if the day is today, 'year, month, week, minute'<br>function check_if_date_is_current_range(input_date,date_range){<br>  date_range = date_range || 'day'<br>  return moment(input_date).isSame(Date.now(), date_range);",check_if_date_is_current_range,library
moment_functions.js,"creates a string that indicates whether its in the day,week,month,year","//creates a string that indicates whether its in the day,week,month,year<br>function date_within_range_string_create(input_date){<br>  date_string = ''<br>  if (moment(input_date).isSame(Date.now(), 'day')){<br>    date_string = date_string + ""today""<br>  }<br>  if (moment(input_date).isSame(Date.now(), 'week')){<br>    date_string = date_string + ""this_week""<br>  }<br>  if (moment(input_date).isSame(Date.now(), 'month')){<br>    date_string = date_string + ""this_month""<br>  }<br>  if (moment(input_date).isSame(Date.now(), 'year')){<br>    date_string = date_string + ""this_year""<br>  }<br>  if (moment(input_date) >= moment(Date.now())){<br>    date_string = date_string + ""future""<br>  }<br>  if (moment(input_date) <= moment(Date.now())){<br>    date_string = date_string + ""past""<br>  }<br>  return date_string<br>}<br>",date_within_range_string_create,library
moment_functions.js,get hour from time,"//get hour from time<br>function get_hour_from_time(i){<br>  r = Date(i)<br>  hour = parseInt(moment(r).format(""H"")) + 5<br>  return hour<br>}<br>",get_hour_from_time,library
moment_functions.js,get the current time from moment,//get the current time from moment<br>function attain_now_from_moment(){<br>  date_time = moment().format();<br>  return date_time<br>},attain_now_from_moment,library
moment_functions.js,return unix now moment,//return unix now moment<br>function unix_now_moment(){<br>	return moment().unix()<br>},unix_now_moment,library
moment_functions.js,return hour-minute format using moment,"//return hour-minute format using moment<br>function hour_format_moment(timestamp){<br>	return moment(timestamp).format(""hh:mmA"")<br>}",hour_format_moment,library
moment_functions.js,"filter a certain date for current time range such as today, this month etc.","//filter a certain date for current time range such as today, this month etc.<br>function date_range_filter_moment(date_input,strf){<br>    if (date_input){<br>      this_month = moment().format(strf) //01<br>      completed_date_moment = new moment(date_input)<br>      completed_month = completed_date_moment.format(strf)<br>      return completed_month === this_month<br>    }<br>}<br>",date_range_filter_moment,library
moment_functions.js,set the hour from a given day,"//set the hour from a given day<br>function set_date_time_moment(date,hour){<br>  new_date = new Date(moment(date).format())<br>  new_date.setHours(hour)<br>  return moment(new_date)",set_date_time_moment,library
moment_functions.js,,"<br>function date_difference_from_today_days_moment(date_added){<br>    a = new moment()<br>    b = new moment(date_added)<br>    age_days = a.diff(b,'days')<br>    return age_days<br>}<br>",date_difference_from_today_days_moment,library
moment_functions.js,dates that are within this month,"//dates that are within this month<br>function dates_within_this_month(){<br>    days = moment().daysInMonth();<br>    today = new Date()<br>    month = String(today.getMonth()+1)<br>    year = String(today.getFullYear())<br>    date_string = year + ""-"" + month + ""-01""<br>    start_time = moment(date_string)<br>    hours_list = []<br>    for (i = 0; i < days; i++) { <br>        next_time = start_time.clone()<br>        next_time.add(i,'day')<br>        hours_list.push(next_time)<br><br>    }<br>    return hours_list<br>  } ",dates_within_this_month,library
moment_functions.js,return a list of days in the future ,"//return a list of days in the future <br>function number_of_days_ahead_calculate(days_ahead){<br>    today = new Date()<br>    month = String(today.getMonth()+1)<br>    year = String(today.getFullYear())<br>    start_time = moment()<br>    hours_list = []<br>    for (i = 0; i < days_ahead; i++) { <br>        next_time = start_time.clone()<br>        next_time.add(i,'day')<br>        hours_list.push(next_time.format())<br>    }<br>    return hours_list<br>  } <br>",number_of_days_ahead_calculate,library
moment_functions.js,return a list of days in the future. This returns an array ,"//return a list of days in the future. This returns an array <br>function number_of_days_ahead_calculate_array(days_ahead){<br>    today = new Date()<br>    month = String(today.getMonth()+1)<br>    year = String(today.getFullYear())<br>    start_time = moment()<br>    hours_list = []<br>    for (i = 0; i < days_ahead; i++) { <br>        next_time = start_time.clone()<br>        next_time.add(i,'day')<br><br>        hours_list.push({date:next_time.format()})<br>    }<br>    return hours_list<br>  } <br>",number_of_days_ahead_calculate_array,library
moment_functions.js,return list of days in the past,"//return list of days in the past<br>function dates_past_n_days(days){<br>    today = new Date()<br>    month = String(today.getMonth()+1)<br>    year = String(today.getFullYear())<br>    date_string = moment().format(""YYYY-MM-DD"")//year + ""-"" + month + ""-01""<br>    start_time = moment(date_string)<br>    hours_list = []<br>    for (i = 0; i < days; i++) { <br>        next_time = start_time.clone()<br>        next_time.subtract(i,'day')<br>        hours_list.push(next_time)<br><br>    }<br>    hours_list.reverse()<br>    return hours_list<br>  } ",dates_past_n_days,library
moment_functions.js,return list of days in the past but strf formatted,"//return list of days in the past but strf formatted<br>function dates_past_n_days_formatted(days,strf){<br>    strf = strf || ""YYYY-MM-DD""<br>    today = new Date()<br>    month = String(today.getMonth()+1)<br>    year = String(today.getFullYear())<br>    date_string = moment().format(""YYYY-MM-DD"")//year + ""-"" + month + ""-01""<br>    start_time = moment(date_string)<br>    hours_list = []<br>    for (i = 0; i < days; i++) { <br>        next_time = start_time.clone()<br>        next_time.subtract(i,'day')<br>        hours_list.push(next_time.format(strf))<br>    }<br>    hours_list.reverse()<br>    return hours_list<br>  } <br><br>",dates_past_n_days_formatted,library
moment_functions.js,return list of days in the past but strf formatted. This is as an array.,"//return list of days in the past but strf formatted. This is as an array.<br>function dates_past_n_days_formatted_array(days,strf){<br>    strf = strf || ""YYYY-MM-DD""<br>    today = new Date()<br>    month = String(today.getMonth()+1)<br>    year = String(today.getFullYear())<br>    date_string = moment().format(""YYYY-MM-DD"")//year + ""-"" + month + ""-01""<br>    start_time = moment(date_string)<br>    hours_list = []<br>    for (i = 0; i < days; i++) { <br>        next_time = start_time.clone()<br>        next_time.subtract(i,'day')<br>        hours_list.push({date:next_time.format(strf)})<br><br>    }<br>    hours_list.reverse()<br>    return hours_list<br>  } <br>",dates_past_n_days_formatted_array,library
moment_functions.js,pulls the dates between two dates,"//pulls the dates between two dates<br>function dates_between_dates_moment(startDate, stopDate) {<br>    var dateArray = new Array();<br>    var currentDate = startDate;<br>    while (currentDate <= stopDate) {<br>        dateArray.push(currentDate.clone());<br>        currentDate.add(1,'day');<br>    }<br>    return dateArray;<br>}<br><br>",dates_between_dates_moment,library
stock_functions.js,,"<br>function stock_pull(url){<br>    url = url||""https://api.iextrading.com/1.0/stock/market/batch?symbols=aapl,fb&types=quote,news,chart&range=1m&last=5""<br>    l = $.ajax({<br>      url: url,<br>      method: ""GET"",<br>      async:false,<br>      headers: {""Accept"":""application/json; odata=verbose""}<br>    })<br>    results = l.responseJSON<br>    return results",stock_pull,library
toastr_functions.js,message notification once something is done,//message notification once something is done<br>function toastr_notification(message){<br>	toastr.options.closeButton = true;<br>	toastr.options.onclick = function() { console.log('clicked'); }<br>	toastr.info(message),toastr_notification,library
typewriter_functions.js,create a typewritter effect using typewritter library (https://safi.me.uk/typewriterjs/),"//create a typewritter effect using typewritter library (https://safi.me.uk/typewriterjs/)<br>function typewriter_element_create(div_id,input_text){<br>	div_id = div_id||'app'<br>	input_text = input_text||$(""#""+div_id).html()<br><br><br>	var app = document.getElementById(div_id);<br>	var typewriter = new Typewriter(app, {<br>	    loop: true<br>	});<br><br>	typewriter.typeString(input_text)<br>	    .pauseFor(10000)<br>	    .start();<br><br>}",typewriter_element_create,library
typewriter_functions.js,,"<br>function typewriter_multiple_questions_create(div_id) {<br>      div_id = div_id || 'app'<br>      questions = $(""#"" + div_id).attr(""questions"").split(""|"")<br><br>        <br>      var app = document.getElementById(div_id);<br>      var typewriter = new Typewriter(app, {<br>        loop: true<br>      });<br>        <br>    questions.forEach(function(i){<br>      typewriter.typeString(String(i))<br>      .pauseFor(1000)<br>      .deleteAll()<br>        <br>    })<br><br>        <br>          <br>   typewriter.start();",typewriter_multiple_questions_create,library
underscore_functions.js, get sum from array with key,"// get sum from array with key<br>function sum_float_convert_from_array_underscore(arr,key_name) { <br>  // returns the sum total of all values in the array<br>  return _.reduce(arr, function(memo, num) { <br>    r = memo + (parseFloat(num[key_name])||0)<br>    return r <br>  }, 0); <br>}",sum_float_convert_from_array_underscore,library
underscore_functions.js,group by an array,"//group by an array<br>function group_by_underscore(gspread_array_data){<br>	_.groupBy(gspread_array_data,'status')['Red']||[]<br>}",group_by_underscore,library
underscore_functions.js,,"<br>function min_date_from_array_underscore(array,key_name){<br>	key_name = key_name || 'task_date'<br>	return _.min(array,function(D){return moment(D[key_name]).valueOf() })<br>",min_date_from_array_underscore,library
underscore_functions.js,,"<br>function max_date_from_array_underscore(array,key_name){<br>	key_name = key_name || 'task_date'<br>	return _.max(array,function(D){return moment(D[key_name]).valueOf() })<br>",max_date_from_array_underscore,library
gspread_functions.js,query google spreadsheets,"//query google spreadsheets<br>function gspread_query(range,spreadsheet_id,api_key){<br>  api_key = api_key||""AIzaSyApJBfnH0j3TSugzEABiMFkI_tU_XXeGzg""<br>  spreadsheet_id = spreadsheet_id||""1P0m6nu4CoXVD3nHrCgfm0pEvSpEkLsErjJxTLJLFjp8""<br>  range = range||""Checklists!A1""<br>  url = ""https://sheets.googleapis.com/v4/spreadsheets/""+spreadsheet_id+""/values/"" + range<br>  return $.ajax({type: ""GET"",<br>    url: url,<br>    dataType: 'json',<br>    async: false,<br>    data: {<br>    'key':api_key<br>    }<br>  });<br><br>}",gspread_query,api
gspread_functions.js,pulls from gspread in different format,"//pulls from gspread in different format<br>function gspread_pull(params,sheet_name,spreadsheet_id,api_key,key_names){<br>        api_key = paramsapi_key||""AIzaSyApJBfnH0j3TSugzEABiMFkI_tU_XXeGzg""<br>        spreadsheet_id = params.spreadsheet_id||""1P0m6nu4CoXVD3nHrCgfm0pEvSpEkLsErjJxTLJLFjp8""<br>        sheet_name = params.sheet_name||""Checklists""<br>        sheet_range = params.sheet_range||""A:Z""<br>        range = params.sheet_name_range||sheet_name + ""!""+ sheet_range //""!A:Z""<br>        lol = gspread_query(range,spreadsheet_id,api_key).responseJSON.values<br>        key_names = lol[0]||key_names<br>        array = list_of_lists_to_array(lol,key_names)<br>        array.shift()<br>        return array<br>    }<br><br>  // sheet_name = 'Tasks'<br>  // spreadsheet_id = ""1-tszr-k0KcENCI5J4LfCOybmqpLtvsijeUvfJbC9bu0""<br>  // gspread_array_data = gspread_array_pull(sheet_name,spreadsheet_id)<br>",gspread_pull,api
gspread_functions.js,pulls from gspread in different format,"//pulls from gspread in different format<br>function gspread_array_pull(sheet_name,spreadsheet_id,api_key,key_names){<br>        api_key = api_key||""AIzaSyApJBfnH0j3TSugzEABiMFkI_tU_XXeGzg""<br>        spreadsheet_id = spreadsheet_id||""1P0m6nu4CoXVD3nHrCgfm0pEvSpEkLsErjJxTLJLFjp8""<br>        sheet_name = sheet_name||""Checklists""<br>        range = sheet_name + ""!A:Z""<br>        lol = gspread_query(range,spreadsheet_id,api_key).responseJSON.values<br>        key_names = lol[0]||key_names<br>        array = list_of_lists_to_array(lol,key_names)<br>        array.shift()<br>        return array<br>    }",gspread_array_pull,api
gspread_functions.js,query from gspread directly using api key,"//query from gspread directly using api key<br>function array_pull_from_gspread(sheet_name,spreadsheet_id,api_key,key_names){<br>    // sheet_name = 'Tasks'<br>    // spreadsheet_id = ""1-tszr-k0KcENCI5J4LfCOybmqpLtvsijeUvfJbC9bu0""<br>    // gspread_array_data = gspread_array_pull(sheet_name,spreadsheet_id)<br><br>        api_key = api_key||""AIzaSyApJBfnH0j3TSugzEABiMFkI_tU_XXeGzg""<br>        spreadsheet_id = spreadsheet_id||""1P0m6nu4CoXVD3nHrCgfm0pEvSpEkLsErjJxTLJLFjp8""<br>        sheet_name = sheet_name||""Checklists""<br>        range = sheet_name + ""!A:Z""<br>        lol = gspread_query(range,spreadsheet_id,api_key).responseJSON.values<br>        key_names = lol[0]||key_names<br>        array = list_of_lists_to_array(lol,key_names)<br>        array.shift()<br>        return array<br>}",array_pull_from_gspread,api
guesty_functions.js,,,guesty_reservation_data_pull_custom,api
guesty_functions.js,determine state if reservation is current,//determine state if reservation is current<br>function guest_state_determine(item){<br>  is_present = moment(item['checkIn']) <= moment() && moment() <= moment(item['checkOut']) <br>  if (is_present){<br>    return 'current'<br>  }<br>  else {<br>    return 'not current'<br>  }<br>}<br>,guest_state_determine,api
guesty_functions.js,using the information from guesty we are able to dictionary items,"//using the information from guesty we are able to dictionary items<br>function guest_reservation_dictionary_customize(item,index){<br>    price = item['money']['netIncome']<br>    days_difference = Math.round((new Date(item['checkOut']) - new Date(item['checkIn']))/(1000*60*60*24)) <br>    revenue_per_day = price/days_difference<br>    run_rate = revenue_per_day * 30<br>    guest_name = item.guest.fullName<br>    price = parseInt(price)||0<br>    revenue_per_day = parseInt(revenue_per_day)||0<br>    run_rate = parseInt(run_rate)||0<br>    room=item.listing.nickname<br>    days_from_now = Math.round((new Date(item['checkOut']) - new Date())/(1000*60*60*24)) <br>    item['guest_phone'] = dictionary_check_keys_double_return(item,'guest','phone')<br><br>    item['guest_public_review'] = dictionary_check_keys_triple_return(item,'review','guestReview','public')<br>    item['guest_private_review'] = dictionary_check_keys_triple_return(item,'review','guestReview','private')<br><br><br>    item['days_from_now'] = days_from_now<br>    item['days_from_now_absolute'] = Math.abs(days_from_now)<br>    item['days_difference'] = days_difference<br>    item['revenue_per_day'] = revenue_per_day<br>    item['run_rate'] = run_rate<br>    item['guest_name'] = guest_name<br>    item['listing_nick_name'] = item.listing.nickname||'null'<br>    item['listing_title'] = item.listing.title||'null'<br>    item['account_name'] = item.integration.object.nickname||'null'<br>    item['state'] = guest_state_determine(item)<br>    item['DT_RowId'] = item._id<br><br>    item[""check_out_date_range""] = date_within_range_string_create(item.checkOut);<br>    item[""check_in_date_range""] = date_within_range_string_create(item.checkIn);<br><br><br>    is_3009 = item['listing']['nickname'].indexOf(""2608"") != -1<br>    is_401 = item['listing']['nickname'].indexOf(""401"") != -1<br>    is_1806 = item['listing']['nickname'].indexOf(""1806"") != -1<br>    if (is_3009){<br>      item['room_number'] = '2608'<br>    }<br>    else if (is_401){<br>      item['room_number'] = '401'<br>    }<br>    else if (is_1806){<br>      item['room_number'] = '1806'<br>    }<br>    else{<br>      item['room_number'] = 'N/A'<br><br>    }<br>  }<br><br>",guest_reservation_dictionary_customize,api
guesty_functions.js, The below function pulls the data from the guesty,"// The below function pulls the data from the guesty<br>function guesty_reservation_data_pull(){<br>    key = '57b6349a1f211d3c4b2b4c886c5632c7'<br>    secret = '1b8e3bd1f42ce6b054868cd47dc0412f'<br>    reservations_url = 'https://superhostuser.herokuapp.com/api/v2/reservations'<br>    results = $.ajax<br>    ({<br>      type: ""GET"",<br>      url: reservations_url,<br>      dataType: 'json',<br>      async: false,<br>      data: {'viewId':'5616071779035e0e0096290c'},<br>      headers: {<br>        ""Authorization"": ""Basic "" + btoa(key + "":"" + secret)<br>    }<br>    });<br>    return results.responseJSON.results<br>    }",guesty_reservation_data_pull,api
guesty_functions.js,,"<br>function guesty_listing_data_pull(){<br>  response_result = $.ajax({type: ""GET"",<br>  url: 'https://superhostuser.herokuapp.com/api/v2/listings',<br>  dataType: 'json',<br>  async: false,<br>  headers: { ""Authorization"": ""Basic "" + btoa(""57b6349a1f211d3c4b2b4c886c5632c7:1b8e3bd1f42ce6b054868cd47dc0412f"")},<br>  data: {limit:50}<br>});<br>  array = response_result.responseJSON.results<br>  array.forEach(function(D){D['nickname'] = D['nickname']||'null'})<br>  return array ",guesty_listing_data_pull,api
guesty_functions.js,,"<br>function guesty_integration_data_pull(){<br>  json_response =  $.ajax({type: ""GET"",<br>    url: 'https://superhostuser.herokuapp.com/api/v2/integrations',<br>    dataType: 'json',<br>    async: false,<br>    headers: { ""Authorization"": ""Basic "" + btoa(""57b6349a1f211d3c4b2b4c886c5632c7:1b8e3bd1f42ce6b054868cd47dc0412f"")},<br>    data: {limit:25}<br>  }).responseJSON<br>  return json_response.results<br>}<br>",guesty_integration_data_pull,api
guesty_functions.js,create url for reservation for datatables functions,"//create url for reservation for datatables functions<br>function guesty_reservations_inbox_url_create(td, cellData, rowData, row, col) {<br>  url = ""https://app.guesty.com/reservations/"" + rowData.guestId + ""/inbox"";<br>  new_url = ""<a href='"" + url + ""'>"" + cellData + ""</a>"";<br>  console.log(new_url);<br>  return new_url;<br>}",guesty_reservations_inbox_url_create,api
guesty_functions.js,create user airbnb url for data tables,"//create user airbnb url for data tables<br>function guest_airbnb_url_create(data, type, row, meta) {<br>  url = ""https://www.airbnb.com/users/show/"" + row.id + """";<br>  data = '<a target=""_blank""  href=""' + url + '"">' + data + ""</a>"";<br>  return data;<br>}",guest_airbnb_url_create,api
iextrading_functions.js,,"<br>function stock_pull(url){<br>    url = url||""https://api.iextrading.com/1.0/stock/market/batch?symbols=aapl,fb&types=quote,news,chart&range=1m&last=5""<br>    l = $.ajax({<br>      url: url,<br>      method: ""GET"",<br>      async:false,<br>      headers: {""Accept"":""application/json; odata=verbose""}<br>    })<br>    results = l.responseJSON<br>    return results",stock_pull,api
ip_functions.js,,,ipLookUp ,api
ip_functions.js,$.ajax('http://ip-api.com/json').then(,"  $.ajax('http://ip-api.com/json').then(<br>      function success(response) {<br>        session_dictionary['ip_data'] = response<br>        update_firebase_session_dictionary(response,'ip_data')",success,api
ip_functions.js,"    },","      },<br>      function fail(data, status) {<br>          console.log('Request failed.  Returned status of',status);<br>      }<br>  );",fail,api
todoist_functions.js,toodoist custom functions ,"//toodoist custom functions <br>function current_task_average_age_from_array(array){<br>  //https://momentjs.com/docs/<br>  age_sum = 0<br>  array.forEach(function(D,index){<br>    date_added = D.date_added<br>    a = new moment()<br>    b = new moment(date_added)<br>    age_days = a.diff(b,'days')<br><br>    age_sum = age_sum + age_days<br>    //ages.push(age_days)<br>  })<br>  denom = array.length <br>  avg = age_sum/denom <br>  return avg <br>}<br>",current_task_average_age_from_array,api
todoist_functions.js,complete_task,"//complete_task<br>function todoist_complete_task(task_id,todoist_api_token){<br>  todoist_api_token = todoist_api_token || 'a14f98a6b546b044dbb84bcd8eee47fbe3788671'<br><br>  r = $.ajax({<br>      type: ""POST"",<br>      url: 'https://beta.todoist.com/API/v8/tasks/'+String(task_id)+'/close',<br>      dataType: 'json',<br>      async: false,<br>      data: {<br>        'token': todoist_api_token<br>      }<br>    })<br>}",todoist_complete_task,api
todoist_functions.js,url create of todoist task from title and task id,"//url create of todoist task from title and task id<br>function html_link_from_todoist_task(task_title,task_id){<br>  url = 'https://en.todoist.com/app?lang=en#task%2F'+String(task_id)<br>  html_task = ""<a target='_blank' href='"" + url + ""'>"" + task_title + ""</a>""<br>  return html_task <br>}",html_link_from_todoist_task,api
todoist_functions.js,complete task in todoist,"//complete task in todoist<br>function task_complete_todoist(task_name,project_id,todoist_api_token){<br>  todoist_api_token = todoist_api_token || 'a14f98a6b546b044dbb84bcd8eee47fbe3788671'<br>  return todoist_add_tasks_ajax(todoist_api_token,{""content"": task_name, ""project_id"": project_id},'item_complete')<br>}",task_complete_todoist,api
todoist_functions.js,update task in todoist,"//update task in todoist<br>function task_update_todoist(task_name,project_id,todoist_api_token){<br>  todoist_api_token = todoist_api_token || 'a14f98a6b546b044dbb84bcd8eee47fbe3788671'<br>  return todoist_add_tasks_ajax(todoist_api_token,{""content"": task_name, ""project_id"": project_id},'item_update')",task_update_todoist,api
todoist_functions.js,create task in todoist,"//create task in todoist<br>function task_create_todoist(task_name,project_id,todoist_api_token){<br>  todoist_api_token = todoist_api_token || 'a14f98a6b546b044dbb84bcd8eee47fbe3788671'<br>  return todoist_add_tasks_ajax(todoist_api_token,{""content"": task_name, ""project_id"": project_id})<br>}",task_create_todoist,api
todoist_functions.js,,"<br>function gspread_table_tasks_generate(gspread_array_data,completed_tasks,current_tasks){<br><br><br>    gspread_array_data.forEach(function(gspread_dict){<br>      filtered_completed_tasks = completed_tasks.filter(function(complete_dict){return complete_dict['content'].toLowerCase().indexOf(gspread_dict['Task'].toLowerCase()) != -1})<br>      filtered_completed_tasks_today = filtered_completed_tasks.filter(function(complete_dict){return date_range_filter(complete_dict.completed_date,'YY-MM-DD')})<br>      gspread_dict['duration_today'] = sum_float_convert_from_array(filtered_completed_tasks_today,'duration')<br>      gspread_dict['duration'] = sum_float_convert_from_array(filtered_completed_tasks,'duration')<br>      gspread_dict['completed_count'] = filtered_completed_tasks.length<br><br>      if (filtered_completed_tasks.length > 0){<br>        last_completed = _.max(filtered_completed_tasks, function(complete_dict){ return moment(complete_dict.completed_date).valueOf();}).completed_date<br>        days_since_completed = moment().diff(last_completed, 'days')<br>        gspread_dict['days_since_last_completed'] = days_since_completed<br>        gspread_dict['last_completed'] = moment(last_completed).format(""MM/DD hh:mm A"");<br>        is_good = parseFloat(gspread_dict['Max Age']) > days_since_completed<br>        if (is_good){<br>          gspread_dict['status'] = 'Green'<br>          gspread_dict['task_assigned'] = 'Green'<br><br>        }<br>        else {<br>        gspread_dict['status'] = 'Red'<br>        }<br>      }<br>      else {<br>        gspread_dict['last_completed'] = ''<br>        gspread_dict['days_since_last_completed'] = ''<br>        gspread_dict['status'] = 'N/A'<br><br>      }<br>      if (gspread_dict['status'] != 'Green'){<br><br>      filtered_current_tasks = current_tasks.filter(function(current_dict){return current_dict['content'].toLowerCase().indexOf(gspread_dict['Task'].toLowerCase()) != -1})<br>      is_assigned = filtered_current_tasks.length > 0<br>      if (is_assigned){<br>        filtered_current_tasks_with_due_date = filtered_current_tasks.filter(function(D){return D['due_date_utc'] != null})<br>        has_due_date = filtered_current_tasks_with_due_date.length > 0 <br>        if (has_due_date){<br>            gspread_dict['task_assigned'] = 'Green'<br><br>        }<br>        else {<br>            gspread_dict['task_assigned'] = 'Amber'<br><br>        }<br>      }<br><br>      else {<br>        gspread_dict['task_assigned'] = 'Red'<br><br>      }<br>    }<br><br><br>    })<br><br><br>    return gspread_array_data<br><br><br>}<br><br><br>",gspread_table_tasks_generate,api
todoist_functions.js,filter tasks for text,"//filter tasks for text<br>function task_filter_from_text(array,text){<br>  array = array.filter(function(D){return D.content.toLowerCase().indexOf(text.toLowerCase()) !== -1 })<br>  return array <br>}",task_filter_from_text,api
todoist_functions.js,filter tasks for text and return length,"//filter tasks for text and return length<br>function task_filter_text_calculate_count(array,text){<br>  array = array.filter(function(D){return D.content.toLowerCase().indexOf(text.toLowerCase()) !== -1 })<br>  length_total = array.length<br>    return length_total<br>  //$(div_id).html(length_total)<br>}",task_filter_text_calculate_count,api
todoist_functions.js,filter tasks for text and add the sum to a div,"//filter tasks for text and add the sum to a div<br>function task_filter_text_calculate_sum(array,text,sum_field){<br>  sum_field = sum_field||'duration'<br>  array = array.filter(function(D){return D.content.toLowerCase().indexOf(text.toLowerCase()) !== -1 })<br>  var sum_total = sum_float_convert_from_array_underscore(array,sum_field)<br>    return sum_total<br>}<br>",task_filter_text_calculate_sum,api
todoist_functions.js,calculate the cost of the task at 15 dollar per rate,"//calculate the cost of the task at 15 dollar per rate<br>function task_cost_calculation(item,key_name,hourly_rate){<br>  hourly_rate = hourly_rate||15<br>  key_name = key_name|| 'duration'<br>  minutes = parseFloat(item[key_name])<br>  cost = minutes * (hourly_rate/60)<br>  return cost <br>}",task_cost_calculation,api
todoist_functions.js,return the sub project by parsing it out from the colon,"//return the sub project by parsing it out from the colon<br>function sub_project_from_task(item){<br>  item_name = item.content <br>  sub_project = item_name.split("":"")[0].trim()<br>  is_sub_project = sub_project.indexOf(""|"") == -1 && sub_project.indexOf(""["") == -1  && sub_project.indexOf(""@"") == -1 <br>  if (is_sub_project){<br>    return sub_project //'-'<br>  }<br>  else {<br>    return '-'<br>  }<br>}",sub_project_from_task,api
todoist_functions.js,return duration from the task name,"//return duration from the task name<br>function duration_from_task_dictionary(item){<br>  item_name = item.content <br>  item_has_time = item_name.indexOf(""|"") != -1 && item_name.indexOf(""["") != -1 && item_name.indexOf(""]"") != -1<br>  if (item_has_time){<br>    var duration =parseInt(item_name.substring(item_name.lastIndexOf(""|"")+1,item_name.lastIndexOf(""min"")));<br>  }<br>  else {<br>    duration = 0<br>  }<br>  return duration<br>}<br>",duration_from_task_dictionary,api
todoist_functions.js,customize each dictionary of todoist task for additional attributes,"//customize each dictionary of todoist task for additional attributes<br>function tasks_array_customize_item(item){<br>  item['sub_project'] = sub_project_from_task(item)//item_name.split("":"")[0].trim()<br>  item['duration'] = duration_from_task_dictionary(item)<br>  item['cost'] = task_cost_calculation(item)<br>  item[""DT_RowId""] = item.id;<br>  return item <br>}<br>",tasks_array_customize_item,api
todoist_functions.js,https://stackoverflow.com/questions/49394588/how-to-create-todoist-task-using-todoist-api-v7,"//https://stackoverflow.com/questions/49394588/how-to-create-todoist-task-using-todoist-api-v7<br> function todoist_add_tasks_ajax(todoist_api_token,tasks,type,sync_token) {<br>  var sync_token = sync_token||""*""<br>  type = type || ""item_add""//item_update<br><br>  tasks_is_list_array = Array.isArray(tasks)<br>  if (!tasks_is_list_array){<br>    tasks = [tasks]<br>  }<br>  var commands = todoist_tasks_to_commands(tasks,type);<br>  var data = {<br>    ""token"" : todoist_api_token,<br>    'sync_token' : sync_token,<br>    'resource_types' : '[""projects"", ""items""]',<br>    'commands' : commands<br>  };<br>  <br>  return jQuery.ajax({<br>    url: ""https://todoist.com/api/v7/sync"",<br>    data: data,<br>    type: ""POST"",<br>    dataType: ""json"",<br>    success: function(response) {<br>      console.log(response);<br>      sync_token = response.sync_token;<br>    },<br>    error: function(response) { <br>      console.log(response);<br>    },<br>  });<br>  <br>}",todoist_add_tasks_ajax,api
todoist_functions.js,"commands to to doist, item_update,item_add, item_complete, item_delete","//commands to to doist, item_update,item_add, item_complete, item_delete<br>function todoist_tasks_to_commands(tasks,type) {<br>  type = type || ""item_add""//item_update<br>  var commands = [];<br>  <br>  tasks.forEach(function(args) {<br>    <br>    var temp_commands = {<br>      ""type"": type,<br>      ""temp_id"": create_guid(),<br>      ""uuid"": create_guid(),<br>      ""args"": args<br>    };<br><br>    commands.push(temp_commands)<br><br>  });<br>  <br>  commands = JSON.stringify(commands);<br>  <br>  return commands;<br>  <br>}<br>",todoist_tasks_to_commands,api
todoist_functions.js,get current tasks ,"//get current tasks <br>function todoist_current_tasks_pull(){<br> return $.ajax({<br>      type: ""GET"",<br>      url: 'https://en.todoist.com/api/v7/sync/',<br>      dataType: 'json',<br>      async: false,<br>      data: {<br>        'token': 'a14f98a6b546b044dbb84bcd8eee47fbe3788671',<br>        'sync_token':'*',<br>        'resource_types':'[""items"",""labels"",""projects""]'<br>      }<br>    }).responseJSON<br>}",todoist_current_tasks_pull,api
todoist_functions.js,get current tasks customized with project name and label name,//get current tasks customized with project name and label name<br>function todoist_current_tasks_pull_custom(){<br>  current_tasks_base = todoist_current_tasks_pull()<br>  current_tasks = current_tasks_base.items <br>  labels_dictionary = current_tasks_base.labels<br>  labels_dictionary = array_to_dictionary(labels_dictionary) <br>  projects_dictionary = current_tasks_base.projects <br>  current_tasks.forEach(function(D){tasks_array_customize_item(D)})<br>  return current_tasks<br>},todoist_current_tasks_pull_custom,api
todoist_functions.js,update tasks,"//update tasks<br>function todoist_update_task(task_id,content){<br>  return $.ajax({<br>      type: ""GET"",<br>      url: 'https://en.todoist.com/api/v7/sync/',<br>      dataType: 'json',<br>      async: false,<br>      data: {<br>        'token': 'a14f98a6b546b044dbb84bcd8eee47fbe3788671',<br>        'sync_token':'*',<br>        'resource_types':'[""items""]',<br>        'commands':'[{""type"": ""item_update"", ""uuid"": ""f8539c77-7fd7-4846-afad-3b201f0be8a5"", ""args"": {""id"": '+String(task_id)+',""content"":""'+content+'"" }}]'<br>      }<br>    })<br>}<br><br>      // ""temp_id"": create_guid(),<br>      // ""uuid"": create_guid(),",todoist_update_task,api
todoist_functions.js,completes todoist task,"//completes todoist task<br>function todoist_complete_task_v7(task_id){<br>  return $.ajax({<br>      type: ""GET"",<br>      url: 'https://en.todoist.com/api/v7/sync/',<br>      dataType: 'json',<br>      async: false,<br>      data: {<br>        'token': 'a14f98a6b546b044dbb84bcd8eee47fbe3788671',<br>        'sync_token':'*',<br>        'resource_types':'[""items""]',<br>        'commands':'[{""type"": ""item_complete"", ""uuid"": '+create_guid()+' ""args"": {""ids"": ['+String(task_id)+']}}]'<br>      }<br>    })<br>}<br>",todoist_complete_task_v7,api
todoist_functions.js,deletes todoist task,"//deletes todoist task<br>function todoist_delete_task(task_id){<br>  return $.ajax({<br>      type: ""GET"",<br>      url: 'https://en.todoist.com/api/v7/sync/',<br>      dataType: 'json',<br>      async: false,<br>      data: {<br>        'token': 'a14f98a6b546b044dbb84bcd8eee47fbe3788671',<br>        'sync_token':'*',<br>        'resource_types':'[""items""]',<br>        'commands':'[{""type"": ""item_delete"", ""uuid"": ""f8539c77-7fd7-4846-afad-3b201f0be8a5"", ""args"": {""ids"": ['+String(task_id)+']}}]'<br>      }<br>    })<br>}<br>",todoist_delete_task,api
todoist_functions.js,child function of todoist_completed_tasks_all,"//child function of todoist_completed_tasks_all<br>function todoist_completed_tasks_with_offset(todoist_api_token,offset,since) {<br>  since = since||moment().subtract(30,'days').format('YYYY-MM-DD') + ""T10:00""// '2018-05-08T10:00'//moment().subtract(60,'days').format('YYYY-MM-DD') //<br>    results = $.ajax({<br>      type: ""GET"",<br>      url: 'https://en.todoist.com/api/v7/completed/get_all',<br>      dataType: 'json',<br>      async: false,<br>      data: {<br>        'token': todoist_api_token,<br>        'since':since,<br>        //'since': '2017-12-30T10:00',<br><br>        'limit':'50',<br>        'offset':offset<br>      }<br>    });<br>    return results.responseJSON.items<br>  }<br><br><br>//Since todoist only lets you pull 50 tasks at a time, we're going to use a loop to get the first 50, then the second 50, then the third 50 tasks, etc. <br>//when it's pulling empty lists, it can stop ",todoist_completed_tasks_with_offset,api
todoist_functions.js,pulls all of todoist tasks ,"//pulls all of todoist tasks <br>function todoist_completed_tasks_all(todoist_api_token,since){<br>  todoist_api_token = todoist_api_token||""a14f98a6b546b044dbb84bcd8eee47fbe3788671""//""fea02db7fc04ee9c9bd7c2a67c3d9de1cfa57941"" //karina api token<br>  todoist_tasks_pulled = []<br>  iterator = 0 <br>  master_list = []<br>  while (todoist_tasks_pulled.length == 50|| iterator==0) { //if todoist pulls 50 tasks, then it should try again. when it pulls less, we know that it's the last loop we need to do. since the first loop will be less than 50 tasks length, i put in or clause that is iterator is 0 which will only be when it does the first loop<br>    limit_variable = 50 * iterator //this will go into the todoist completed tasks query<br>    todoist_tasks_pulled = todoist_completed_tasks_with_offset(todoist_api_token,limit_variable,since)//this is the list of tasks <br>    master_list = master_list.concat(todoist_tasks_pulled)<br>    iterator += 1; //this will be 1 in the first loop, 2 in the second loop, etc. <br>  }<br>  return master_list<br>}<br><br>",todoist_completed_tasks_all,api
todoist_functions.js,pulls all the todoist tasks and customizes each item,"//pulls all the todoist tasks and customizes each item<br>function todoist_completed_tasks_all_custom(todoist_api_token,since){<br>  l = todoist_completed_tasks_all(todoist_api_token,since)<br>  l.forEach(function(item){tasks_array_customize_item(item)})<br>  return l <br>}",todoist_completed_tasks_all_custom,api
todoist_functions.js,converts minute labels to minutes,"//converts minute labels to minutes<br>function labels_add_from_labels_dictionary(task_item,labels_dictionary){<br>  labels_list = task_item.labels<br>  label_list_is_undefined = labels_list == undefined<br>  if (label_list_is_undefined){<br>    r = 0 <br>  }<br>  try {<br>    r = 0 <br>    labels_list.forEach(function(item,index){<br>      label_dict = labels_dictionary[item]<br>      minute_number = label_dict.minute||label_minute_string_to_integer(label_dict.name)<br>      r = r + minute_number<br>    })<br>  }<br>  catch(err) {<br>    r = 0<br>  }<br><br>   task_item['duration'] = task_item['duration']||r <br>",labels_add_from_labels_dictionary,api
todoist_functions.js,,"<br>function project_name_append(item,projects_dictionary){<br>  <br>  item_project_dictionary = _.groupBy(projects_dictionary,'id')[item.project_id]<br>  if (item_project_dictionary != undefined){<br>    project_name = item_project_dictionary[0].name<br>  }<br>  else {<br>    project_name = 'null'<br>  }<br>  item['project_name'] = project_name<br>}",project_name_append,api
todoist_functions.js,get dictionary of current_tasks and completed_tasks,"//get dictionary of current_tasks and completed_tasks<br>function todoist_tasks_pull_custom(){<br>  current_tasks_base = todoist_current_tasks_pull()<br>  completed_tasks = todoist_completed_tasks_all()<br>  current_tasks = current_tasks_base.items <br>  labels_dictionary = array_to_dictionary(current_tasks_base.labels) <br>  projects_dictionary = current_tasks_base.projects <br><br><br>  current_tasks.forEach(function(D){D['task_type']='current'})<br>  current_tasks.forEach(function(D){D['task_date']=D['due_date_utc']})<br>  completed_tasks.forEach(function(D){D['task_type']='completed'})<br>  completed_tasks.forEach(function(D){D['task_date']=D['completed_date']})<br><br><br><br>  current_completed_tasks = completed_tasks.concat(current_tasks) //combine both arrays together into one array<br>  current_completed_tasks.forEach(function(item){tasks_array_customize_item(item)})<br>  current_completed_tasks.forEach(function(item){labels_add_from_labels_dictionary(item,labels_dictionary)})<br>  current_completed_tasks.forEach(function(item){project_name_append(item,projects_dictionary)})<br>  current_completed_tasks.forEach(function(item){item['task_date_range'] = date_within_range_string_create(item['task_date'])})<br><br>  array_check_keys(current_completed_tasks,['due_date_utc','priority','date_added','completed_date'])<br>  return current_completed_tasks <br>}",todoist_tasks_pull_custom,api
todoist_functions.js,calculate age from todoist,"//calculate age from todoist<br>function age_calculate_from_todoist_task(D){<br>    date_added = D.date_added<br>    a = new moment()<br>    b = new moment(date_added)<br>    age_days = a.diff(b,'days')<br>    age_days = age_days || 0<br>    return age_days<br>}",age_calculate_from_todoist_task,api
todoist_functions.js,,"<br>function gspread_array_project_id_append(gspread_array_data,projects_dictionary){<br>  project_dictionary_reference = {}<br>  projects_dictionary.forEach(function(D){project_dictionary_reference[D['name']] = D['id']})<br>  gspread_array_data.forEach(function(D){<br>    D['project_id'] = project_dictionary_reference[D['Category']] || 'null'<br>  })",gspread_array_project_id_append,api
todoist_functions.js,,"<br>function gspread_array_manual_pull(){<br>  return [<br>    {<br>        ""Category"": ""Bnb"",<br>        ""Description"": ""Pay 401 and Murano via Wells Fargo and 1806 via PayPal"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""30"",<br>        ""Sprint"": ""Recurring"",<br>        ""Task"": ""Pay Rent"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 1,<br>        ""days_since_last_completed"": 4,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/04 04:00 PM"",<br>        ""project_id"": 2159935681,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Entrepreneurship"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""90"",<br>        ""Max Age"": ""3"",<br>        ""Sprint"": ""Intense"",<br>        ""Task"": ""Aesop"",<br>        ""Type"": ""Goal"",<br>        ""completed_count"": 134,<br>        ""days_since_last_completed"": 0,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/08 08:56 PM"",<br>        ""project_id"": 2159934063,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Entrepreneurship"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""7"",<br>        ""Sprint"": ""Phone - Quick"",<br>        ""Task"": ""Ideate"",<br>        ""Type"": ""Habit"",<br>        ""completed_count"": 4,<br>        ""days_since_last_completed"": 0,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/08 07:57 PM"",<br>        ""project_id"": 2159934063,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Entrepreneurship"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""1"",<br>        ""Sprint"": ""Phone - Messages"",<br>        ""Task"": ""Check Aesop Email"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 17,<br>        ""days_since_last_completed"": 0,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/08 08:00 PM"",<br>        ""project_id"": 2159934063,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Entrepreneurship"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""2"",<br>        ""Sprint"": ""Phone - Messages"",<br>        ""Task"": ""Aesop: Correspond on Slack"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 17,<br>        ""days_since_last_completed"": 0,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/08 08:00 PM"",<br>        ""project_id"": 2159934063,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Fitness"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""90"",<br>        ""Max Age"": ""3"",<br>        ""Sprint"": ""Intense"",<br>        ""Task"": ""Exercise"",<br>        ""Type"": ""Goal"",<br>        ""completed_count"": 10,<br>        ""days_since_last_completed"": 0,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/08 11:56 PM"",<br>        ""project_id"": 2159936401,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Finance"",<br>        ""Description"": ""Capital One, Chase, Amex, Barclays Uber"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""5"",<br>        ""Sprint"": ""Phone - Quick"",<br>        ""Task"": ""Pay Credit Cards"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 6,<br>        ""days_since_last_completed"": 2,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/06 09:19 PM"",<br>        ""project_id"": 2168189199,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""14"",<br>        ""Sprint"": ""Errand"",<br>        ""Task"": ""Check Mail"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 1,<br>        ""days_since_last_completed"": 16,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""06/23 08:16 AM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Red"",<br>        ""task_assigned"": ""Amber""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""7"",<br>        ""Sprint"": ""Errand"",<br>        ""Task"": ""Clean Laptop"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 4,<br>        ""days_since_last_completed"": 0,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/08 09:02 PM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""25"",<br>        ""Max Age"": ""21"",<br>        ""Sprint"": ""Errand"",<br>        ""Task"": ""Laundry"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 2,<br>        ""days_since_last_completed"": 6,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/02 07:07 PM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""3"",<br>        ""Sprint"": ""Other"",<br>        ""Task"": ""Meditate"",<br>        ""Type"": ""Habit/Goal"",<br>        ""completed_count"": 6,<br>        ""days_since_last_completed"": 1,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/07 06:26 PM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""14"",<br>        ""Sprint"": ""Other"",<br>        ""Task"": ""Wardrobe Search"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 2,<br>        ""days_since_last_completed"": 14,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""06/24 07:32 PM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Red"",<br>        ""task_assigned"": ""Amber""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""25"",<br>        ""Max Age"": ""5"",<br>        ""Sprint"": ""Other"",<br>        ""Task"": ""Clean Room"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 6,<br>        ""days_since_last_completed"": 2,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/06 09:40 PM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""2"",<br>        ""Max Age"": ""1"",<br>        ""Sprint"": ""Phone - Messages"",<br>        ""Task"": ""Check Email"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 15,<br>        ""days_since_last_completed"": 0,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/08 07:40 PM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""2"",<br>        ""Max Age"": ""3"",<br>        ""Sprint"": ""Phone - Messages"",<br>        ""Task"": ""Update LinkedIn"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 4,<br>        ""days_since_last_completed"": 2,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/06 09:12 PM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""14"",<br>        ""Sprint"": ""Phone - Quick"",<br>        ""Task"": ""Order Food and Beverages"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 2,<br>        ""days_since_last_completed"": 13,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""06/25 07:32 PM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""2"",<br>        ""Max Age"": ""29"",<br>        ""Sprint"": ""Recurring"",<br>        ""Task"": ""Prescription Request"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 1,<br>        ""days_since_last_completed"": 14,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""06/24 07:20 PM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""45"",<br>        ""Sprint"": ""Recurring"",<br>        ""Task"": ""Order Contacts"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 1,<br>        ""days_since_last_completed"": 8,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""06/30 08:50 PM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""2"",<br>        ""Max Age"": ""90"",<br>        ""Sprint"": ""Recurring"",<br>        ""Task"": ""Get Haircut"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 1,<br>        ""days_since_last_completed"": 14,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""06/24 07:23 PM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""JP"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""30"",<br>        ""Sprint"": ""Overdone"",<br>        ""Task"": ""Zeus"",<br>        ""Type"": ""Limit"",<br>        ""completed_count"": 13,<br>        ""days_since_last_completed"": 3,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/05 02:30 PM"",<br>        ""project_id"": 2159934072,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""JP"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""30"",<br>        ""Sprint"": ""Overdone"",<br>        ""Task"": ""Testing Results"",<br>        ""Type"": ""Limit"",<br>        ""completed_count"": 10,<br>        ""days_since_last_completed"": 5,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/03 07:31 PM"",<br>        ""project_id"": 2159934072,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""JP"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""7"",<br>        ""Sprint"": ""Remember"",<br>        ""Task"": ""Clarity"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 4,<br>        ""days_since_last_completed"": 6,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/02 07:29 PM"",<br>        ""project_id"": 2159934072,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""JP"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""7"",<br>        ""Sprint"": ""Remember"",<br>        ""Task"": ""Beeline"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 4,<br>        ""days_since_last_completed"": 6,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/02 07:29 PM"",<br>        ""project_id"": 2159934072,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Life Engineering"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""20"",<br>        ""Max Age"": ""21"",<br>        ""Sprint"": ""Overdone"",<br>        ""Task"": ""Cruz Control"",<br>        ""Type"": ""Limit"",<br>        ""completed_count"": 37,<br>        ""days_since_last_completed"": 2,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/07 03:53 AM"",<br>        ""project_id"": 2160096908,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Life Engineering"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""25"",<br>        ""Max Age"": ""3"",<br>        ""Sprint"": ""Transit"",<br>        ""Task"": ""Reading"",<br>        ""Type"": ""Habit/Goal"",<br>        ""completed_count"": 3,<br>        ""days_since_last_completed"": 7,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/01 04:47 PM"",<br>        ""project_id"": 2160096908,<br>        ""status"": ""Red"",<br>        ""task_assigned"": ""Amber""<br>    },<br>    {<br>        ""Category"": ""Social"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""1"",<br>        ""Sprint"": ""Phone - Messages"",<br>        ""Task"": ""Respond to Missed Text Messages"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 11,<br>        ""days_since_last_completed"": 0,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/08 08:02 PM"",<br>        ""project_id"": 2159934103,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Social"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""10"",<br>        ""Max Age"": ""14"",<br>        ""Sprint"": ""Phone - Messages"",<br>        ""Task"": ""Friends Connect"",<br>        ""Type"": ""Habit"",<br>        ""completed_count"": 2,<br>        ""days_since_last_completed"": 6,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/02 09:26 AM"",<br>        ""project_id"": 2159934103,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Social"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""3"",<br>        ""Max Age"": ""3"",<br>        ""Sprint"": ""Phone - Messages"",<br>        ""Task"": ""Gs Reach Out"",<br>        ""Type"": ""Habit"",<br>        ""completed_count"": 6,<br>        ""days_since_last_completed"": 2,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/06 04:45 PM"",<br>        ""project_id"": 2159934103,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Social"",<br>        ""Description"": ""Check UWishuKnu, Meetup, and GroupMe"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""14"",<br>        ""Sprint"": ""Phone - Plan"",<br>        ""Task"": ""Plan Social Events"",<br>        ""Type"": ""Habit"",<br>        ""completed_count"": 3,<br>        ""days_since_last_completed"": 1,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/07 03:05 PM"",<br>        ""project_id"": 2159934103,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Social"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""2"",<br>        ""Max Age"": ""30"",<br>        ""Sprint"": ""Unimportant"",<br>        ""Task"": ""Choice Purchase"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 1,<br>        ""days_since_last_completed"": 14,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""06/24 07:34 PM"",<br>        ""project_id"": 2159934103,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Bnb"",<br>        ""Description"": ""Learn about the laws as it applies to 401 and 2116 and follow-up"",<br>        ""Estimated Duration"": ""15"",<br>        ""Max Age"": ""10"",<br>        ""Sprint"": ""Procastinate"",<br>        ""Task"": ""Landlord Legal"",<br>        ""Type"": ""Procastinating Project"",<br>        ""completed_count"": 5,<br>        ""days_since_last_completed"": 0,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/08 10:25 PM"",<br>        ""project_id"": 2159935681,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""Prioritize/Tag/Clean Tasks and Ensure Tasks have task assigned"",<br>        ""Estimated Duration"": ""3"",<br>        ""Max Age"": ""1"",<br>        ""Sprint"": ""Phone - Plan"",<br>        ""Task"": ""Clean Todoist"",<br>        ""Type"": ""Recurring"",<br>        ""completed_count"": 13,<br>        ""days_since_last_completed"": 0,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/08 07:42 PM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Life Engineering"",<br>        ""Description"": ""Schedule Day Out"",<br>        ""Estimated Duration"": ""3"",<br>        ""Max Age"": ""2"",<br>        ""Sprint"": ""Phone - Plan"",<br>        ""Task"": ""Morning Review"",<br>        ""Type"": ""Habit"",<br>        ""completed_count"": 8,<br>        ""days_since_last_completed"": 0,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/08 07:47 PM"",<br>        ""project_id"": 2160096908,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    },<br>    {<br>        ""Category"": ""Homeostasis"",<br>        ""Description"": ""-"",<br>        ""Estimated Duration"": ""5"",<br>        ""Max Age"": ""7"",<br>        ""Sprint"": ""Phone - Plan"",<br>        ""Task"": ""Plan Intake"",<br>        ""Type"": ""Goal"",<br>        ""completed_count"": 2,<br>        ""days_since_last_completed"": 0,<br>        ""duration"": 0,<br>        ""duration_today"": 0,<br>        ""last_completed"": ""07/09 01:08 AM"",<br>        ""project_id"": 2159896039,<br>        ""status"": ""Green"",<br>        ""task_assigned"": ""Green""<br>    }<br>]",gspread_array_manual_pull,api
todoist_functions.js,get dictionary of current_tasks and completed_tasks,"//get dictionary of current_tasks and completed_tasks<br>function todoist_tasks_pull_custom_gspread(){<br><br><br>  current_tasks_base = todoist_current_tasks_pull()<br>  completed_tasks = todoist_completed_tasks_all()<br>  current_tasks = current_tasks_base.items <br>  labels_dictionary = array_to_dictionary(current_tasks_base.labels) <br>  projects_dictionary = current_tasks_base.projects <br><br><br>  current_tasks.forEach(function(D){D['task_type']='current'})<br>  current_tasks.forEach(function(D){D['task_date']=D['due_date_utc']})<br>  current_tasks.forEach(function(D){D['age']=age_calculate_from_todoist_task(D)})<br><br>  completed_tasks.forEach(function(D){D['task_type']='completed'})<br>  completed_tasks.forEach(function(D){D['task_date']=D['completed_date']})<br><br><br>  sheet_name = 'Tasks'<br>  spreadsheet_id = ""1-tszr-k0KcENCI5J4LfCOybmqpLtvsijeUvfJbC9bu0""<br>  gspread_array_data = gspread_array_manual_pull()//gspread_array_pull(sheet_name,spreadsheet_id)<br><br><br><br>  <br>  gspread_array = gspread_table_tasks_generate(gspread_array_data,completed_tasks,current_tasks)<br>  gspread_array_project_id_append(gspread_array,projects_dictionary)<br><br><br>  current_completed_tasks = completed_tasks.concat(current_tasks) //combine both arrays together into one array<br>  current_completed_tasks.forEach(function(item){tasks_array_customize_item(item)})<br>  current_completed_tasks.forEach(function(item){labels_add_from_labels_dictionary(item,labels_dictionary)})<br>  current_completed_tasks.forEach(function(item){project_name_append(item,projects_dictionary)})<br>  current_completed_tasks.forEach(function(item){item['task_date_range'] = date_within_range_string_create(item['task_date'])})<br><br><br><br><br>  todoist_current = current_completed_tasks.filter(function(D){return D['task_type'] == 'current'})<br>  todoist_completed = current_completed_tasks.filter(function(D){return D['task_type'] == 'completed'})<br><br><br>  array_check_keys(current_completed_tasks,['due_date_utc','priority','date_added','completed_date','age','task_date'])<br>  return {todoist_current:todoist_current,todoist_completed:todoist_completed,todoist:current_completed_tasks,gspread:gspread_array,projects:projects_dictionary,labels:labels_dictionary}<br>}<br><br><br><br><br>",todoist_tasks_pull_custom_gspread,api
toggl_functions.js,pulls from toggl with custom fields,//pulls from toggl with custom fields<br>function toggl_data_pull_custom(since){<br>  array = toggl_data_pull(since)<br>  array.forEach(function(item){<br>    minutes  = (parseFloat(item.dur)/1000)/60<br>    cost = minutes * (15/60)<br>    item['cost'] = cost//.toFixed(2)<br>    item['minutes'] = minutes//.toFixed(2)<br>    item['hours'] = minutes/60<br>  })<br>  return array<br>}<br>,toggl_data_pull_custom,api
toggl_functions.js,,"<br>function toggl_data_pull_iterate(since,page){<br>  since = since||""2018-04-28""<br>  secret = ""api_token""<br>  key = ""a764cd7b58fea643f44ef579b606168d""<br>  json_response = $.ajax({<br>  type: ""GET"",<br>  url: ""https://toggl.com/reports/api/v2/details"",<br>  headers: {""Authorization"": ""Basic "" + btoa(key + "":"" + secret)},<br>  dataType: 'json',<br>  async: false,<br>  data: {<br>    user_agent:""kcruz29@gmail.com"",<br>    workspace_id:""246697"",<br>    since:since,<br>    page:page<br>}<br>  }).responseJSON.data<br>  return json_response<br>}<br>",toggl_data_pull_iterate,api
toggl_functions.js,,"<br>function toggl_data_pull(since){<br>since = since||""2018-04-28""<br>  todoist_tasks_pulled = []<br>  iterator = 0 <br>  master_list = []<br>  while (todoist_tasks_pulled.length == 50 || iterator==0) { //if todoist pulls 50 tasks, then it should try again. when it pulls less, we know that it's the last loop we need to do. since the first loop will be less than 50 tasks length, i put in or clause that is iterator is 0 which will only be when it does the first loop<br>    limit_variable = iterator + 1//this will go into the todoist completed tasks query<br>    todoist_tasks_pulled = toggl_data_pull_iterate(since,limit_variable)<br>    master_list = master_list.concat(todoist_tasks_pulled)<br>    iterator += 1; //this will be 1 in the first loop, 2 in the second loop, etc. <br>  }<br>  return master_list<br>}",toggl_data_pull,api
calendar_datatables_firebase.js,,"<br>function full_calendar_generate(params){<br>    <br><br>    calendar_selector = params.calendar_selector||'#calendar'<br>    calendar_date = params.calendar_date||moment().format('YYYY-MM-DD')<br><br><br>    // $(calendar_selector).fullCalendar({<br>    //   header: {<br>    //     left: 'prev,next today',<br>    //     center: 'title',<br>    //     right: 'month,agendaWeek,agendaDay,listWeek'<br>    //   },<br>    //   defaultDate: calendar_date,<br>    //   navLinks: true, // can click day/week names to navigate views<br>    //   editable: true,<br>    //   eventLimit: true, // allow ""more"" link when too many events<br>    //   events: datatables_firebase_table_generate(params).data().toArray()<br>    // });<br><br>    table = datatables_firebase_table_generate(params)<br>",full_calendar_generate,app
calendar_datatables_firebase.js,nsole.log(table.data().toArray()),"console.log(table.data().toArray())<br>function array_from_datatables_pull() {<br>  // Simulate async response<br>  return new Promise(function(resolve, reject) {<br>      while (true) {<br>        setTimeout(function(){console.log(table.data().toArray())},1000)<br>        if ( table.data().toArray().length > 0){<br>          console.log(table.data().toArray())<br>          resolve(table.data().toArray());<br><br>          break<br>        }<br>        }<br><br>        console.log('here')<br><br>  })",array_from_datatables_pull,app
calendar_datatables_firebase.js,,,calendar_create_from_array,app
calendar_datatables_firebase.js,,"<br>function calendar_create_from_array() {<br>  console.log('Calling function and waiting for result for 5secs....')<br>  let getResult = array_from_datatables_pull();<br>  console.log('Got result after 5secs', getResult)<br><br>}<br>   getResult = array_from_datatables_pull();<br><br>//calendar_create_from_array()<br><br><br>// function calendar_create_from_array() {<br>//     array_from_datatables_pull().then(function(response) {<br>//         console.log(response);<br>//     $(calendar_selector).fullCalendar({<br>//       header: {<br>//         left: 'prev,next today',<br>//         center: 'title',<br>//         right: 'month,agendaWeek,agendaDay,listWeek'<br>//       },<br>//       defaultDate: calendar_date,<br>//       navLinks: true, // can click day/week names to navigate views<br>//       editable: true,<br>//       eventLimit: true, // allow ""more"" link when too many events<br>//       events: response<br>//     });<br><br>//       })<br>// }<br><br>calendar_create_from_array();",calendar_create_from_array,app
calendar_datatables_firebase.js,,"<br>  // function create_task_promise(params) {<br>  //   return new Promise(function(resolve, reject) {<br><br>  //     //table = datatables_firebase_table_generate(params)<br>  //     if (datatables_firebase_table_generate(params).length != 0){<br>  //       resolve(table.data().toArray())<br>  //     }<br>  //   });}<br><br>  //create_task_promise(params).then(function(calendar_events) {<br> //   console.log(calendar_events)<br>    // console.log(table.data().toArray())<br><br><br>    // calendar_events = table.data().toArray()<br><br><br><br> // });<br><br><br>}<br><br>",create_task_promise,app
datatables_firebase.js,,"<br>function datatables_column_add_formatting_from_type(new_dictionary){<br>    if (new_dictionary.format == 'date'){<br>        new_dictionary.createdCell = date_time_datatable_format<br>    }<br>    if (new_dictionary.format == 'number'){<br>        new_dictionary.type = ""number-order""<br>    }<br>    if (new_dictionary.format == 'url'){<br>        new_dictionary.createdCell = url_create_datatables<br>    }<br>    if (new_dictionary.visible == 'false'){<br>        new_dictionary.visible = false<br>    }<br>    if (new_dictionary.format == 'vote'){<br>        new_dictionary.createdCell = vote_created_cell<br>    }<br>",datatables_column_add_formatting_from_type,app
datatables_firebase.js,,"<br>function datatable_column_fields_generate(custom_fields){<br>    l = []<br>    custom_fields.forEach(function(custom_field){<br>        if (typeof custom_field === ""object""){<br>            custom_field_name = custom_field['data']<br>            custom_dictionary = {data:custom_field_name, name: custom_field_name,title:custom_field_name,label: custom_field_name}<br>            new_dictionary = combine_dicts(custom_dictionary,custom_field)<br>            datatables_column_add_formatting_from_type(new_dictionary)<br>        }<br>        else {<br>            new_dictionary = {data:custom_field, name: custom_field,title:custom_field,label:custom_field}<br><br>        }<br>        l.push(new_dictionary)<br>    })<br>    console.log(l)<br>    return l<br>}",datatable_column_fields_generate,app
datatables_firebase.js,,"<br>function dataeditor_firebase_instance_generate_options(firebaseRef,row_id,params){<br><br>    row_id = row_id || 'DT_RowId'<br>    editor.on(""preSubmit"", function(e, data, action) {<br>    if (action == 'create'){<br>        console.log(data)<br>        console.log(action)<br>        items_to_add = Object.values(data.data)<br>        items_to_add.forEach(function(item){<br>        item['time_stamp'] = moment().format()<br>        item['created_time'] = moment().format()<br>        submit_attributes = params.submit_attributes||{}<br>        item = combine_dicts(item,submit_attributes)<br>        r = firebaseRef.push(item)<br>        return false<br><br>    })<br><br><br>    }<br>    })<br><br><br>    editor.on(""postSubmit"", function(e, json, data, action, xhr) {<br><br>    if (action == 'edit'){<br>        json_array = json.data;<br>        json_array.forEach(function(D) {<br>        record_id = D[row_id];<br><br>        D[""time_stamp""] = moment().format();<br>        D['modified_time'] = moment().format()<br><br>        edit_attributes = params.submit_attributes||params.edit_attributes<br>        D = combine_dicts(D,edit_attributes)<br><br>        firebaseRef.child(record_id).set(D);<br>    });<br>    }<br>    else if (action == 'remove'){<br>        items_to_delete = Object.values(data.data)<br>        items_to_delete.forEach(function(D){<br>            record_id = D[row_id];<br>            r = firebaseRef.child(record_id).remove();<br>            console.log(r)<br>        })<br><br>    }<br>    else {<br>        return false <br>        // console.log(e)<br>        // console.log(json)<br>        // console.log(data)<br>        // console.log(action)<br><br><br>",dataeditor_firebase_instance_generate_options,app
datatables_firebase.js,,"<br>function dataeditor_firebase_instance_generate(table_id,fields,firebaseRef,row_id,params){<br>    row_id = row_id || 'DT_RowId'<br>    editor = new $.fn.dataTable.Editor({<br>        table:table_id,<br>        idSrc: row_id,<br>        fields: fields<br>    });<br>    dataeditor_firebase_instance_generate_options(firebaseRef,row_id,params)<br>    return editor",dataeditor_firebase_instance_generate,app
datatables_firebase.js,,"<br>function datatable_generate(table_id,columns_list,editor,input_data){<br>    input_data = input_data || {}<br>    table_example = $(table_id).DataTable({<br>    dom: '<""html5buttons""B>lTfgitp',<br>    data: [],<br>    columns:columns_list,<br>    // columns: [<br>    // {data:'account_name',title:'Account Name',name:'Account Name',visible:true},<br>    // ],<br>    select: true,<br>    paging:false,<br>    scrollX: true,<br>    colReorder: true,<br>    buttons: [<br>    { extend: ""excel"", title: document.title },<br>    { extend: ""colvis"", title: document.title },<br>    { extend: 'create', editor: editor,text:'Create'},<br>    // { editor: editor,text:'Add',action:function () {console.log(this)} },<br>    { extend: 'remove', editor: editor },<br>    { extend: ""edit"", editor: editor },<br>    {text: 'Clear',name:'Clear', action: function ( e, dt, node, config ) {<br>        dt.columns('').search('').draw()<br>        $.fn.dataTable.ext.search = []<br>        dt.draw()<br>    }}]<br>    });<br>    return table_example<br>}",datatable_generate,app
datatables_firebase.js,,"<br>function firebase_dataeditor_table_generate_core(table_id,fields,firebaseRef,row_id,params){<br><br>    var firebaseRef = firebaseRef||dbRef.ref('drogas');<br>    table_id = table_id||""#ds_table""<br>    fields = fields||['input_text','date_time','type','within_system','DT_RowId']<br>    row_id = row_id || 'DT_RowId'<br><br><br>    new_fields = datatable_column_fields_generate(fields)<br>    editor = dataeditor_firebase_instance_generate(table_id,new_fields,firebaseRef,row_id,params)<br>    table = datatable_generate(table_id,new_fields,editor)<br><br>    firebaseRef.on(""child_added"", function(snap) {<br><br>        directory_addresses = snap.getRef().path.n<br>        id = directory_addresses[directory_addresses.length-1]<br>        firebase_dictionary = snap.val()<br>        console.log(firebase_dictionary)<br>        firebase_dictionary['DT_RowId'] = id<br>        fields_to_check = _.map(new_fields,function(D){return D['data']})<br>        key_check_func_dictionary(fields_to_check,firebase_dictionary)<br>        table.row.add(firebase_dictionary).draw(false);<br>    })<br><br><br>    return table<br>}<br>",firebase_dataeditor_table_generate_core,app
datatables_firebase.js,"datatables_firebase_table_generate({table_selector:""#table"",firebase_reference:firebase.database().ref('bug_features'),columns:['date']})","//datatables_firebase_table_generate({table_selector:""#table"",firebase_reference:firebase.database().ref('bug_features'),columns:['date']})<br>function datatables_firebase_table_generate(params){<br>    table_selector = params.table_selector||""#table""<br>    table_row_id = params.table_row_id||'DT_RowId'<br>    var firebaseRef = params.firebase_reference||firebase.database().ref('bug_features');<br>    return firebase_dataeditor_table_generate_core(table_selector,params.columns,firebaseRef,table_row_id,params)",datatables_firebase_table_generate,app
datatables_firebase.js,,"<br>function firebase_json_pull_promise_original() {<br>  return new Promise(<br>    function(resolve) {<br>      setTimeout(function() {<br>        return resolve(firebase_json_pull(""https://shippy-ac235.firebaseio.com/drogas.json""))<br>      }, 4000)<br>    },<br>    function(reject) {})<br>}",firebase_json_pull_promise_original,app
datatables_firebase.js,,"<br>function firebase_json_pull_promise() {<br>  return new Promise(<br>    function(resolve) {<br>        return resolve(firebase_json_pull(""https://shippy-ac235.firebaseio.com/drogas.json""))<br>    },<br>    function(reject) {})<br>}",firebase_json_pull_promise,app
datatables_firebase.js,,"<br>function firebase_json_pull_promise_pull(array,params) {<br>    //array = firebase_json_pull(params['firebase_url'])<br>    params = params||{}<br>    key_names = Object.keys(array[0])<br>        columns_list = []<br>        key_names.forEach(function(i){<br>        columns_list.push({data:i,title:i,name:i})<br>    })<br>    params.columns = params.columns||key_names<br>    params['table_selector'] = ""#ds_table""<br>    console.log(params)<br>    console.log('AQUI AQUI')<br>    return datatables_firebase_table_generate(params)",firebase_json_pull_promise_pull,app
datatables_firebase.js,,<br>function firebase_json_pull_promise_pull_simple(){<br>    firebase_json_pull_promise().then(function(resp) {<br>        console.log(resp)<br>        resp2 = Object.values(resp)<br>        console.log(resp2)<br>  console.log(firebase_json_pull_promise_pull(resp2))<br>}<br>  )<br>},firebase_json_pull_promise_pull_simple,app
datatables_firebase.js,,"<br>function datatables_firebase_table_generate_simple(params){<br>    //params['firebase_reference'] = firebase.database().ref('drogas')<br>    params['firebase_url'] = params['firebase_url'] ||""https://shippy-ac235.firebaseio.com/drogas.json""<br>    array = firebase_json_pull(params['firebase_url'])<br>    key_names = Object.keys(array[0])<br>        columns_list = []<br>        key_names.forEach(function(i){<br>        columns_list.push({data:i,title:i,name:i})<br>    })<br>    params.columns = params.columns||key_names<br>    return datatables_firebase_table_generate(params)<br>}<br><br><br>//datatables_firebase",datatables_firebase_table_generate_simple,app
datatables_firebase.js,"datatables_firebase({firebase_url:""https://shippy-ac235.firebaseio.com/drogas.json"", table_selector:""#table""})","//datatables_firebase({firebase_url:""https://shippy-ac235.firebaseio.com/drogas.json"", table_selector:""#table""})<br>function datatables_firebase(params){<br>    table = datatables_firebase_table_generate(params)<br>    //table = datatables_firebase_table_generate_simple(params)<br>    params.table = table<br>    return params<br>}<br><br><br><br><br><br><br>",datatables_firebase,app
firebase_array_generate.js,,"<br>function firebase_editor_initiate(table_id,fields){<br>	editor = new $.fn.dataTable.Editor({<br>		table:table_id,<br>		idSrc:  'DT_RowId',<br>		fields: editor_fields_array_from_custom_fields(fields)<br>	});<br>	editor.on(""postSubmit"", function(e, json, data, action, xhr) {<br>	if (action == 'edit'){<br>			json_array = json.data;<br>			json_array.forEach(function(D) {<br>			record_id = D[""DT_RowId""];<br>			D[""time_stamp""] = moment().format();<br>			firebaseRef.child(record_id).set(D);<br>		});	<br>	}<br>	else {<br>		items_to_add = Object.values(data.data)<br>		items_to_add.forEach(function(item){<br>		item['time_stamp'] = moment().format()<br>		r = firebaseRef.push(item)<br>	})}})<br><br>	return editor <br>}",firebase_editor_initiate,app
firebase_array_generate.js,,"<br>function firebase_generate_datatable(table_id,fields,firebaseRef){<br>	//DEFINE FIREBASE<br>	//firebase.initializeApp({databaseURL: ""https://shippy-ac235.firebaseio.com/""});<br>	//var dbRef = firebase.database();<br>	var firebaseRef = firebaseRef||dbRef.ref('drogas');<br>	table_id =  table_id||""#ds_table""<br>	fields = fields||['input_text','date_time','type','within_system','DT_RowId']<br><br>	editor = firebase_editor_initiate(table_id,fields)<br>	table = datatables_initiate_render(table_id,datatable_fields_array_from_custom_fields(fields),editor)<br><br><br>	firebaseRef.on(""child_added"", function(snap) {<br>	    directory_addresses = snap.getRef().path.n<br>	    id = directory_addresses[directory_addresses.length-1]<br>	    firebase_dictionary = snap.val()<br>	    firebase_dictionary['DT_RowId'] = id<br>	    key_check_func_dictionary(fields,firebase_dictionary)<br>	    console.log(firebase_dictionary)<br>	    table.row.add(firebase_dictionary).draw(false);<br>	})<br><br>",firebase_generate_datatable,app
firebase_array_generate.js,,"<br>function firebase_dataeditor_table_editor_instance_options(firebaseRef,row_id){<br>	<br>	row_id = row_id || 'DT_RowId'<br><br>	editor.on(""postSubmit"", function(e, json, data, action, xhr) {<br><br><br>	if (action == 'edit'){<br>	  json_array = json.data;<br>	  json_array.forEach(function(D) {<br>	    record_id = D[row_id];<br>	    D[""time_stamp""] = moment().format();<br>	    firebaseRef.child(record_id).set(D);<br>	  });	<br>	}<br>	else {<br>		items_to_add = Object.values(data.data)<br>		items_to_add.forEach(function(item){<br>			item['time_stamp'] = moment().format()<br>			r = firebaseRef.push(item)<br>			//console.log(r)<br>		})<br><br>	}});<br>",firebase_dataeditor_table_editor_instance_options,app
firebase_array_generate.js,,"<br>function firebase_dataeditor_table_editor_instance(table_id,fields,firebaseRef,row_id){<br>	row_id = row_id || 'DT_RowId'<br>	editor = new $.fn.dataTable.Editor({<br>		table:table_id,<br>		idSrc:  row_id,<br>		fields: editor_fields_array_from_custom_fields(fields)<br>	});<br><br>	firebase_dataeditor_table_editor_instance_options(firebaseRef,row_id)<br>	return editor <br>}<br>",firebase_dataeditor_table_editor_instance,app
firebase_array_generate.js,,"<br>function firebase_dataeditor_table_generate(table_id,fields,firebaseRef,row_id){<br>	//DEFINE FIREBASE<br>	//firebase.initializeApp({databaseURL: ""https://shippy-ac235.firebaseio.com/""});<br>	//var dbRef = firebase.database();<br>	var firebaseRef = firebaseRef||dbRef.ref('drogas');<br>	table_id =  table_id||""#ds_table""<br>	fields = fields||['input_text','date_time','type','within_system','DT_RowId']<br>	row_id = row_id || 'DT_RowId'<br><br>	editor = firebase_dataeditor_table_editor_instance(table_id,fields,firebaseRef,row_id)<br>	table = datatables_initiate_render(table_id,datatable_fields_array_from_custom_fields(fields),editor)<br><br><br>	firebaseRef.on(""child_added"", function(snap) {<br>	    directory_addresses = snap.getRef().path.n<br>	    id = directory_addresses[directory_addresses.length-1]<br>	    firebase_dictionary = snap.val()<br>	    firebase_dictionary['DT_RowId'] = id<br>	    key_check_func_dictionary(fields,firebase_dictionary)<br>	    console.log(firebase_dictionary)<br>	    table.row.add(firebase_dictionary).draw(false);<br>	})<br><br>",firebase_dataeditor_table_generate,app
firebase_blog.js,,"<br>function timer_instance_dictionary_load(timer_instance_dictionary,blog_selector,converter){<br>	if (timer_instance_dictionary != null){<br>		saved_content = timer_instance_dictionary.content<br>		timestamp = moment(timer_instance_dictionary.timestamp).format(""MM-DD HH:mm"")<br>		$(timer_instance_dictionary.id).find("".timestamp"").html(timestamp)<br>		//instance_blog.find("".markdown_area"").html(saved_content)<br>		$(timer_instance_dictionary.id).find("".markdown_area"").html(saved_content)<br><br>		$(timer_instance_dictionary.id).find("".text_content"").html(converter.makeHtml(saved_content))<br>		//instance_blog.find("".text_content"").html(converter.makeHtml(saved_content))<br>	}<br>	else {<br>		saved_content = '-'<br>		$(blog_selector).find("".markdown_area"").html(saved_content)<br>		$(blog_selector).find("".text_content"").html(converter.makeHtml(saved_content))<br>	}<br>",timer_instance_dictionary_load,app
firebase_blog.js,,"<br>function timer_instance_markdown_generate(blog_selector,firebase_reference,converter){",timer_instance_markdown_generate,app
firebase_blog.js,,"<br>    function set_timer_instance(input_content){<br>      firebase_reference.set({content:input_content,timestamp:moment().format(),id:blog_selector})<br>    }<br>    <br>   $(blog_selector).find("".markdown_area"").markdown({<br>	    savable:true,<br>	    onShow: function(e){<br>	        instance_blog.find("".text_content"").html(converter.makeHtml(e.getContent()))<br>	    },<br>	    onPreview: function(e) {<br>	        var originalContent = e.getContent()<br>	        instance_blog.find("".text_content"").html(converter.makeHtml(e.getContent()))<br>	        instance_blog.find("".text_content"").html(e.parseContent())<br>	        return e<br>	    },<br>	    onSave: function(e) {<br>	        $(this).closest('.ibox').find("".text_content"").html(converter.makeHtml(e.getContent()))<br>	        set_timer_instance(e.getContent())<br>	    },<br>	    onChange: function(e){},<br>	    onFocus: function(e) {},<br>	    onBlur: function(e) {}<br>    })<br><br><br>   instance_blog.find("".edit_content"").click(function(){<br>        console.log($(this))<br>        $(this).closest('.ibox').find("".markdown_edit_form"").show()<br>    }); <br>",set_timer_instance,app
firebase_blog.js,,"}<br>function load_firebase_blog(params){<br>    firebase_reference = params.firebase_reference||dbRef.ref('omni').child('omni_blog')<br>    blog_selector = params.blog_selector || ""#morning_review""<br>    var converter = params.converter||new showdown.Converter()<br><br>    firebase_reference.on('value', function(snapshot) {<br>		timer_instance_dictionary = snapshot.val()<br>		timer_instance_dictionary_load(timer_instance_dictionary,blog_selector,converter)<br>    })<br>    timer_instance_markdown_generate(blog_selector,firebase_reference,converter)<br>}<br><br>",load_firebase_blog,app
firebase_chart_update.js,,,chart_update_from_params,app
firebase_chart_update.js,line_chart_name = line_chart_name ||'Rolling Total',"  line_chart_name = line_chart_name ||'Rolling Total'<br>  function length_func(l){return l.length}<br>  calculation_func = calculation_func || length_func<br><br>  y_axis_values = []<br>  y_axis_values_secondary = []<br>  x_axis_labels = []<br>  running_total = 0<br>  counter_of_day_i_did_it = 0<br>  dates_this_month.forEach(function(item,index){<br>    item.add(1, 'day')<br>    filtered_array = completed_tasks_array.filter(function(D){return moment(D[date_key]).format(""YYYY-MM-DD"") == item.format(""YYYY-MM-DD"")})<br>    if (filtered_array.length >0){<br>      counter_of_day_i_did_it = 1 + counter_of_day_i_did_it<br>    }<br>    //console.log(filtered_array)<br>    y_axis_value = calculation_func(filtered_array)//.length<br>    //console.log(y_axis_value)<br>    y_axis_values.push(y_axis_value)<br>    running_total = running_total + y_axis_value<br>    y_axis_values_secondary.push(running_total)<br>    x_axis_labels.push(item.format(""MM-DD (ddd)""))<br>  })<br><br><br>  chart_object.data.datasets[0].data = y_axis_values<br>  chart_object.data.datasets[0].label = bar_chart_name<br>  //chart_object.data.datasets[1].data = y_axis_values_secondary<br>  //chart_object.data.datasets[1].label = line_chart_name<br>  chart_object.data.labels= x_axis_labels<br>  chart_object.update()<br>  //console.log(counter_of_day_i_did_it,dates_this_month.length)<br>  //console.log(dates_this_month)<br>  ds_percentage = String(parseFloat((counter_of_day_i_did_it / dates_this_month.length)*100).toFixed()) + ""%""<br>  //$(""#ds_percentage"").html(ds_percentage)<br><br><br>  average_per_d_time = (running_total/counter_of_day_i_did_it).toFixed(2)<br>  console.log(average_per_d_time)<br>  //$(""#average_per_d_time"").html(average_per_d_time)<br> <br>   <br><br>  return chart_object",length_func,app
firebase_chart_update.js,,<br>function firebase_chart_update(params){<br>	chart_object = params.chart_object||line_bar_chart_create('drogas_bar_chart'),firebase_chart_update,app
firebase_chart_update.js,"irebase_url = params.firebase_url||""https://shippy-ac235.firebaseio.com/drogas.json""","	firebase_url = params.firebase_url||""https://shippy-ac235.firebaseio.com/drogas.json""<br>	filter_function = params.filter_function||function(D){return D.type == 'count'}<br>  	dates = params.dates||dates_past_n_days(30)<br>",= params.filter_function||function,app
firebase_chart_update.js,	array = array.filter(filter_function),"  	array = array.filter(filter_function)<br>	calculation_function = params.calculation_function||function(l){return sum_float_convert_from_array_underscore(l,'input_text')}<br>	date_key = params.date_key||'date_time'<br>	chart_update_from_params(array,chart_object,calculation_function,dates,date_key)<br>",= params.calculation_function||function,app
firebase_chat_input.js,,"<br>function initiate_firebase_chat_bubbles_base(chatRef,parent_div,chat_id,message_content_id,message_box_id,favicon,small_chat_date,chat_title,small_chat_box_style,small_chat_style){<br>	chatRef = chatRef ||'null'<br>	parent_div = parent_div || ""#wrapper""<br>    chat_id = chat_id || ""smallchat""<br>    message_content_id = message_content_id || ""message_content""<br>    message_box_id = message_box_id || ""message_box_text""<br>    favicon = favicon || ""fa fa-comments""<br>    small_chat_date = small_chat_date || ""02.19.2015""<br>    chat_title = chat_title||""Small Chat""<br>    small_chat_box_style = small_chat_box_style || """"<br>    small_chat_style = small_chat_style||""""<br><br><br>    add_floating_chat_box(parent_div,chat_id,message_content_id,message_box_id,favicon,small_chat_date,chat_title,small_chat_box_style,small_chat_style)<br><br>	$("".message_send"").click(function(event) {<br>	  input_text = $(this).closest('.chat').find("".message_box"").val()<br>	  date_time = moment().format() //new Date()<br>	  data_to_push = {<br>	    'content': input_text,<br>	    'timestamp': date_time<br>	  }<br>	chatRef.push(data_to_push)<br>	$(this).closest('.chat').find("".message_box"").val("""")<br>	$("".message_box"").val("""")<br>	})<br><br><br>	$("".message_box"").keypress(function (e) {<br>	 var key = e.which;<br>	 if(key == 13)  // the enter key code<br>	 	<br>	 // {$("".message_send"").click();<br>	  {$(this).closest('.chat').find("".message_send"").click();<br><br>	    return false;  <br>	  }<br>	});  <br><br><br><br>chatRef.on('child_added', function(snapshot) {<br>  timer_instance_dictionary = snapshot.val()<br>  if (timer_instance_dictionary != null){<br>      saved_content = timer_instance_dictionary.content<br>      viewer= timer_instance_dictionary.viewer<br>      timestamp = moment(timer_instance_dictionary.timestamp).format(""hh:mmA"")//MM-DD <br>        message_content = '<div class=""left""> <div class=""author-name""> <small class=""chat-date""> '+ timestamp +'</small> </div> <div class=""chat-message active"">'+ saved_content + ' </div> </div>'<br>        //console.log(message_content)<br>        //message_content = '<div class=""right""> <div class=""author-name""> Aesop <small class=""chat-date""> '+ timestamp+'</small> </div> <div class=""chat-message""> '+ saved_content+ '</div> </div>'<br>        $(""#""+chat_id).closest('.chat').find("".message_content"").append(message_content)<br>        //$(""#""+message_content_id).append(message_content)<br><br>    }<br>});<br><br>}",initiate_firebase_chat_bubbles_base,app
firebase_chat_input.js,,"<br>function initiate_firebase_chat_bubbles(params){<br><br>	chatRef = params.firebase_reference||dbRef.ref('omni').child('ideas')<br>    parent_div = params.parent_div || ""#wrapper""<br>    chat_id = params.chat_id || ""smallchat""<br>    message_content_id = params.message_content_id || ""message_content""<br>    message_box_id = params.message_box_id || ""message_box_text""<br>    favicon = params.favicon || ""fa fa-comments""<br>    small_chat_date = params.small_chat_date || ""02.19.2015""<br>    chat_title = params.chat_title||""Small Chat""<br>    small_chat_box_style = params.box_style || ""right: 75px""<br>    small_chat_style = params.bubble_style||""right: 20px""<br><br>	//chatRef = dbRef.ref('omni').child('tasks')<br>	initiate_firebase_chat_bubbles_base(chatRef,parent_div,chat_id,message_content_id,message_box_id,favicon,small_chat_date,chat_title,small_chat_box_style,small_chat_style)<br><br><br><br>	// Open close small chat<br>    $('.open-small-chat').on('click', function () {<br>        $(this).children().toggleClass('fa-comments').toggleClass('fa-remove');<br>        //console.log(this)<br>        $(this).closest('.chat').find("".small-chat-box"").toggleClass('active')<br>        //$('.small-chat-box').toggleClass('active');<br>    });<br><br>    // Initialize slimscroll for small chat<br>    $('.small-chat-box .content').slimScroll({<br>        height: '234px',<br>        railOpacity: 0.4,<br>        start:'bottom'<br>    });<br><br><br>",initiate_firebase_chat_bubbles,app
firebase_snapshot.js,,"<br>function todoist_snapshot_store(){<br>	var snapshot_ref = dbRef.ref('todoist_snapshots').child('gspread_recurring_tasks').child(moment().format(""YYYYMMDD""))<br>	snapshot_ref.set(gspread_array)<br><br>	var current_snapshot_ref = dbRef.ref('todoist_snapshots').child('todoist_current_tasks').child(moment().format(""YYYYMMDD""))<br>	current_snapshot_ref.set(current_tasks)<br><br><br>}",todoist_snapshot_store,app
firebase_snapshot.js,,"<br>function todoist_gspread_pull_firebase(){<br>try{<br>    todoist_gspread_pull = todoist_tasks_pull_custom_gspread()<br>}<br>catch(err){<br>    todoist_gspread_pull = firebase_json_pull(""https://shippy-ac235.firebaseio.com/omni/snapshot.json"")<br>}<br>return todoist_gspread_pull<br><br><br>}",todoist_gspread_pull_firebase,app
intermittent_timer.js,update the html of the timer,"//update the html of the timer<br>function html_timer_update_from_jquery_intermittent(start_timer){<br>	//console.log(start_timer)<br>    time_text = time_since_start_time_moment(start_timer)<br>    //console.log(time_text)<br>    $(""#intermittent_timer"").find("".metric_text"").html(time_text)<br><br>    end_text = time_since_start_time_moment_to(moment(start_timer).add('hours',18).format())<br>    $(""#intermittent_timer"").find("".sub_title"").html(end_text)<br><br>//moment(start_timer).add('hours',18).format()<br>    $(""#intermittent_timer"").find("".sub_title"").attr('title',""Fast then: ""+moment(start_timer).add({'hours': 8}).format('YYYY-MM-DD h:mm:ssa'))<br><br><br>     $(""#intermittent_timer"").find("".metric_text"").attr('title',moment(start_timer).format('YYYY-MM-DD h:mm:ssa'))<br><br><br>    end_text_eight = time_since_start_time_moment_to(moment(start_timer).add('hours',8).format())<br>    $(""#intermittent_timer"").find("".sub_metric_text"").html(end_text_eight)<br><br><br>    $(""#intermittent_timer"").find("".sub_metric_text"").attr('title',""Eat Then: ""+moment(start_timer).add({'hours': 16}).format('YYYY-MM-DD h:mm:ssa'))<br><br><br><br>    //https://shippy-ac235.firebaseio.com/cruz_control/food2.json<br><br>}",html_timer_update_from_jquery_intermittent,app
intermittent_timer.js,,"<br>function start_intermittent_timer(){<br><br>$('#metric_headers').append(metric_header_create_label('Timer',sub_title,metric_text,sub_metric_text,'intermittent_timer'))<br>$('#metric_headers').append(metric_header_create_label('Cals',sub_title,metric_text,sub_metric_text,'calorie_counter'))<br><br><br>var firebaseRef = dbRef.ref('cruz_control').child('food2');<br>l = firebase_json_pull(""https://shippy-ac235.firebaseio.com/cruz_control/food2.json"")<br>console.log(l)<br><br><br>     filtered_array = Object.values(l).filter(function(D){return moment(D['time_stamp']) > moment().subtract(24, 'hours')})<br><br>calories = sum_float_convert_from_array_underscore(filtered_array,'comment')<br>    $(""#calorie_counter"").find("".metric_text"").html(calories)<br><br><br>max_dict = max_date_from_array_underscore(l,'time_stamp')<br>console.log(max_dict)<br>console.log('here')<br>console.log(max_dict['time_stamp'])<br><br>setInterval(html_timer_update_from_jquery_intermittent,1000,max_dict['time_stamp'])<br>//html_timer_update_from_jquery_intermittent(max_dict['time_stamp'])<br><br><br><br>}<br><br><br>//",start_intermittent_timer,app
timer.js,update the html of the timer,"//update the html of the timer<br>function html_timer_update_from_jquery(timer_instance_dictionary){<br>    time_text = time_since_start_time_moment(timer_instance_dictionary.start_time)<br>    $(""#timer_text"").html(time_text)<br>    $(""#task_content"").html(html_link_from_todoist_task(task_content,timer_instance_dictionary.id))<br>    document.title = time_text<br>}<br>",html_timer_update_from_jquery,app
timer.js,ispecific to todoist on updating page for omni.html,"//ispecific to todoist on updating page for omni.html<br>function timer_instance_page_initiate(timer_instance_dictionary){<br>    $(""#input_text"").attr('task_id',timer_instance_dictionary.id)<br>    $(""#input_text"").val(timer_instance_dictionary.content)<br>    return setInterval(html_timer_update_from_jquery,1000,timer_instance_dictionary)<br>}",timer_instance_page_initiate,app
timer.js,"if timer instances exists, add certain tactions to the timer","//if timer instances exists, add certain tactions to the timer<br>function timer_instance_exists_process(timer_instance_dictionary,timer_instance){<br>    $(""#input_text"").attr('task_id',timer_instance_dictionary.id)<br>    $(""#input_text"").val(timer_instance_dictionary.content)<br>    var my_interval_timer = setInterval(html_timer_update_from_jquery,1000,timer_instance_dictionary)<br>    console.log(my_interval_timer)<br>	   //timer_instance_interval = timer_instance_page_initiate(timer_instance_dictionary)<br>        $(""#input_update"").click(function(event) {<br>            event.preventDefault()<br>            html_timer = time_interval_string_format_from_start_time(timer_instance_dictionary.start_time)<br>            todoist_update_task(timer_instance_dictionary.id,$(""#input_text"").val() + html_timer)<br>            timer_instance_dictionary['content'] = $(""#input_text"").val() <br>            timer_instance.set(timer_instance_dictionary)<br>        })<br>        $(""#input_complete"").click(function(event) {<br>            input_text = $(""#input_text"").val()<br>            //$(""#input_update"").click();<br>            event.preventDefault()<br>            html_timer = time_interval_string_format_from_start_time(timer_instance_dictionary.start_time)<br>            <br>            if (input_text != '' && input_text != undefined){<br>                timer_instance_dictionary['new_task_name'] = input_text + html_timer<br>                console.log(timer_instance_dictionary)<br>                r = $.ajax({<br>                  type: ""POST"",<br>                  data:timer_instance_dictionary,<br>                  url: ""https://hooks.zapier.com/hooks/catch/229795/k1jh44/"",<br>                })<br>                console.log(r)      <br>            }<br>            else {<br>                alert('input text is blank')<br>            }<br><br><br>            //todoist_complete_task(String(timer_instance_dictionary.id))<br>            timer_instance.set({})<br>            clearInterval(my_interval_timer)<br>            $(""#input_text"").val("""")<br>            <br><br>        })<br><br>        $(""#input_delete"").click(function(event) {<br>            event.preventDefault()<br>            todoist_delete_task(timer_instance_dictionary.id)<br>            timer_instance.set({})<br>            clearInterval(my_interval_timer)<br>        })<br>}",timer_instance_exists_process,app
timer.js,creates timer for omni.html,"//creates timer for omni.html<br>function add_dropdown_item_todoist_app(title_text,id){<br>    title_text = title_text||""hello_world 2""<br>    var outer_div = $(""<li>"", {});<br>    var link_elem = $(""<a>"", {""href"": ""#"",""id"":id,""class"":""favicon_select""}).text(title_text)<br>    var final_div = outer_div.append(link_elem)<br>    $(""#favicon_dropdown_menu"").append(final_div)<br>    return final_div<br>}",add_dropdown_item_todoist_app,app
timer.js,for omni.html ,"//for omni.html <br>function create_project_dropdown_list(projects_dictionary){<br>    projects_dictionary.forEach(function(D){<br>        add_dropdown_item_todoist_app(D['name'],D['id'])<br>    })  <br>    $('.favicon_select').on('click', function (e) {<br>    $(""#favicon_select_button"").html($(this))<br>})<br><br>}",create_project_dropdown_list,app
todoist_gspread_table.js,,,percentage_complete_metric_generate,app
todoist_gspread_table.js,remaining tasks populate,"//remaining tasks populate<br>function remaining_tasks_populate(gspread_array){<br>    editor = new $.fn.dataTable.Editor({<br>      table: ""#remaining_tasks_table"",<br>      idSrc:  'Task',<br>      fields: [{ label: ""Task:"", name: ""Task"" },{ label: ""project_id:"", name: ""project_id"" }]<br>    });<br><br><br>    editor.on(""postSubmit"", function(e, json, data, action, xhr) {<br>      console.log(json)<br>      console.log(action)<br>      console.log(e)<br>        items_to_delete = Object.values(data.data)<br>        console.log(items_to_delete)<br>        items_to_delete.forEach(function(todoist_dictionary){<br>          console.log(todoist_dictionary)<br>              task_create_todoist(todoist_dictionary.Task,todoist_dictionary.project_id)<br><br>   <br><br>        })<br><br>    });<br><br>    dt = $(""#remaining_tasks_table"").DataTable({<br>    paging: false,<br>    dom: '<""html5buttons""B>lTfgitp',<br>    data: gspread_array,<br>    scrollY:""200px"",<br>    columns:[<br>    {data:'Task',title:'Task',name:'Task'},<br>    {data:'Estimated Duration',title:'Estimated Duration',name:'Estimated Duration',visible:false},<br>    {data:'status',title:'status',name:'status',visible:false},<br>    {data:'task_assigned',title:'task_assigned',name:'task_assigned',visible:false},<br>    {data:'Category',title:'Category',name:'Category',visible:false},<br>    {data:'project_id',title:'project_id',name:'project_id',visible:false}<br>    ],<br>    select: true,<br>    colReorder: true,<br>    buttons: [<br>    { extend: ""excel"", title: document.title },<br>    { extend: ""colvis"", title: document.title },<br>    { extend: ""edit"", editor: editor },<br><br><br>    {text: 'Not Assigned',name:'Not Assigned', action: function ( e, dt, node, config ) {<br>          dt.columns('task_assigned:name').search('Red').draw()<br>        }},<br>     {text: 'Red',name:'Red', action: function ( e, dt, node, config ) {<br>          dt.columns('status:name').search('Red').draw()<br>        }},<br>     {text: 'Clear',name:'Clear', action: function ( e, dt, node, config ) {<br>          dt.columns('').search('').draw()<br>        }}, <br>    ],<br>    order: [1, ""asc""]<br>    });<br>    dt.columns('status:name').search('^((?!Green).)*$',true,false).draw()",remaining_tasks_populate,app
todoist_progress_bars.js,,,update_progress,app
todoist_progress_bars.js,,"<br>function progress_bar_table_formulate(table_id){<br>	var firebaseRef = dbRef.ref('cruz_control').child('progress');<br>	fields = ['name','multiplier','description','percentage']<br>	table_id =  table_id||""#progress_table""<br><br>	editor = new $.fn.dataTable.Editor({<br>	  table:table_id,<br>	  idSrc:  'DT_RowId',<br>	  fields: editor_fields_array_from_custom_fields(fields)<br>	});<br><br>	editor.on(""postSubmit"", function(e, json, data, action, xhr) {<br><br><br>		if (action == 'edit'){<br>		  json_array = json.data;<br>		  json_array.forEach(function(D) {<br>		    record_id = D[""DT_RowId""];<br>		    D[""time_stamp""] = moment().format();<br>		    firebaseRef.child(record_id).set(D);<br>		  });	<br>		}<br>		else {<br>			items_to_add = Object.values(data.data)<br>			items_to_add.forEach(function(item){<br>				item['time_stamp'] = moment().format()<br>				r = firebaseRef.push(item)<br>				//console.log(r)<br>			})<br><br>	}});<br><br><br>	table = $(table_id).DataTable({<br>            paging:false,<br>            dom: '<""html5buttons""B>lTfgitp',<br>            data: [],<br>            columns: [<br>                {data:'name',title:'name',visible:true,name:'name',createdCell: bar_create_datatable_cell,className:'progress_metric_measure'},<br>                {data:'multiplier',title:'multiplier',visible:false,name:'multiplier'},<br>                {data:'description',title:'description',visible:false,name:'description'},<br>                {data:'time_stamp',title:'time_stamp',visible:false,name:'time_stamp'},<br>                {data:'DT_RowId',title:'DT_RowId',visible:false,name:'DT_RowId'}<br>            ],<br>            select: true,<br>            colReorder: true,<br>            buttons: [<br>                { extend: ""excel"", title: document.title },<br>                { extend: ""colvis"", title: document.title },<br>        		{ extend: 'create', editor: editor },<br>                { extend: ""edit"", editor: editor },<br>                {text: 'Progress',name:'Progress', action: function ( e, dt, node, config ) {<br>                  update_progress()<br>                }},<br><br>                //update_progress<br>                {text: 'Clear',name:'Clear', action: function ( e, dt, node, config ) {<br>                  dt.columns('').search('').draw()<br>                }}]<br>        });<br><br><br>	firebaseRef.on(""child_added"", function(snap) {<br>	    directory_addresses = snap.getRef().path.n<br>	    id = directory_addresses[directory_addresses.length-1]<br>	    firebase_dictionary = snap.val()<br>	    firebase_dictionary['DT_RowId'] = id<br>	    table.row.add(firebase_dictionary).draw(false);<br>	})<br><br>",progress_bar_table_formulate,app
todoist_table.js,,"<br>function header_metrics_create_todoist(){<br>  sub_title = '-'<br>  metric_text = '-'<br>  sub_metric_text = '-'<br>  id = 'null'<br>  // $('#metric_headers').append(metric_header_create('Tasks Completed',sub_title,metric_text,sub_metric_text,'tasks_completed_number'))<br>  // $('#metric_headers').append(metric_header_create('Tasks Number',sub_title,metric_text,sub_metric_text,'tasks_current_number'))<br>  // $('#metric_headers').append(metric_header_create('Average',sub_title,metric_text,sub_metric_text,'tasks_age'))<br><br>  $('#metric_headers').append(metric_header_create_label('Tasks Completed',sub_title,metric_text,sub_metric_text,'tasks_completed_number'))<br>  $('#metric_headers').append(metric_header_create_label('Tasks Number',sub_title,metric_text,sub_metric_text,'tasks_current_number'))<br>  $('#metric_headers').append(metric_header_create_label('Age',sub_title,metric_text,sub_metric_text,'tasks_age'))<br><br><br><br><br>}",header_metrics_create_todoist,app
todoist_table.js,,"<br>function percentage_sub_text(id,total_tasks,total_goal_tasks){<br>  id = id || ""#tasks_current_number""<br>  total_tasks = total_tasks || 5<br>  total_goal_tasks = total_goal_tasks || 10<br><br>  percentage_to_goal = total_tasks/total_goal_tasks<br>  percentage_text = (percentage_to_goal * 100).toFixed(1) + ""%""<br>  num_denominator = total_tasks + ""/"" + total_goal_tasks<br><br>  $(id).find("".sub_metric_text"").html(num_denominator+""|""+percentage_text)<br>  add_percentage_label_html(id,percentage_to_goal)<br><br>  label_object = $(id).find("".sub_metric_text"")<br><br>  if (percentage_to_goal <= 1){<br>    add_remove_labels(label_object,'green')<br>  }<br>  else if (percentage_to_goal <= 5){<br>    add_remove_labels(label_object,'amber')<br>  }<br>  else {<br>    add_remove_labels(label_object,'red')<br>  }<br>",percentage_sub_text,app
todoist_table.js,,"<br>function current_tasks_call_back(callback_array){<br>  total_count = callback_array.length<br><br>  task_dates = Object.keys(_.groupBy(callback_array,function(D){return moment(D['task_date']).format(""MM/DD/YY"")})).length <br><br>  // max_date = max_date_from_array_underscore(callback_array)['task_date']<br>  // min_date = min_date_from_array_underscore(callback_array)['task_date']<br>  // dates_between = dates_between_dates_moment(min_date,max_date)<br>  // days = dates_between.length<br>  $('#tasks_current_number').find("".metric_text"").html(total_count)<br>  $('#tasks_current_number').find("".sub_title"").html(task_dates + "" Days"")<br>  goal_number = 20<br><br>  task_age = (sum_float_convert_from_array_underscore(callback_array,'age')/callback_array.length).toFixed(1) <br>  percentage_sub_text('#tasks_age',task_age,3)<br>  $('#tasks_age').find("".metric_text"").html(task_age)<br><br><br>  percentage_sub_text('#tasks_current_number',total_count,goal_number)<br><br><br>  // var sum_total = sum_float_convert_from_array_underscore(callback_array,'duration')<br>  // $("".""+'Total').find("".metric_text"").html(sum_total)",current_tasks_call_back,app
todoist_table.js,,"<br>function add_percentage_label_html(id,percentage_to_goal){<br>  id = id||'#tasks_completed_number'<br>  percentage_to_goal = percentage_to_goal||.5<br>  label_object = $(id).find("".sub_metric_text"")<br>  .4 < percentage_to_goal && add_remove_labels(label_object,'red');<br>  .7 < percentage_to_goal && add_remove_labels(label_object,'amber');<br>  .9 < percentage_to_goal && add_remove_labels(label_object,'green');<br>",add_percentage_label_html,app
todoist_table.js,,"<br>function measure_progress_bars(callback_array,progress_table){<br>    $(""td.progress_metric_measure"").each(function(e) {<br>      row_data = progress_table.row(this).data();<br>      task_dates = Object.keys(_.groupBy(callback_array,function(D){return moment(D['task_date']).format(""MM/DD/YY"")})).length <br><br>      multiplier = parseFloat(row_data.multiplier)||0<br>      duration = array_filter_from_text_sum(callback_array,row_data[""name""],[""content"",""project_name""],""duration"")<br>      denom = (task_dates * multiplier)<br>      percentage = (duration/denom) * 100<br>      percentage_text = percentage.toFixed(2)   + ""%"" + "" "" + String(duration) + ""/"" + denom<br><br>      $(this).find("".percentage_text"").html(percentage_text)<br>      $(this).find("".progress-bar"").attr(""style"",""width:"" + String(percentage) + ""%"")<br>",measure_progress_bars,app
todoist_table.js,,"}<br>function completed_tasks_call_back(callback_array){<br>  task_dates = Object.keys(_.groupBy(callback_array,function(D){return moment(D['task_date']).format(""MM/DD/YY"")})).length <br><br>  // try {<br>  // console.log(progress_table)<br>  // if (progress_table.rows().length > 0){<br><br>  //     measure_progress_bars(callback_array,progress_table)<br><br><br>  // }<br><br>  // }<br>  // catch(err){<br>  //   console.log(err)<br>  // }<br><br><br><br><br>  total_tasks = callback_array.length<br>  $('#tasks_completed_number').find("".metric_text"").html(total_tasks)<br><br><br>  //$('#tasks_completed_number').find("".sub_title"").html(task_dates + "" Days"")<br><br>  average_tasks = (total_tasks/task_dates).toFixed(1)<br>  goal_task_per_day = 15<br>  total_goal_tasks = goal_task_per_day * task_dates<br>  percentage_to_goal = total_tasks/total_goal_tasks<br><br>  percentage_text = (percentage_to_goal * 100).toFixed(1) + ""%""<br>  num_denominator = total_tasks + ""/"" + total_goal_tasks<br><br>  $('#tasks_completed_number').find("".sub_metric_text"").html(num_denominator+""|""+percentage_text+""|""+average_tasks + "" Avg"")<br>  // label_object = $('#tasks_completed_number').find("".sub_metric_text"")<br>  // .4 < percentage_to_goal && add_remove_labels(label_object,'red');<br>  // .7 < percentage_to_goal && add_remove_labels(label_object,'amber');<br>  // .9 < percentage_to_goal && add_remove_labels(label_object,'green');<br><br>  add_percentage_label_html('#tasks_completed_number',percentage_to_goal)<br><br><br>  // var sum_total = sum_float_convert_from_array_underscore(callback_array,'duration')<br>  // $("".""+'Total').find("".metric_text"").html(sum_total)<br>}<br><br>",completed_tasks_call_back,app
todoist_table.js,,"<br>function todoist_table_create_current(array,table_id,metric_headers_update_list){<br>    $.fn.dataTable.ext.type.order[""date-format-moment-pre""] = function(d) {<br>      r = moment(d).utc();<br>      return r;<br>    };",todoist_table_create_current,app
todoist_table.js,,"<br>    function array_dictionary_customize(item, index) {<br>      item[""DT_RowId""] = item.id;<br>    }<br><br>    array.forEach(array_dictionary_customize);<br>    array = firebase_array_integrate(array,""https://shippy-ac235.firebaseio.com/omni/""+omni_node+"".json"",""DT_RowId"",['status','notes'])<br><br>    editor = new $.fn.dataTable.Editor({<br>      table: table_id,<br>      fields: [{ label: ""status:"", name: ""status"" },{ label: ""notes:"", name: ""notes"" }]<br>    });<br><br>    editor.on(""postSubmit"", function(e, json, data, action, xhr) {<br>      if (action == 'remove'){<br>        items_to_delete = Object.values(data.data)<br>        items_to_delete.forEach(function(todoist_dictionary){<br>              todoist_delete_task(todoist_dictionary.id)<br><br>          //   {<br>          //     ""day_order"": -1,<br>          //     ""assigned_by_uid"": 14054638,<br>          //     ""is_archived"": 0,<br>          //     ""labels"": [],<br>          //     ""sync_id"": 2686100363,<br>          //     ""date_completed"": null,<br>          //     ""all_day"": false,<br>          //     ""in_history"": 0,<br>          //     ""date_added"": ""Sat 09 Jun 2018 23:51:25 +0000"",<br>          //     ""indent"": 1,<br>          //     ""date_lang"": null,<br>          //     ""id"": 2686100363,<br>          //     ""priority"": 1,<br>          //     ""checked"": 0,<br>          //     ""user_id"": 14054638,<br>          //     ""due_date_utc"": ""null"",<br>          //     ""content"": ""test3"",<br>          //     ""parent_id"": null,<br>          //     ""item_order"": 44,<br>          //     ""is_deleted"": 0,<br>          //     ""responsible_uid"": null,<br>          //     ""project_id"": 2159935681,<br>          //     ""collapsed"": 0,<br>          //     ""date_string"": null,<br>          //     ""task_type"": ""current"",<br>          //     ""task_date"": ""null"",<br>          //     ""age"": 5,<br>          //     ""sub_project"": ""test3"",<br>          //     ""duration"": 0,<br>          //     ""cost"": 0,<br>          //     ""DT_RowId"": 2686100363,<br>          //     ""project_name"": ""Bnb"",<br>          //     ""task_date_range"": """",<br>          //     ""completed_date"": ""null"",<br>          //     ""status"": ""null"",<br>          //     ""notes"": ""null""<br>          // }<br><br>        })<br>      }<br>      else {<br>        json_array = json.data;<br>        json_array.forEach(function(D) {<br>          record_id = D[""DT_RowId""];<br>          D[""timestamp""] = moment().format();<br>          FirebaseRef.child(record_id).set(D);<br>        });<br>      }<br>    });",array_dictionary_customize,app
todoist_table.js,"  //based on filter from table , update a funciton","    //based on filter from table , update a funciton<br>    function callback_function() {<br>      var api = this.api();<br>      callback_array = api.rows({ page: ""current"" }).data();<br>      metric_headers_update_list(callback_array)<br>    }<br>    columns = [<br>        {<br>          data: ""content"",<br>          title: ""content"",<br>          visible: true,<br>          name: ""content""<br>        },<br>        {<br>          data: ""project_name"",<br>          title: ""project_name"",<br>          visible: true,<br>          name: ""project_name""<br>        },<br>        {<br>          data: ""duration"",<br>          title: ""duration"",<br>          visible: true,<br>          name: ""duration"",<br>          type:""number-order""<br>        },<br>        {<br>          data: ""age"",<br>          title: ""age"",<br>          visible: true,<br>          name: ""age"",<br>          type: ""number-order""<br>        },<br>        {<br>          data: ""sub_project"",<br>          title: ""sub_project"",<br>          visible: false,<br>          name: ""sub_project""<br>        },<br>        {<br>          data: ""status"",<br>          title: ""status"",<br>          visible: false,<br>          name: ""status""<br>        },<br>        {<br>          data: ""notes"",<br>          title: ""notes"",<br>          visible: false,<br>          name: ""notes""<br>        },<br>        {<br>          data: ""task_date"",<br>          title: ""task_date"",<br>          visible: false,<br>          name: ""task_date"",<br>          createdCell: date_format_with_day,<br>          type: ""date-format-moment""<br>        },<br>        {<br>          data: ""task_date_range"",<br>          title: ""task_date_range"",<br>          visible: false,<br>          name: ""task_date_range""<br>        },<br>         {<br>          data: ""task_type"",<br>          title: ""task_type"",<br>          visible: false,<br>          name: ""task_type""<br>        }<br>      ]<br>    table = $(table_id).DataTable({<br>      paging: false,<br>      dom: '<""html5buttons""B>lTfgitp',<br>      data: array,<br>      columns: columns,<br>      select: true,<br>      colReorder: true,<br>      drawCallback: callback_function,<br>      buttons: [<br>        { extend: ""excel"", title: document.title },<br>        { extend: ""colvis"", title: document.title },<br>        { extend: ""edit"", editor: editor },<br>        { extend: ""remove"", editor: editor },<br>        {text: 'Clear',name:'Clear', action: function ( e, dt, node, config ) {<br>          dt.columns('').search('').draw()<br>        }},<br>         {text: 'Current',name:'Current', action: function ( e, dt, node, config ) {<br>          dt.columns('task_type:name').search('current').draw()<br>        }},<br>          {text: 'Complete',name:'Complete', action: function ( e, dt, node, config ) {<br>          dt.columns('task_type:name').search('complete').draw()<br>        }},<br>        {text: 'Today',name:'Today', action: function ( e, dt, node, config ) {<br>          dt.columns('task_date_range:name').search('today').draw()<br>        }},<br>        {text: 'This Week',name:'This Week', action: function ( e, dt, node, config ) {<br>          dt.columns('task_date_range:name').search('this_week').draw()<br>        }},<br>         {text: 'This Month',name:'This Month', action: function ( e, dt, node, config ) {<br>          dt.columns('task_date_range:name').search('this_month').draw()<br>        }},<br>        {text: 'This Year',name:'This Year', action: function ( e, dt, node, config ) {<br>          dt.columns('task_date_range:name').search('this_year').draw()<br>        }}<br>      ],<br>      order: [3, ""desc""]<br>    });<br>    column_header_filterable_autocomplete_apply(table,columns.length)<br><br>    return table <br>}<br>",callback_function,app
todoist_table.js,,,todoist_table_create_complete,app
todoist_table.js,,"<br>    function array_dictionary_customize(item, index) {<br>      item[""DT_RowId""] = item.id;<br>    }<br><br>    array.forEach(array_dictionary_customize);<br>    array = firebase_array_integrate(array,""https://shippy-ac235.firebaseio.com/omni/""+omni_node+"".json"",""DT_RowId"",['status','notes'])<br><br>    editor = new $.fn.dataTable.Editor({<br>      table: table_id,<br>      fields: [{ label: ""status:"", name: ""status"" },{ label: ""notes:"", name: ""notes"" }]<br>    });<br><br>    editor.on(""postSubmit"", function(e, json, data, action, xhr) {<br>      if (action == 'remove'){<br>        items_to_delete = Object.values(data.data)<br>        items_to_delete.forEach(function(todoist_dictionary){<br>              todoist_delete_task(todoist_dictionary.id)<br><br>          //   {<br>          //     ""day_order"": -1,<br>          //     ""assigned_by_uid"": 14054638,<br>          //     ""is_archived"": 0,<br>          //     ""labels"": [],<br>          //     ""sync_id"": 2686100363,<br>          //     ""date_completed"": null,<br>          //     ""all_day"": false,<br>          //     ""in_history"": 0,<br>          //     ""date_added"": ""Sat 09 Jun 2018 23:51:25 +0000"",<br>          //     ""indent"": 1,<br>          //     ""date_lang"": null,<br>          //     ""id"": 2686100363,<br>          //     ""priority"": 1,<br>          //     ""checked"": 0,<br>          //     ""user_id"": 14054638,<br>          //     ""due_date_utc"": ""null"",<br>          //     ""content"": ""test3"",<br>          //     ""parent_id"": null,<br>          //     ""item_order"": 44,<br>          //     ""is_deleted"": 0,<br>          //     ""responsible_uid"": null,<br>          //     ""project_id"": 2159935681,<br>          //     ""collapsed"": 0,<br>          //     ""date_string"": null,<br>          //     ""task_type"": ""current"",<br>          //     ""task_date"": ""null"",<br>          //     ""age"": 5,<br>          //     ""sub_project"": ""test3"",<br>          //     ""duration"": 0,<br>          //     ""cost"": 0,<br>          //     ""DT_RowId"": 2686100363,<br>          //     ""project_name"": ""Bnb"",<br>          //     ""task_date_range"": """",<br>          //     ""completed_date"": ""null"",<br>          //     ""status"": ""null"",<br>          //     ""notes"": ""null""<br>          // }<br><br>        })<br>      }<br>      else {<br>        json_array = json.data;<br>        json_array.forEach(function(D) {<br>          record_id = D[""DT_RowId""];<br>          D[""timestamp""] = moment().format();<br>          FirebaseRef.child(record_id).set(D);<br>        });<br>      }<br>    });",array_dictionary_customize,app
todoist_table.js,"  //based on filter from table , update a funciton","    //based on filter from table , update a funciton<br>    function callback_function() {<br>      var api = this.api();<br>      callback_array = api.rows({ page: ""current"" }).data();<br>      metric_headers_update_list(callback_array)<br>    }<br>    columns = [<br>        {<br>          data: ""content"",<br>          title: ""content"",<br>          visible: true,<br>          name: ""content""<br>        },<br>        {<br>          data: ""project_name"",<br>          title: ""project_name"",<br>          visible: true,<br>          name: ""project_name""<br>        },<br>        {<br>          data: ""duration"",<br>          title: ""duration"",<br>          visible: true,<br>          name: ""duration"",<br>          type:""number-order""<br>        },<br>        {<br>          data: ""age"",<br>          title: ""age"",<br>          visible: true,<br>          name: ""age"",<br>          type: ""number-order""<br>        },<br>        {<br>          data: ""sub_project"",<br>          title: ""sub_project"",<br>          visible: false,<br>          name: ""sub_project""<br>        },<br>        {<br>          data: ""status"",<br>          title: ""status"",<br>          visible: false,<br>          name: ""status""<br>        },<br>        {<br>          data: ""notes"",<br>          title: ""notes"",<br>          visible: false,<br>          name: ""notes""<br>        },<br>        {<br>          data: ""task_date"",<br>          title: ""task_date"",<br>          visible: false,<br>          name: ""task_date"",<br>          createdCell: date_format_with_day,<br>          type: ""date-format-moment""<br>        },<br>        {<br>          data: ""task_date_range"",<br>          title: ""task_date_range"",<br>          visible: false,<br>          name: ""task_date_range""<br>        },<br>         {<br>          data: ""task_type"",<br>          title: ""task_type"",<br>          visible: false,<br>          name: ""task_type""<br>        }<br>      ]<br>    table = $(table_id).DataTable({<br>      paging: false,<br>      dom: '<""html5buttons""B>lTfgitp',<br>      data: array,<br>      columns: columns,<br>      select: true,<br>      colReorder: true,<br>      drawCallback: callback_function,<br>      buttons: [<br>        { extend: ""excel"", title: document.title },<br>        { extend: ""colvis"", title: document.title },<br>        { extend: ""edit"", editor: editor },<br>        { extend: ""remove"", editor: editor },<br>        {text: 'Clear',name:'Clear', action: function ( e, dt, node, config ) {<br>          dt.columns('').search('').draw()<br>        }},<br>         {text: 'Current',name:'Current', action: function ( e, dt, node, config ) {<br>          dt.columns('task_type:name').search('current').draw()<br>        }},<br>          {text: 'Complete',name:'Complete', action: function ( e, dt, node, config ) {<br>          dt.columns('task_type:name').search('complete').draw()<br>        }},<br>        {text: 'Today',name:'Today', action: function ( e, dt, node, config ) {<br>          dt.columns('task_date_range:name').search('today').draw()<br>        }},<br>        {text: 'This Week',name:'This Week', action: function ( e, dt, node, config ) {<br>          dt.columns('task_date_range:name').search('this_week').draw()<br>        }},<br>         {text: 'This Month',name:'This Month', action: function ( e, dt, node, config ) {<br>          dt.columns('task_date_range:name').search('this_month').draw()<br>        }},<br>        {text: 'This Year',name:'This Year', action: function ( e, dt, node, config ) {<br>          dt.columns('task_date_range:name').search('this_year').draw()<br>        }}<br>      ],<br>      order: [3, ""desc""]<br>    });<br>    column_header_filterable_autocomplete_apply(table,columns.length)<br><br>    return table <br>}<br><br><br><br>function todoist_table_create_complete(array,table_id,metric_headers_update_list){<br>    $.fn.dataTable.ext.type.order[""date-format-moment-pre""] = function(d) {<br>      r = moment(d).utc();<br>      return r;<br>    };<br><br><br>    function array_dictionary_customize(item, index) {<br>      item[""DT_RowId""] = item.id;<br>    }<br><br>    array.forEach(array_dictionary_customize);<br>    array = firebase_array_integrate(array,""https://shippy-ac235.firebaseio.com/omni/""+omni_node+"".json"",""DT_RowId"",['status','notes'])<br><br>    editor = new $.fn.dataTable.Editor({<br>      table: table_id,<br>      fields: [{ label: ""status:"", name: ""status"" },{ label: ""notes:"", name: ""notes"" }]<br>    });<br><br>    editor.on(""postSubmit"", function(e, json, data, action, xhr) {<br>      json_array = json.data;<br>      json_array.forEach(function(D) {<br>        record_id = D[""DT_RowId""];<br>        D[""timestamp""] = moment().format();<br>        FirebaseRef.child(record_id).set(D);<br>      });<br>    });<br><br>    //based on filter from table , update a funciton<br>    function callback_function() {<br>      var api = this.api();<br>      callback_array = api.rows({ page: ""current"" }).data();<br>      metric_headers_update_list(callback_array)<br>    }<br><br>    table = $(table_id).DataTable({<br>      paging: false,<br>      dom: '<""html5buttons""B>lTfgitp',<br>      data: array,<br>      columns: [<br>        {<br>          data: ""content"",<br>          title: ""content"",<br>          visible: true,<br>          name: ""content""<br>        },<br>        {<br>          data: ""duration"",<br>          title: ""duration"",<br>          visible: true,<br>          name: ""duration""<br>        },<br>        {<br>          data: ""sub_project"",<br>          title: ""sub_project"",<br>          visible: true,<br>          name: ""sub_project""<br>        },<br>        {<br>          data: ""status"",<br>          title: ""status"",<br>          visible: true,<br>          name: ""status""<br>        },<br>        {<br>          data: ""notes"",<br>          title: ""notes"",<br>          visible: true,<br>          name: ""notes""<br>        },<br>        {<br>          data: ""task_date"",<br>          title: ""task_date"",<br>          visible: true,<br>          name: ""task_date"",<br>          createdCell: date_format_with_day,<br>          type: ""date-format-moment""<br>        },<br>        {<br>          data: ""task_date_range"",<br>          title: ""task_date_range"",<br>          visible: false,<br>          name: ""task_date_range""<br>        },<br>         {<br>          data: ""task_type"",<br>          title: ""task_type"",<br>          visible: false,<br>          name: ""task_type""<br>        }<br>      ],<br>      select: true,<br>      colReorder: true,<br>      drawCallback: callback_function,<br>      buttons: [<br>        { extend: ""excel"", title: document.title },<br>        { extend: ""colvis"", title: document.title },<br>        { extend: ""edit"", editor: editor },<br>        {text: 'Clear',name:'Clear', action: function ( e, dt, node, config ) {<br>          dt.columns('').search('').draw()<br>        }},<br>         {text: 'Current',name:'Current', action: function ( e, dt, node, config ) {<br>          dt.columns('task_type:name').search('current').draw()<br>        }},<br>          {text: 'Complete',name:'Complete', action: function ( e, dt, node, config ) {<br>          dt.columns('task_type:name').search('complete').draw()<br>        }},<br>        {text: 'Today',name:'Today', action: function ( e, dt, node, config ) {<br>          dt.columns('task_date_range:name').search('today').draw()<br>        }},<br>        {text: 'This Week',name:'This Week', action: function ( e, dt, node, config ) {<br>          dt.columns('task_date_range:name').search('this_week').draw()<br>        }},<br>         {text: 'This Month',name:'This Month', action: function ( e, dt, node, config ) {<br>          dt.columns('task_date_range:name').search('this_month').draw()<br>        }},<br>        {text: 'This Year',name:'This Year', action: function ( e, dt, node, config ) {<br>          dt.columns('task_date_range:name').search('this_year').draw()<br>        }}<br>      ],<br>      order: [3, ""desc""]<br>    });",callback_function,app
todoist_table.js,  table.columns('task_date_range:name').search('this_month').draw(),"    table.columns('task_date_range:name').search('this_month').draw()<br>    function run_refresh(){<br>              measure_progress_bars(Object.values(table.rows({ page: ""current"" }).data()),progress_table)<br><br>    }<br>    setTimeout(run_refresh,5000)<br>    console.log(table)<br>    //console.log(Object.values(table.rows({ page: ""current"" }).data()))<br>    return table<br>}",run_refresh,app
