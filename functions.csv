file_name,description,code,name,folder_name
array_functions.js,array filter tasks for text,"//array filter tasks for text<br>function array_filter_from_text(array,text,key_name){<br>  key_name = key_name || ""content""<br>  array = array.filter(function(D){return D['key_name'].toLowerCase().indexOf(text.toLowerCase()) !== -1 })<br>  return array <br>}<br><br><br>",array_filter_from_text,function
array_functions.js,converts list of lists to array,"//converts list of lists to array<br>function list_of_lists_to_array(lol,key_names){<br>  key_names = lol[0]||key_names<br>  array = []<br>  lol.forEach(function(row,row_num){<br>    var new_dict =  {}<br>    row.forEach(function(col,col_num){<br>      cell_val = lol[row_num][col_num]<br>      key_name = key_names[col_num]<br><br>      new_dict[key_name] = cell_val<br>    })<br>    array.push(new_dict)<br>  })<br>  return array <br>}<br>",list_of_lists_to_array,function
array_functions.js,filter tasks for text and return sum from it,"//filter tasks for text and return sum from it<br>function array_filter_from_text_sum(array,text,key_name,sum_field){<br>  sum_field = sum_field||'duration'<br>  array = array_filter_from_text(array,text,key_name)<br>  var sum_total = sum_float_convert_from_array_underscore(array,sum_field)<br>  return sum_total",array_filter_from_text_sum,function
array_functions.js,make triple check for the key ,"//make triple check for the key <br>function dictionary_check_keys_triple_return(item,check_key,second_key,third_key,alternative_val){<br>  alternative_val = alternative_val||""null""<br>  check_key = check_key||'fullName'<br>  not_undefined = item[check_key] != undefined<br>  if (not_undefined){<br>      not_second_undefined = item[check_key][second_key] != undefined<br>      if (not_second_undefined){<br>        r = item[check_key][second_key][third_key]||alternative_val<br>      }<br>      else {<br>        r = alternative_val<br>      }<br>  }<br>  else {<br>    r = alternative_val<br>  }<br>  return r <br>}",dictionary_check_keys_triple_return,function
array_functions.js,check for the key on second layer or return null,"//check for the key on second layer or return null<br>function dictionary_check_keys_double_return(item,check_key,second_key,alternative_val){<br>  alternative_val = alternative_val||""null""<br>  check_key = check_key||'fullName'<br>  not_undefined = item[check_key] != undefined<br>  if (not_undefined){<br>    r = item[check_key][second_key]||alternative_val<br><br>  }<br>  else {<br>    r = alternative_val<br>  }<br>  return r <br>}",dictionary_check_keys_double_return,function
array_functions.js,checks if item has a key and gives it null if not,"//checks if item has a key and gives it null if not<br>function dictionary_check_keys(item,check_keys,alternative_val){<br>  alternative_val = alternative_val||""null""<br>  check_keys = check_keys||['fullName','active','connectedAt','id']<br>  check_keys.forEach(function(i){<br>    item[i] = item[i]||'null'<br>  })<br>}",dictionary_check_keys,function
array_functions.js,checks if item has a key and gives it null if not (for the whole array),"//checks if item has a key and gives it null if not (for the whole array)<br>function array_check_keys(array,check_keys){<br>  check_keys = check_keys||['fullName','active','connectedAt','id']<br>  array.forEach(function(item){<br>    dictionary_check_keys(item,check_keys)<br>  })<br>}",array_check_keys,function
array_functions.js, turn an array  e.g. list of dictionaries into a list of lists because certain functions such as datatables takes an input of a list of lists,"// turn an array  e.g. list of dictionaries into a list of lists because certain functions such as datatables takes an input of a list of lists<br>function list_of_lists_from_array(array,keys){<br>  list_of_lists = [] //this is an empty list that will be filled with sublists<br>  array.forEach(function(dictionary_object,index){ //we're going to loop through every dictionary in the array<br>    sublist = []<br>    keys.forEach(function(key_name,key_index){ //we're also going to loop through every key<br>      sublist.push(dictionary_object[key_name]) //then we're going to get the key's definition to create the subli<br>    })<br>    list_of_lists.push(sublist) //push the sublist to the list_of_lists<br>   })<br>  return list_of_lists<br>}",list_of_lists_from_array,function
array_functions.js,convert array to dictionary,"//convert array to dictionary<br>function array_to_dictionary(array,key_name){<br>  key_name = key_name || 'id'<br>  new_dict = {}<br>  array.forEach(function(item,index){<br>    new_dict[String(item[key_name])] = item<br>  })<br>  return new_dict<br>}",array_to_dictionary,function
array_functions.js,"check if key has a value and if not, add it a value","//check if key has a value and if not, add it a value<br>function key_check_func_dictionary(check_keys,item){<br>    check_keys = check_keys||['fullName','active','connectedAt','id']<br>  check_keys.forEach(function(i){<br>    item[i] = item[i]||'null'<br>  })<br>}",key_check_func_dictionary,function
array_functions.js,highlights syntax,"//highlights syntax<br>function syntaxHighlight(json){<br>    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');<br>    return json.replace(/(""(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\""])*""(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {<br>        var cls = 'number';<br>        if (/^""/.test(match)) {<br>            if (/:$/.test(match)) {<br>                cls = 'key';<br>            } else {<br>                cls = 'string';<br>            }<br>        } else if (/true|false/.test(match)) {<br>            cls = 'boolean';<br>        } else if (/null/.test(match)) {<br>            cls = 'null';<br>        }<br>        return '<span class=""' + cls + '"">' + match + '</span>';<br>    });<br>}",syntaxHighlight,function
array_functions.js, prettifies the json or the list,"// prettifies the json or the list<br>function json_prettify(json_input){<br>var str = JSON.stringify(json_input, undefined, 4);<br>    document.body.appendChild(document.createElement('pre')).innerHTML = syntaxHighlight(str);<br><br>}<br>",json_prettify,function
array_functions.js,combines dictionaries,"//combines dictionaries<br>function combine_dicts(a,b){//https://stackoverflow.com/questions/43449788/how-do-i-merge-two-dictionaries-in-javascript<br>  var a = a||{ fruit: ""apple"" },<br>    b = b||{ vegetable: ""carrot"" },<br>    food = Object.assign({}, a, b);<br>    return food<br>}",combine_dicts,function
array_functions.js,check if the dictionary has two layers of key down and then pull and turn it to null to avoid error,"//check if the dictionary has two layers of key down and then pull and turn it to null to avoid error<br>function key_check_make_double(item,primary_key,secondary_key){<br>  item[primary_key] = item[primary_key]||{}<br>  item[primary_key][secondary_key] = item[primary_key][secondary_key] ||'null'<br>}<br>",key_check_make_double,function
date_functions.js,parses a time such as 1:00PM,//parses a time such as 1:00PM<br>function parseTime( t ) {<br>   var d = new Date();<br>   var time = t.match( /(\d+)(?::(\d\d))?\s*(p?)/ );<br>   d.setHours( parseInt( time[1]) + (time[3] ? 12 : 0) );<br>   d.setMinutes( parseInt( time[2]) || 0 );<br>   return d;<br>},parseTime,function
date_functions.js,gives days in the month,"//gives days in the month<br>function daysInMonth (month, year) {<br>    return new Date(year, month, 0).getDate();<br>}",daysInMonth ,function
date_functions.js,number of days this month,"//number of days this month<br>function days_this_month(){<br>  r = new Date()<br>  return daysInMonth(r.getMonth()+1,r.getYear())<br>}",days_this_month,function
date_functions.js,returns true if the date is todays date,"//returns true if the date is todays date<br>function date_is_today(input_date){<br>    // Create date from input value<br>    var inputDate = new Date(input_date);<br><br>    // Get today's date<br>    var todaysDate = new Date();<br><br>    // call setHours to take the time out of the comparison<br>    return inputDate.setHours(0,0,0,0) == todaysDate.setHours(0,0,0,0)<br>}<br>",date_is_today,function
file_functions.js,read directly from a text file,"//read directly from a text file<br>function read_text_file_data(file){<br>  var rawFile = new XMLHttpRequest();<br>  rawFile.open(""GET"", file, false);<br>  rawFile.onreadystatechange = function ()<br>  {<br>    if(rawFile.readyState === 4)<br>    {<br>      if(rawFile.status === 200 || rawFile.status == 0)<br>      {<br>        raw_text_file_data = rawFile.responseText;<br>      }<br>    }<br>  }<br>  rawFile.send(null);<br>};",read_text_file_data,function
file_functions.js,read directly from a text file,//read directly from a text file<br>function read_text_file_data_pull(file){<br>  read_text_file_data(file)<br>  return raw_text_file_data,read_text_file_data_pull,function
file_functions.js,convert a downloadable data url into a download,"//convert a downloadable data url into a download<br>function downloadURI(uri, name) {<br>  var link = document.createElement(""a"");<br>  link.download = name;<br>  link.href = uri;<br>  document.body.appendChild(link);<br>  link.click();<br>  document.body.removeChild(link);<br>  delete link;<br>}",downloadURI,function
file_functions.js,use paparse to read from file,"//use paparse to read from file<br>function papa_parse_array(file,delimter){<br>    delimter = delimter || ""|""<br>    file = file ||""""<br>    read_text_file_data(file)<br>    var results = Papa.parse(raw_text_file_data);<br>    text_lines = results.data<br>    key_names = text_lines[0] <br>    key_names = headers_key_names_list_format_string(key_names)<br>    array = []<br>    text_lines.forEach(function(entry,i){<br>        var singleObj = {}<br>         key_names.forEach(function(kn,num_index){<br>            singleObj[kn] = entry[num_index]<br>         })<br>        array.push(singleObj)<br>    })<br>    return array ",papa_parse_array,function
html_functions.js,add dropdown item to list of items. used in create_task_v2,"//add dropdown item to list of items. used in create_task_v2<br>function add_dropdown_item(title_text){<br>    title_text = title_text||""hello_world 2""<br>    var outer_div = $(""<li>"", {});<br>    var link_elem = $(""<a>"", {""href"": ""#"",""target"":""_blank""}).text(title_text)<br>    var final_div = outer_div.append(link_elem)<br>    $(""#favicon_dropdown_menu"").append(final_div)<br>    return final_div<br>}<br>",add_dropdown_item,function
html_functions.js,add icon from favicon,"//add icon from favicon<br>function add_favicon_div_from_javascript(title_text,url,image_url){<br>    url = url||""https://cruz.site44.com/profile.html""<br>    title_text = title_text||""hello_world 2""<br>    icon_class = icon_class||""fa fa-trophy fa-5x""<br>    var outer_div = $(""<div>"", {""class"": ""col-md-3""});<br>    var inner_div = $(""<div>"", {""class"": ""contact-box center-version""});<br>    var link_elem = $(""<a>"", {""href"": url});<br>    //var image_elem = $(""<img>"", {""src"": image_url});<br>    var image_elem = $(""<i>"", {""class"": icon_class});<br><br>    var text_elem = $(""<h3>"", {""class"": ""m-b-xs""}).text(title_text)<br>    var final_div = link_elem.append(image_elem).append(text_elem)<br>    var final_div = inner_div.append(final_div)<br>    var final_div = outer_div.append(final_div)<br>    $(""#target"").append(final_div)<br>    return final_div",add_favicon_div_from_javascript,function
html_functions.js,creates an image div to append to a jquery object with append,"//creates an image div to append to a jquery object with append<br>function create_image_div(title_text,url,image_url){<br>    url = url||""https://cruz.site44.com/profile.html""<br>    image_url = image_url||""https://cruz.site44.com/img/a2.jpg""<br>    title_text = title_text||""hello_world 2""<br>    var outer_div = $(""<div>"", {""class"": ""col-md-2""});<br>    var inner_div = $(""<div>"", {""class"": ""contact-box center-version""});<br>    var link_elem = $(""<a>"", {""href"": url});<br>    var image_elem = $(""<img>"", {""src"": image_url});<br>    var text_elem = $(""<h3>"", {""class"": ""m-b-xs""}).text(title_text)<br>    var final_div = link_elem.append(image_elem).append(text_elem)<br>    var final_div = inner_div.append(final_div)<br>    var final_div = outer_div.append(final_div)<br>    return final_div<br>}<br>",create_image_div,function
html_functions.js, appends the image div from create_image_div,"// appends the image div from create_image_div<br>function append_image_div(div_id,title_text,url,image_url){<br>    $(div_id).append(create_image_div(title_text,url,image_url))<br>}",append_image_div,function
html_functions.js,creates a metric div and adds it to the div,"//creates a metric div and adds it to the div<br>function metric_header_create(title_text,sub_title,metric_text,sub_metric_text){<br>    title_text = title_text||""TITLE""<br>    metric_text = metric_text||""metric_text""<br>    sub_metric_text = sub_metric_text||""sub_metric_text""<br>    sub_title = sub_title||""sub_title""<br><br>    var outer_div_one = $(""<div>"", {""class"": ""col-md-2 ""+title_text});<br>    var outer_div_two = $(""<div>"", {""class"": ""ibox float-e-margins""});<br>    var inner_div_one = $(""<div>"", {""class"": ""ibox-title""});<br>    var elem_one = $(""<span>"", {""class"": ""label label-success pull-right""});<br>    var elem_two = $(""<h5>"").text(title_text)<br><br>    var inner_div_two = $(""<div>"", {""class"": ""ibox-content""});<br>    var elem_three = $(""<h1>"", {""class"": ""no-margins metric_text""}).text(metric_text)<br>    var elem_four = $(""<div>"", {""class"": ""stat-percent font-bold text-success sub_metric_text""}).text(sub_metric_text)<br>    var elem_five = $(""<small>"").text(sub_title)<br><br><br>    inner_div_one = inner_div_one.append(elem_one).append(elem_two)<br>    inner_div_two = inner_div_two.append(elem_three).append(elem_four).append(elem_five)<br>    var inner_ibox_div = outer_div_two.append(inner_div_one).append(inner_div_two)<br>    var final_div = outer_div_one.append(inner_ibox_div)<br>    return final_div<br>}",metric_header_create,function
html_functions.js,creates a metric div and adds it to the div,"//creates a metric div and adds it to the div<br>function append_metric_header_div(div_id,title_text,sub_title,metric_text,sub_metric_text){<br>    $(div_id).append(metric_header_create(title_text,sub_title,metric_text,sub_metric_text))<br>}",append_metric_header_div,function
math_functions.js,get the median from list of numbers,"//get the median from list of numbers<br>function median_get(values) {<br>    values.sort( function(a,b) {return a - b;} );<br>    var half = Math.floor(values.length/2);<br>    if(values.length % 2)<br>        return values[half];<br>    else<br>        return (values[half-1] + values[half]) / 2.0;<br>}<br>",median_get,function
math_functions.js,create g unique identifier,,create_guid,function
math_functions.js,nction create_guid() {,function create_guid() {<br>  function s4() {<br>    return Math.floor((1 + Math.random()) * 0x10000)<br>      .toString(16)<br>      .substring(1);<br>  }<br>  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +<br>    s4() + '-' + s4() + s4() + s4();<br>},s4,function
string_functions.js,convert stirng to fromatted string ,"//convert stirng to fromatted string <br>function file_formatted_string(header){<br>	return header.replace("" "",""_"").replace("" "",""_"").replace("" "",""_"").replace("" "",""_"").toLowerCase().trim()",file_formatted_string,function
string_functions.js,,"<br>function string_within_string_check(target_string,parent_string){<br>	return file_formatted_string(parent_string).indexOf(file_formatted_string(target_string)) != -1<br>}",string_within_string_check,function
string_functions.js,convert stirng to fromatted string ,"//convert stirng to fromatted string <br>function headers_key_names_list_format_string(headers){<br>  l = []<br>      headers.forEach(function(header,i){<br>        new_header = header.replace("" "",""_"").replace("" "",""_"").replace("" "",""_"").replace("" "",""_"").toLowerCase().trim()<br>        l.push(new_header)<br>      })<br>  return l <br>}",headers_key_names_list_format_string,function
string_functions.js,convert string to binary,//convert string to binary<br>function text2Binary(string) {<br>    return string.split('').map(function (char) {<br>        return char.charCodeAt(0).toString(2);<br>    }).join(' ');,text2Binary,function
web_functions.js,open url in new tab,"//open url in new tab<br>function openInNewTab(url) {<br>  var win = window.open(url, '_blank');<br>  win.focus();<br>}<br>",openInNewTab,function
web_functions.js,get url parameter ,//get url parameter <br>function parameter_attain_from_url(param){<br>	var url = new URL(window.location.href );<br>	var result = url.searchParams.get(param)<br>	return result<br>}<br>,parameter_attain_from_url,function
chartjs_functions.js,initiates a simple bar chart using chartjs,"//initiates a simple bar chart using chartjs<br>function bar_chart_initiate_render_chartjs(chart_id,labels,numbers_list,colors){<br>  labels = labels||['No Data']<br>  numbers_list = numbers_list||[0]<br>  colors = colors||[""#a3e1d4""]<br><br>  simple_chart_data = {labels:labels, datasets: [{data: numbers_list, backgroundColor: colors }] };<br>  simple_options = {legend: {display: false}, responsive: true, tooltips: {enabled: true}};<br><br>  var ctx = document.getElementById(chart_id).getContext(""2d"");<br>  simple_chart_object = new Chart(ctx, {type: 'bar', data: simple_chart_data, options:simple_options});<br>  return simple_chart_object<br>}",bar_chart_initiate_render_chartjs,library
chartjs_functions.js,updates bar_chart for data ,"//updates bar_chart for data <br>function bar_chart_update_chartjs(chart_object,new_labels,new_data_points,new_colors){<br>    chart_object.data.labels = new_labels // ['label a','label b']<br>    chart_object.data.datasets[0].data = new_data_points//[1,2]<br>    chart_object.data.datasets[0].backgroundColor = new_colors//[""#a3e1d4"",""#dedede""]<br>}",bar_chart_update_chartjs,library
datatable_functions.js,add a record to datatables ,"//add a record to datatables <br>function row_add_datatables(table,dictionary_obj){<br>    table.row.add(dictionary_obj).draw( false );<br>}",row_add_datatables,library
datatable_functions.js,update label of status of rag (created: 5/28/18),"//update label of status of rag (created: 5/28/18)<br>function airbnb_url_create_datatables(td, cellData, rowData, row, col){<br>  airbnb_url = rowData.airbnb_url<br>  title = rowData.title<br>  return $(td).html(""<a target='_blank' href='""+airbnb_url+""'>"" +title + ""</a>"")<br>}<br>",airbnb_url_create_datatables,library
datatable_functions.js,get the data from the api ,"//get the data from the api <br>function datatables_data_get_from_api(table_id){<br>  table_id = table_id||""#table""<br>  return $(table_id).DataTable().api().rows({ page: ""current"" }).data();<br>}<br>",datatables_data_get_from_api,library
datatable_functions.js,parse the float to two decimals,"//parse the float to two decimals<br>function parse_float_datatable_format(td, cellData, rowData, row, col) {<br>  r = parseFloat(cellData)||0<br>  r = r.toFixed(2)<br>  $(td).html(r)<br>}<br>",parse_float_datatable_format,library
datatable_functions.js,format the datatables date with the date and time,"//format the datatables date with the date and time<br>function date_time_datatable_format(td, cellData, rowData, row, col) {<br>  date_format = moment(cellData).format(""MM/DD/YY hh:mmA (dd)"");<br>  $(td).attr('title',moment(cellData).fromNow())<br>  $(td).html(date_format);<br>}<br>",date_time_datatable_format,library
datatable_functions.js,simple datatable from array ,"//simple datatable from array <br>function data_table_simple(array,div_id){<br>  key_names = Object.keys(array[0])<br>  columns_list = []<br>  key_names.forEach(function(i){<br>    columns_list.push({data:i,title:i,name:i})<br>  })<br>  div_id = div_id || ""#table""<br>  return $(div_id).DataTable({<br>  paging: false,<br>  dom: '<""html5buttons""B>lTfgitp',<br>  data: array,<br>  columns:columns_list,<br>  select: true,<br>  colReorder: true,<br>  buttons: [<br>    { extend: ""excel"", title: document.title },<br>    { extend: ""colvis"", title: document.title }<br>  ],<br>  order: [3, ""desc""]<br>});<br><br>}",data_table_simple,library
datatable_functions.js,"when you click on row, it changes the value","//when you click on row, it changes the value<br>function clickable_change_value(table_id,editor,){<br>  table_id = table_id||""#table""<br>  $(table_id).on(""click"", ""tbody td"", function(e) {<br>  var table = $(table_id).DataTable();<br>  row_data = table.row(this).data();<br>  if (row_data.status == 'Green'){<br>    change_value = 'Red'<br>  }<br>  else {<br>    change_value = 'Green'<br>  }<br>  row_data['status'] = change_value<br>  editor<br>    .edit(this, false)<br>    .set(""status"", change_value)<br>    .submit();<br>    status_format(this, row_data.name, row_data, 1, 1)<br>});<br>}<br>",clickable_change_value,library
datatable_functions.js,update label of status of rag (created: 5/28/18),"//update label of status of rag (created: 5/28/18)<br>function status_format_datatables(td, cellData, rowData, row, col){<br>    if (rowData.status == 'Green'){<br>      html_result = '<span class=""label label-primary"" style=""min-width: 55px ;display: inline-block"">'+cellData+'</span>'<br>    }<br>    else if (rowData.status  == 'Amber'){<br>      html_result = '<span class=""label label-warning"" style=""min-width: 55px ;display: inline-block"">'+cellData+'</span>'<br>    }<br>    else if (rowData.status  == 'Red'){<br>      html_result = '<span class=""label label-danger"" style=""min-width: 55px ;display: inline-block"">'+cellData+'</span>'<br>    }<br>    else if (rowData.status  == 'Red'){<br>      html_result = '<span class=""label label-danger"" style=""min-width: 55px ;display: inline-block"">'+cellData+'</span>'<br>    }<br>    else {<br>      html_result = '<span class=""label"" style=""min-width: 55px ;display: inline-block"">'+cellData  +'</span>'<br>    }<br>    $(td).html(html_result)<br>}",status_format_datatables,library
datatable_functions.js,convenience function for custom fields,"//convenience function for custom fields<br>function editor_fields_array_from_custom_fields(custom_fields){<br>  l = []<br>  custom_fields.forEach(function(custom_field){<br>    new_dictionary = { label: custom_field + "":"", name: custom_field }<br>    l.push(new_dictionary)<br>  })<br>  return l <br>}<br><br>",editor_fields_array_from_custom_fields,library
datatable_functions.js,this should go at top of datatables,"//this should go at top of datatables<br>function sort_by_unix_datatabes(){<br>	$.fn.dataTable.ext.type.order[""date-format-moment-pre""] = function(d) {<br>	  r = moment(d).utc();<br>	  return r;<br>	};<br>}",sort_by_unix_datatabes,library
datatable_functions.js,"based on filter from table , update a funciton","//based on filter from table , update a funciton<br>function callback_function_sum_datatables(variable_name){<br>  var api = this.api();<br>  variable_name = api.column(variable_name+"":name"", {page:'current'} ).data().sum()<br>  return api ",callback_function_sum_datatables,library
datatable_functions.js,format the datatables date with the date,"//format the datatables date with the date<br>function date_format_with_day(td, cellData, rowData, row, col) {<br>  date_format = moment(cellData).format(""MM/DD/YY (dd)"");<br>  $(td).html(date_format);<br>}",date_format_with_day,library
datatable_functions.js,format the date as its created,"//format the date as its created<br>function date_format_created_moment_datatables(td, cellData, rowData, row, col) {<br>  date_format = moment(cellData).format(""MMM-YYYY"");<br>  $(td).html(date_format);<br>}",date_format_created_moment_datatables,library
datatable_functions.js,,"<br>function editor_initiate(table_id,fields_list){<br>	fields_list == fields_list|| [{label: ""Custom Field:"",name: ""custom_field""}]<br>	editor = new $.fn.dataTable.Editor( {<br>      table: table_id,<br>      fields:fields_list,<br>      idSrc:  'id'<br> 	 });<br>	return editor<br>",editor_initiate,library
datatable_functions.js,process the response from the psot submit,"//process the response from the psot submit<br>function editor_post_submit_function_datatables(func){<br>	editor.on( 'postSubmit', function (e, json, data, action, xhr) {<br>	    json_array = json.data<br>	    json_array.forEach(function(D){<br>	    	func(D)<br>	    })<br>  	});",editor_post_submit_function_datatables,library
datatable_functions.js,,"<br>function datatables_initiate_render(table_div_id,columns_list){<br>	table_example = $(table_div_id).DataTable({<br>    paging:false,<br>    dom: '<""html5buttons""B>lTfgitp',<br>    data: input_data,<br>    columns:columns_list,<br>    // columns: [<br>    //   {data:'account_name',title:'Account Name',name:'Account Name',visible:true},<br>    //   {data:'amount',title:'Amount',name:'Amount',visible:true},<br>    //   {data:'category',title:'Category',name:'Category',visible:true},<br>    //   {data:'date',title:'Date',name:'Date',visible:true,type: ""date-format-moment""},<br>    //   {data:'month',title:'Month',name:'month',visible:true},<br>    //   {data:'description',title:'Description',name:'Description',visible:true},<br>    //   {data:'labels',title:'Labels',name:'Labels',visible:false},<br>    //   {data:'notes',title:'Notes',name:'Notes',visible:false},<br>    //   {data:'original_description',title:'Original Description',name:'Original Description',visible:false},<br>    //   {data:'transaction_type',title:'Transaction Type',name:'Transaction Type',visible:true}<br><br>    // ],<br>    select: true,<br>    colReorder: true,<br>    drawCallback: callback_function,<br>    buttons: [<br>      {extend: 'excel', title: document.title},<br>      {extend: 'colvis', title: document.title},<br>      { extend: ""create"", editor: editor },<br>      { extend: ""edit"",   editor: editor },<br>      { extend: ""remove"", editor: editor }<br>    ]<br>  });",datatables_initiate_render,library
excel_functions.js, Create an Excel with system default font,// Create an Excel with system default font<br>function create_excel_object(){<br>	var excel = $JExcel.new();<br>	return excel                    <br>},create_excel_object,library
excel_functions.js, Create an Excel with Arial 10 Font,"// Create an Excel with Arial 10 Font<br>function create_excel_object_with_formatting(format){<br>	format = format||""Arial 10 #333333""<br>	var excel = $JExcel.new(format);  // Default font is Arial 10 in RGB #333  <br>	return excel             <br>}",create_excel_object_with_formatting,library
excel_functions.js,Create an excel file to download,"//Create an excel file to download<br>function generate_excel_download_file(excel,file_name){<br>	var excel = excel||$JExcel.new();<br>	file_name = file_name||""SampleData.xlsx""<br>	excel.generate(file_name);<br>	return excel <br>}",generate_excel_download_file,library
excel_functions.js,is used to register styles in the Excel document. It requires a style definition object which is made of up to 5 properties:,"//is used to register styles in the Excel document. It requires a style definition object which is made of up to 5 properties:<br>function excel_add_style(excel){<br>	var excel = excel||$JExcel.new();<br>	var excel_style= excel.addStyle ({<br>	  fill: ""#ECECEC"" ,                        // background color in #RRGGBB<br>	  border: ""none,none,none,thin #333333"",    // left border,right border,top border, bottom border<br>	  font: ""Calibri 12 #0000AA B"",          // font-name font-size font-color font-style<br>	  format: ""yyyy.mm.dd hh:mm:ss"",           // display format<br>	  align: ""R T""                          // horizontal-align vertical-align<br>	});<br>	return excel_style<br>}",excel_add_style,library
excel_functions.js,define cell style and add cell value,"//define cell style and add cell value<br>function excel_define_cell(){<br>	var excel = excel||$JExcel.new();<br>	var excel_style = excel.addStyle({font: ""Arial 10 B""});        // Define style Arial 10 bold                <br>	excel.set({sheet:0,col:5,row:3,value: ""HELLO"",style:excel_style});<br>}",excel_define_cell,library
excel_functions.js,defines the name of the sheet,"//defines the name of the sheet<br>function excel_define_sheet_name(excel){<br>	var excel = excel||$JExcel.new();<br>	sheet_name = sheet_name||""Summary""<br>	sheet_number = sheet_number||0<br>	excel.set(sheet_number,undefined,undefined,sheet_name); <br>	return excel <br>}<br><br>",excel_define_sheet_name,library
firebase_functions.js,pull ref from firebase,"//pull ref from firebase<br>function ref_attain_from_firebase(reference_name,child_name){<br>	var dbRef = firebase.database();<br>	var contactsRef = dbRef.ref(reference_name).child(child_name)<br>	return contactsRef<br>}",ref_attain_from_firebase,library
firebase_functions.js,push data to firebase,"//push data to firebase<br>function data_push_to_firebase(contactsRef,data_to_push){<br>  //data_to_push = {'chat_id':chat_id, 'viewer':site_viewer, 'content': input_text, 'timestamp': date_time }<br>  contactsRef.push(data_to_push)<br><br>}",data_push_to_firebase,library
firebase_functions.js,query the contacts ref and run the process_func on the results,"//query the contacts ref and run the process_func on the results<br>function query_elements_array_firebase(contactsRef,process_func){<br>	contactsRef.on('child_added', function(snapshot) {<br>  		process_func(snapshot.val())<br>	})<br>}",query_elements_array_firebase,library
firebase_functions.js,pulls straight json if the firebase is open,"//pulls straight json if the firebase is open<br>function firebase_json_pull(url){<br>    url = url||""https://shippy-ac235.firebaseio.com/DataTablesTest/Test3.json""<br>    l = $.ajax({<br>      url: url,<br>      method: ""GET"",<br>      async:false,<br>      headers: {""Accept"":""application/json; odata=verbose""}<br>    })<br>    results = l.responseJSON<br>    return results<br>  }",firebase_json_pull,library
firebase_functions.js,purpose is to check one dictionary against another and update it ,"//purpose is to check one dictionary against another and update it <br>function dictionary_cross_check_apply_key(D,firebase_defined_dict,key){<br>    	if (firebase_defined_dict != undefined) {<br>      		D[key] = firebase_defined_dict[key]||""null"";<br>    	} else {<br>      		D[key] = ""null"";<br>    	}<br><br>}",dictionary_cross_check_apply_key,library
firebase_functions.js,purpose is to sync firebase array with regular array across keys,"//purpose is to sync firebase array with regular array across keys<br>function firebase_array_integrate(array,firebase_url,identifier,keys) {<br>	keys = keys||['status']<br>	firebase_url = firebase_url||""https://shippy-ac235.firebaseio.com/dashbot/accounts.json""<br>	identifier = identifier||""DT_RowId""<br>  	firebase_dict = firebase_json_pull(firebase_url)||{}<br>  	array.forEach(function(D) {<br>    	firebase_defined_dict = firebase_dict[D[String(identifier)]]<br>    	keys.forEach(function(key){<br>    		dictionary_cross_check_apply_key(D,firebase_defined_dict,key)<br>    	})<br>    	<br><br>  });<br>  return array;<br>}<br>",firebase_array_integrate,library
firebase_functions.js, initialize the firebase instance,"// initialize the firebase instance<br>function firebase_initialize(){<br>	var config = {<br>	apiKey: ""AIzaSyApJBfnH0j3TSugzEABiMFkI_tU_XXeGzg"",<br>	authDomain: ""shippy-ac235.firebaseapp.com"",<br>	databaseURL: ""https://shippy-ac235.firebaseio.com""<br>	};<br>	firebase.initializeApp(config);<br>	return firebase<br>}",firebase_initialize,library
firebase_functions.js,authenticate the user that has been authed,//authenticate the user that has been authed<br>function firebase_auth_user_process(user_process_func){<br>  firebase.auth().onAuthStateChanged((user) => {<br>  if (user) {<br>  	user_process_func(user)<br>    }<br>  });,firebase_auth_user_process,library
jquery_functions.js,get the td jquery objects from a table based on a table id,"//get the td jquery objects from a table based on a table id<br>function table_jquery_objects_to_array(table_id){<br>	list_of_lists = []<br>	$(""#""+table_id+"" tr"").each(function(row_number) {<br>	  col_values = Object.values($(this).find('td'))<br>	  	if (col_values.length > 0){<br>	  		col_values.forEach(function(col_val,col_number){<br>	  			new_dictionary = {<br>	  				row_number: row_number,<br>	  				col_number: col_number,<br>	  				cell_value: $(col_val).text(),<br>	  				class_name: $(col_val).attr('class')<br>	  			}<br>	    		list_of_lists.push(new_dictionary)<br>	  		})<br>	  	}<br>	});<br>	return list_of_lists<br>}",table_jquery_objects_to_array,library
jquery_functions.js,upon hovering over change the css,"//upon hovering over change the css<br>function style_change_upon_hover(class_name){<br>	class_name = class_name||'.moreBtn'<br><br>	$(class_name).hover(function(){<br>        $(this).css(""background"", ""blue"")<br>    })<br>}<br>",style_change_upon_hover,library
jquery_functions.js,change text upon mouse over ,"//change text upon mouse over <br>function style_change_upon_mouse_over(class_name){<br>	class_name = class_name||'.moreBtn'<br>	$(class_name).mouseover(function(){<br>    $(this).css({<br>        'color' :'red',<br>        //other styles<br>    })<br>});<br>}<br><br><br>",style_change_upon_mouse_over,library
jquery_functions.js,add tooltip to element,"//add tooltip to element<br>function tooltip_add_jquery(div_id,tooltip_text){<br>	$(div_id).attr(""data-toggle"",""tooltip"")<br>	$(div_id).attr(""title"",tooltip_text)<br>	$('[data-toggle=""tooltip""]').tooltip(); <br>}<br>",tooltip_add_jquery,library
jquery_functions.js,click on a button,//click on a button<br>function div_click_jquery(ref_id){<br>	$(ref_id).click();<br>},div_click_jquery,library
jquery_functions.js,press enter when clicked,//press enter when clicked<br>function enter_press_down_jquery(ref_id){<br>$(ref_id).keypress(function (e) {<br> var key = e.which;<br> if(key == 13)  // the enter key code<br>  {run_function()<br>  }<br>});  <br><br><br>},enter_press_down_jquery,library
jquery_functions.js,function that uses jquery to run a function from a click,"//function that uses jquery to run a function from a click<br>function update_from_click_jquery(div_id){<br>	div_id = div_id||"".cell-value""<br>	$(div_id).on('click', function (e) { $(this)})<br>}",update_from_click_jquery,library
jquery_functions.js,get the td jquery objects from a table based on a table id,"//get the td jquery objects from a table based on a table id<br>function table_jquery_objects(table_id){<br>	list_of_lists = []<br>	$(""#""+table_id+"" tr"").each(function(row_number) {<br>	  row_list = []<br>	  col_values = Object.values($(this).find('td'))<br>	  	if (col_values.length > 0){<br>	  		col_values.forEach(function(col_val,col_number){<br>	  			col_val['row_number'] = row_number<br>	  			col_val['col_number'] = col_number<br>	    		row_list.push(col_val)<br>	  		})<br>	  		list_of_lists.push(row_list)<br>	  	}<br>	});<br>	return list_of_lists<br>}",table_jquery_objects,library
moment_functions.js,"create an interval string with start time, end time and minutes elapsed. used in create_task_v2 to keep track of time","//create an interval string with start time, end time and minutes elapsed. used in create_task_v2 to keep track of time<br>function time_interval_string_format_from_start_time(start_time){<br>      end_time = moment().format()<br>      start_time = moment(start_time).format(""h:mm:ssa"")<br>      end_time = moment(end_time).format(""h:mm:ssa"")<br>      var now = moment().valueOf()  //now is the time right now<br>      start_time_instance = moment(start_time).valueOf()<br>      var elapsed = now - start_time_instance;<br>      seconds = elapsed/1000<br>      elapsed_minutes = String(parseFloat(seconds/60).toFixed(3))  //add a two minute buffer<br>      formatted_string = "" ["" + start_time + ""-"" + end_time + ""|""+ elapsed_minutes+""min]""<br>      return formatted_string<br><br>}",time_interval_string_format_from_start_time,library
moment_functions.js,used in create_task_v2 to keep track of time,//used in create_task_v2 to keep track of time,timer_html_update_from_start_time_moment,library
moment_functions.js,"jquery_identifier = jquery_identifier||""#input_label_timer""","  jquery_identifier = jquery_identifier||""#input_label_timer""<br>  function running_task_timer(){<br>    time_text = time_since_start_time_moment(start_time)<br>    $(jquery_identifier).html(time_text)<br>    document.title = time_text<br>  }<br>  setInterval(running_task_timer,1000)<br>",running_task_timer,library
moment_functions.js,used in create_task_v2 to keep track of time,"//used in create_task_v2 to keep track of time<br>function time_since_start_time_moment(start_time){<br>    now = moment().valueOf()  //now is the time right now<br>    start_time_instance = moment(start_time).valueOf()<br>    elapsed = now - start_time_instance;<br>    time_text_value = moment(elapsed).subtract({hours: 19}); //have to subtract 19 hours for some reason<br>    time_text = time_text_value.format(""HH:mm:ss"")<br>    return time_text<br> }<br>",time_since_start_time_moment,library
moment_functions.js,tells us how long ago ,//tells us how long ago <br>function moment_time_ago(input_time){<br>  return moment(input_time).fromNow();<br>},moment_time_ago,library
moment_functions.js,"check if the day is today, 'year, month, week, minute'","//check if the day is today, 'year, month, week, minute'<br>function check_if_date_is_current_range(input_date,date_range){<br>  date_range = date_range || 'day'<br>  return moment(input_date).isSame(Date.now(), date_range);",check_if_date_is_current_range,library
moment_functions.js,"creates a string that indicates whether its in the day,week,month,year","//creates a string that indicates whether its in the day,week,month,year<br>function date_within_range_string_create(input_date){<br>  date_string = ''<br>  if (moment(input_date).isSame(Date.now(), 'day')){<br>    date_string = date_string + ""today""<br>  }<br>  if (moment(input_date).isSame(Date.now(), 'week')){<br>    date_string = date_string + ""this_week""<br>  }<br>  if (moment(input_date).isSame(Date.now(), 'month')){<br>    date_string = date_string + ""this_month""<br>  }<br>  if (moment(input_date).isSame(Date.now(), 'year')){<br>    date_string = date_string + ""this_year""<br>  }<br>  return date_string<br>}<br>",date_within_range_string_create,library
moment_functions.js,get hour from time,"//get hour from time<br>function get_hour_from_time(i){<br>  r = Date(i)<br>  hour = parseInt(moment(r).format(""H"")) + 5<br>  return hour<br>}<br>",get_hour_from_time,library
moment_functions.js,get the current time from moment,//get the current time from moment<br>function attain_now_from_moment(){<br>  date_time = moment().format();<br>  return date_time<br>},attain_now_from_moment,library
moment_functions.js,return unix now moment,//return unix now moment<br>function unix_now_moment(){<br>	return moment().unix()<br>},unix_now_moment,library
moment_functions.js,return hour-minute format using moment,"//return hour-minute format using moment<br>function hour_format_moment(timestamp){<br>	return moment(timestamp).format(""hh:mmA"")<br>}",hour_format_moment,library
moment_functions.js,"filter a certain date for current time range such as today, this month etc.","//filter a certain date for current time range such as today, this month etc.<br>function date_range_filter_moment(date_input,strf){<br>    if (date_input){<br>      this_month = moment().format(strf) //01<br>      completed_date_moment = new moment(date_input)<br>      completed_month = completed_date_moment.format(strf)<br>      return completed_month === this_month<br>    }<br>}<br>",date_range_filter_moment,library
moment_functions.js,set the hour from a given day,"//set the hour from a given day<br>function set_date_time_moment(date,hour){<br>  new_date = new Date(moment(date).format())<br>  new_date.setHours(hour)<br>  return moment(new_date)",set_date_time_moment,library
moment_functions.js,,"<br>function date_difference_from_today_days_moment(date_added){<br>    a = new moment()<br>    b = new moment(date_added)<br>    age_days = a.diff(b,'days')<br>    return age_days<br>}<br>",date_difference_from_today_days_moment,library
moment_functions.js,dates that are within this month,"//dates that are within this month<br>function dates_within_this_month(){<br>    days = moment().daysInMonth();<br>    today = new Date()<br>    month = String(today.getMonth()+1)<br>    year = String(today.getFullYear())<br>    date_string = year + ""-"" + month + ""-01""<br>    start_time = moment(date_string)<br>    hours_list = []<br>    for (i = 0; i < days; i++) { <br>        next_time = start_time.clone()<br>        next_time.add(i,'day')<br>        hours_list.push(next_time)<br><br>    }<br>    return hours_list<br>  } ",dates_within_this_month,library
moment_functions.js,return a list of days in the future ,"//return a list of days in the future <br>function number_of_days_ahead_calculate(days_ahead){<br>    today = new Date()<br>    month = String(today.getMonth()+1)<br>    year = String(today.getFullYear())<br>    start_time = moment()<br>    hours_list = []<br>    for (i = 0; i < days_ahead; i++) { <br>        next_time = start_time.clone()<br>        next_time.add(i,'day')<br>        hours_list.push(next_time.format())<br>    }<br>    return hours_list<br>  } <br>",number_of_days_ahead_calculate,library
moment_functions.js,return a list of days in the future. This returns an array ,"//return a list of days in the future. This returns an array <br>function number_of_days_ahead_calculate_array(days_ahead){<br>    today = new Date()<br>    month = String(today.getMonth()+1)<br>    year = String(today.getFullYear())<br>    start_time = moment()<br>    hours_list = []<br>    for (i = 0; i < days_ahead; i++) { <br>        next_time = start_time.clone()<br>        next_time.add(i,'day')<br><br>        hours_list.push({date:next_time.format()})<br>    }<br>    return hours_list<br>  } <br>",number_of_days_ahead_calculate_array,library
moment_functions.js,return list of days in the past,"//return list of days in the past<br>function dates_past_n_days(days){<br>    today = new Date()<br>    month = String(today.getMonth()+1)<br>    year = String(today.getFullYear())<br>    date_string = moment().format(""YYYY-MM-DD"")//year + ""-"" + month + ""-01""<br>    start_time = moment(date_string)<br>    hours_list = []<br>    for (i = 0; i < days; i++) { <br>        next_time = start_time.clone()<br>        next_time.subtract(i,'day')<br>        hours_list.push(next_time)<br><br>    }<br>    hours_list.reverse()<br>    return hours_list<br>  } ",dates_past_n_days,library
moment_functions.js,return list of days in the past but strf formatted,"//return list of days in the past but strf formatted<br>function dates_past_n_days_formatted(days,strf){<br>    strf = strf || ""YYYY-MM-DD""<br>    today = new Date()<br>    month = String(today.getMonth()+1)<br>    year = String(today.getFullYear())<br>    date_string = moment().format(""YYYY-MM-DD"")//year + ""-"" + month + ""-01""<br>    start_time = moment(date_string)<br>    hours_list = []<br>    for (i = 0; i < days; i++) { <br>        next_time = start_time.clone()<br>        next_time.subtract(i,'day')<br>        hours_list.push(next_time.format(strf))<br>    }<br>    hours_list.reverse()<br>    return hours_list<br>  } <br><br>",dates_past_n_days_formatted,library
moment_functions.js,return list of days in the past but strf formatted. This is as an array.,"//return list of days in the past but strf formatted. This is as an array.<br>function dates_past_n_days_formatted_array(days,strf){<br>    strf = strf || ""YYYY-MM-DD""<br>    today = new Date()<br>    month = String(today.getMonth()+1)<br>    year = String(today.getFullYear())<br>    date_string = moment().format(""YYYY-MM-DD"")//year + ""-"" + month + ""-01""<br>    start_time = moment(date_string)<br>    hours_list = []<br>    for (i = 0; i < days; i++) { <br>        next_time = start_time.clone()<br>        next_time.subtract(i,'day')<br>        hours_list.push({date:next_time.format(strf)})<br><br>    }<br>    hours_list.reverse()<br>    return hours_list<br>  } <br>",dates_past_n_days_formatted_array,library
moment_functions.js,pulls the dates between two dates,"//pulls the dates between two dates<br>function dates_between_dates_moment(startDate, stopDate) {<br>    var dateArray = new Array();<br>    var currentDate = startDate;<br>    while (currentDate <= stopDate) {<br>        dateArray.push(currentDate.clone());<br>        currentDate.add(1,'day');<br>    }<br>    return dateArray;<br>}<br><br>",dates_between_dates_moment,library
typewriter_functions.js,create a typewritter effect using typewritter library (https://safi.me.uk/typewriterjs/),"//create a typewritter effect using typewritter library (https://safi.me.uk/typewriterjs/)<br>function typewriter_element_create(div_id,input_text){<br>	div_id = div_id||'app'<br>	input_text = input_text||$(""#""+div_id).html()<br><br><br>	var app = document.getElementById(div_id);<br>	var typewriter = new Typewriter(app, {<br>	    loop: true<br>	});<br><br>	typewriter.typeString(input_text)<br>	    .pauseFor(10000)<br>	    .start();<br><br>}",typewriter_element_create,library
underscore_functions.js, get sum from array with key,"// get sum from array with key<br>function sum_float_convert_from_array_underscore(arr,key_name) { <br>  // returns the sum total of all values in the array<br>  return _.reduce(arr, function(memo, num) { <br>    r = memo + (parseFloat(num[key_name])||0)<br>    return r <br>  }, 0); ",sum_float_convert_from_array_underscore,library
gspread_functions.js,query google spreadsheets,"//query google spreadsheets<br>function gspread_query(range,spreadsheet_id,api_key){<br>  api_key = api_key||""AIzaSyApJBfnH0j3TSugzEABiMFkI_tU_XXeGzg""<br>  spreadsheet_id = spreadsheet_id||""1P0m6nu4CoXVD3nHrCgfm0pEvSpEkLsErjJxTLJLFjp8""<br>  range = range||""Checklists!A1""<br>  url = ""https://sheets.googleapis.com/v4/spreadsheets/""+spreadsheet_id+""/values/"" + range<br>  return $.ajax({type: ""GET"",<br>    url: url,<br>    dataType: 'json',<br>    async: false,<br>    data: {<br>    'key':api_key<br>    }<br>  });<br><br>}",gspread_query,api
gspread_functions.js,pulls from gspread in different format,"//pulls from gspread in different format<br>function gspread_array_pull(sheet_name,spreadsheet_id,api_key,key_names){<br>        api_key = api_key||""AIzaSyApJBfnH0j3TSugzEABiMFkI_tU_XXeGzg""<br>        spreadsheet_id = spreadsheet_id||""1P0m6nu4CoXVD3nHrCgfm0pEvSpEkLsErjJxTLJLFjp8""<br>        sheet_name = sheet_name||""Checklists""<br>        range = sheet_name + ""!A:Z""<br>        lol = gspread_query(range,spreadsheet_id,api_key).responseJSON.values<br>        key_names = lol[0]||key_names<br>        array = list_of_lists_to_array(lol,key_names)<br>        array.shift()<br>        return array<br>    }",gspread_array_pull,api
gspread_functions.js,query from gspread directly using api key,"//query from gspread directly using api key<br>function array_pull_from_gspread(sheet_name,spreadsheet_id,api_key,key_names){<br>    // sheet_name = 'Tasks'<br>    // spreadsheet_id = ""1-tszr-k0KcENCI5J4LfCOybmqpLtvsijeUvfJbC9bu0""<br>    // gspread_array_data = gspread_array_pull(sheet_name,spreadsheet_id)<br><br>        api_key = api_key||""AIzaSyApJBfnH0j3TSugzEABiMFkI_tU_XXeGzg""<br>        spreadsheet_id = spreadsheet_id||""1P0m6nu4CoXVD3nHrCgfm0pEvSpEkLsErjJxTLJLFjp8""<br>        sheet_name = sheet_name||""Checklists""<br>        range = sheet_name + ""!A:Z""<br>        lol = gspread_query(range,spreadsheet_id,api_key).responseJSON.values<br>        key_names = lol[0]||key_names<br>        array = list_of_lists_to_array(lol,key_names)<br>        array.shift()<br>        return array<br>}",array_pull_from_gspread,api
guesty_functions.js,,,guesty_reservation_data_pull_custom,api
guesty_functions.js,determine state if reservation is current,//determine state if reservation is current<br>function guest_state_determine(item){<br>  is_present = moment(item['checkIn']) <= moment() && moment() <= moment(item['checkOut']) <br>  if (is_present){<br>    return 'current'<br>  }<br>  else {<br>    return 'not current'<br>  }<br>}<br>,guest_state_determine,api
guesty_functions.js,using the information from guesty we are able to dictionary items,"//using the information from guesty we are able to dictionary items<br>function guest_reservation_dictionary_customize(item,index){<br>    price = item['money']['netIncome']<br>    days_difference = Math.round((new Date(item['checkOut']) - new Date(item['checkIn']))/(1000*60*60*24)) <br>    revenue_per_day = price/days_difference<br>    run_rate = revenue_per_day * 30<br>    guest_name = item.guest.fullName<br>    price = parseInt(price)||0<br>    revenue_per_day = parseInt(revenue_per_day)||0<br>    run_rate = parseInt(run_rate)||0<br>    room=item.listing.nickname<br>    days_from_now = Math.round((new Date(item['checkOut']) - new Date())/(1000*60*60*24)) <br>    item['guest_phone'] = dictionary_check_keys_double_return(item,'guest','phone')<br><br>    item['guest_public_review'] = dictionary_check_keys_triple_return(item,'review','guestReview','public')<br>    item['guest_private_review'] = dictionary_check_keys_triple_return(item,'review','guestReview','private')<br><br><br>    item['days_from_now'] = days_from_now<br>    item['days_from_now_absolute'] = Math.abs(days_from_now)<br>    item['days_difference'] = days_difference<br>    item['revenue_per_day'] = revenue_per_day<br>    item['run_rate'] = run_rate<br>    item['guest_name'] = guest_name<br>    item['listing_nick_name'] = item.listing.nickname||'null'<br>    item['listing_title'] = item.listing.title||'null'<br>    item['account_name'] = item.integration.object.nickname||'null'<br>    item['state'] = guest_state_determine(item)<br>    item['DT_RowId'] = item._id<br><br>    is_3009 = item['listing']['nickname'].indexOf(""2608"") != -1<br>    is_401 = item['listing']['nickname'].indexOf(""401"") != -1<br>    is_1806 = item['listing']['nickname'].indexOf(""1806"") != -1<br>    if (is_3009){<br>      item['room_number'] = '2608'<br>    }<br>    else if (is_401){<br>      item['room_number'] = '401'<br>    }<br>    else if (is_1806){<br>      item['room_number'] = '1806'<br>    }<br>    else{<br>      item['room_number'] = 'N/A'<br><br>    }<br>  }<br><br>",guest_reservation_dictionary_customize,api
guesty_functions.js, The below function pulls the data from the guesty,"// The below function pulls the data from the guesty<br>function guesty_reservation_data_pull(){<br>    key = '57b6349a1f211d3c4b2b4c886c5632c7'<br>    secret = '1b8e3bd1f42ce6b054868cd47dc0412f'<br>    reservations_url = 'https://superhostuser.herokuapp.com/api/v2/reservations'<br>    results = $.ajax<br>    ({<br>      type: ""GET"",<br>      url: reservations_url,<br>      dataType: 'json',<br>      async: false,<br>      data: {'viewId':'5616071779035e0e0096290c'},<br>      headers: {<br>        ""Authorization"": ""Basic "" + btoa(key + "":"" + secret)<br>    }<br>    });<br>    return results.responseJSON.results<br>    }",guesty_reservation_data_pull,api
guesty_functions.js,,"<br>function guesty_listing_data_pull(){<br>  response_result = $.ajax({type: ""GET"",<br>  url: 'https://superhostuser.herokuapp.com/api/v2/listings',<br>  dataType: 'json',<br>  async: false,<br>  headers: { ""Authorization"": ""Basic "" + btoa(""57b6349a1f211d3c4b2b4c886c5632c7:1b8e3bd1f42ce6b054868cd47dc0412f"")},<br>  data: {limit:50}<br>});<br>  array = response_result.responseJSON.results<br>  array.forEach(function(D){D['nickname'] = D['nickname']||'null'})<br>  return array ",guesty_listing_data_pull,api
guesty_functions.js,,"<br>function guesty_integration_data_pull(){<br>  json_response =  $.ajax({type: ""GET"",<br>    url: 'https://superhostuser.herokuapp.com/api/v2/integrations',<br>    dataType: 'json',<br>    async: false,<br>    headers: { ""Authorization"": ""Basic "" + btoa(""57b6349a1f211d3c4b2b4c886c5632c7:1b8e3bd1f42ce6b054868cd47dc0412f"")},<br>    data: {limit:25}<br>  }).responseJSON<br>  return json_response.results<br>}<br>",guesty_integration_data_pull,api
guesty_functions.js,create url for reservation for datatables functions,"//create url for reservation for datatables functions<br>function guesty_reservations_inbox_url_create(td, cellData, rowData, row, col) {<br>  url = ""https://app.guesty.com/reservations/"" + rowData.guestId + ""/inbox"";<br>  new_url = ""<a href='"" + url + ""'>"" + cellData + ""</a>"";<br>  console.log(new_url);<br>  return new_url;<br>}",guesty_reservations_inbox_url_create,api
guesty_functions.js,create user airbnb url for data tables,"//create user airbnb url for data tables<br>function guest_airbnb_url_create(data, type, row, meta) {<br>  url = ""https://www.airbnb.com/users/show/"" + row.id + """";<br>  data = '<a target=""_blank""  href=""' + url + '"">' + data + ""</a>"";<br>  return data;<br>}",guest_airbnb_url_create,api
todoist_functions.js,url create of todoist task from title and task id,"//url create of todoist task from title and task id<br>function html_link_from_todoist_task(task_title,task_id){<br>  url = 'https://en.todoist.com/app?lang=en#task%2F'+String(task_id)<br>  html_task = ""<a target='_blank' href='"" + url + ""'>"" + task_title + ""</a>""<br>  return html_task <br>}",html_link_from_todoist_task,api
todoist_functions.js,complete task in todoist,"//complete task in todoist<br>function task_complete_todoist(task_name,project_id,todoist_api_token){<br>  todoist_api_token = todoist_api_token || 'a14f98a6b546b044dbb84bcd8eee47fbe3788671'<br>  todoist_add_tasks_ajax(todoist_api_token,{""content"": task_name, ""project_id"": project_id},'item_complete')<br>}",task_complete_todoist,api
todoist_functions.js,update task in todoist,"//update task in todoist<br>function task_update_todoist(task_name,project_id,todoist_api_token){<br>  todoist_api_token = todoist_api_token || 'a14f98a6b546b044dbb84bcd8eee47fbe3788671'<br>  todoist_add_tasks_ajax(todoist_api_token,{""content"": task_name, ""project_id"": project_id},'item_update')",task_update_todoist,api
todoist_functions.js,create task in todoist,"//create task in todoist<br>function task_create_todoist(task_name,project_id,todoist_api_token){<br>  todoist_api_token = todoist_api_token || 'a14f98a6b546b044dbb84bcd8eee47fbe3788671'<br>  todoist_add_tasks_ajax(todoist_api_token,{""content"": task_name, ""project_id"": project_id})<br>}",task_create_todoist,api
todoist_functions.js,,"<br>function gspread_table_tasks_generate(gspread_array_data,completed_tasks,current_tasks){<br><br><br>    gspread_array_data.forEach(function(gspread_dict){<br>      filtered_completed_tasks = completed_tasks.filter(function(complete_dict){return complete_dict['content'].toLowerCase().indexOf(gspread_dict['Task'].toLowerCase()) != -1})<br>      filtered_completed_tasks_today = filtered_completed_tasks.filter(function(complete_dict){return date_range_filter(complete_dict.completed_date,'YY-MM-DD')})<br>      gspread_dict['duration_today'] = sum_float_convert_from_array(filtered_completed_tasks_today,'duration')<br>      gspread_dict['duration'] = sum_float_convert_from_array(filtered_completed_tasks,'duration')<br>      gspread_dict['completed_count'] = filtered_completed_tasks.length<br><br>      if (filtered_completed_tasks.length > 0){<br>        last_completed = _.max(filtered_completed_tasks, function(complete_dict){ return moment(complete_dict.completed_date).valueOf();}).completed_date<br>        days_since_completed = moment().diff(last_completed, 'days')<br>        gspread_dict['days_since_last_completed'] = days_since_completed<br>        gspread_dict['last_completed'] = moment(last_completed).format(""MM/DD hh:mm A"");<br>        is_good = parseFloat(gspread_dict['Max Age']) > days_since_completed<br>        if (is_good){<br>          gspread_dict['status'] = 'Green'<br>          gspread_dict['task_assigned'] = 'Green'<br><br>        }<br>        else {<br>        gspread_dict['status'] = 'Red'<br>        }<br>      }<br>      else {<br>        gspread_dict['last_completed'] = ''<br>        gspread_dict['days_since_last_completed'] = ''<br>        gspread_dict['status'] = 'N/A'<br><br>      }<br>      if (gspread_dict['status'] != 'Green'){<br><br>      filtered_current_tasks = current_tasks.filter(function(current_dict){return current_dict['content'].toLowerCase().indexOf(gspread_dict['Task'].toLowerCase()) != -1})<br>      is_assigned = filtered_current_tasks.length > 0<br>      if (is_assigned){<br>        filtered_current_tasks_with_due_date = filtered_current_tasks.filter(function(D){return D['due_date_utc'] != null})<br>        has_due_date = filtered_current_tasks_with_due_date.length > 0 <br>        if (has_due_date){<br>            gspread_dict['task_assigned'] = 'Green'<br><br>        }<br>        else {<br>            gspread_dict['task_assigned'] = 'Amber'<br><br>        }<br>      }<br><br>      else {<br>        gspread_dict['task_assigned'] = 'Red'<br><br>      }<br>    }<br><br><br>    })<br><br><br>    return gspread_array_data<br><br><br>}<br><br><br>",gspread_table_tasks_generate,api
todoist_functions.js,filter tasks for text,"//filter tasks for text<br>function task_filter_from_text(array,text){<br>  array = array.filter(function(D){return D.content.toLowerCase().indexOf(text.toLowerCase()) !== -1 })<br>  return array <br>}",task_filter_from_text,api
todoist_functions.js,filter tasks for text and return length,"//filter tasks for text and return length<br>function task_filter_text_calculate_count(array,text){<br>  array = array.filter(function(D){return D.content.toLowerCase().indexOf(text.toLowerCase()) !== -1 })<br>  length_total = array.length<br>    return length_total<br>  //$(div_id).html(length_total)<br>}",task_filter_text_calculate_count,api
todoist_functions.js,filter tasks for text and add the sum to a div,"//filter tasks for text and add the sum to a div<br>function task_filter_text_calculate_sum(array,text,sum_field){<br>  sum_field = sum_field||'duration'<br>  array = array.filter(function(D){return D.content.toLowerCase().indexOf(text.toLowerCase()) !== -1 })<br>  var sum_total = sum_float_convert_from_array_underscore(array,sum_field)<br>    return sum_total<br>}<br>",task_filter_text_calculate_sum,api
todoist_functions.js,calculate the cost of the task at 15 dollar per rate,"//calculate the cost of the task at 15 dollar per rate<br>function task_cost_calculation(item,key_name,hourly_rate){<br>  hourly_rate = hourly_rate||15<br>  key_name = key_name|| 'duration'<br>  minutes = parseFloat(item[key_name])<br>  cost = minutes * (hourly_rate/60)<br>  return cost <br>}",task_cost_calculation,api
todoist_functions.js,return the sub project by parsing it out from the colon,"//return the sub project by parsing it out from the colon<br>function sub_project_from_task(item){<br>  item_name = item.content <br>  sub_project = item_name.split("":"")[0].trim()<br>  is_sub_project = sub_project.indexOf(""|"") == -1 && sub_project.indexOf(""["") == -1  && sub_project.indexOf(""@"") == -1 <br>  if (is_sub_project){<br>    return sub_project //'-'<br>  }<br>  else {<br>    return '-'<br>  }<br>}",sub_project_from_task,api
todoist_functions.js,return duration from the task name,"//return duration from the task name<br>function duration_from_task_dictionary(item){<br>  item_name = item.content <br>  item_has_time = item_name.indexOf(""|"") != -1 && item_name.indexOf(""["") != -1 && item_name.indexOf(""]"") != -1<br>  if (item_has_time){<br>    var duration =parseInt(item_name.substring(item_name.lastIndexOf(""|"")+1,item_name.lastIndexOf(""min"")));<br>  }<br>  else {<br>    duration = 0<br>  }<br>  return duration<br>}<br>",duration_from_task_dictionary,api
todoist_functions.js,customize each dictionary of todoist task for additional attributes,"//customize each dictionary of todoist task for additional attributes<br>function tasks_array_customize_item(item){<br>  item['sub_project'] = sub_project_from_task(item)//item_name.split("":"")[0].trim()<br>  item['duration'] = duration_from_task_dictionary(item)<br>  item['cost'] = task_cost_calculation(item)<br>  item[""DT_RowId""] = item.id;<br>  return item <br>}<br>",tasks_array_customize_item,api
todoist_functions.js,https://stackoverflow.com/questions/49394588/how-to-create-todoist-task-using-todoist-api-v7,"//https://stackoverflow.com/questions/49394588/how-to-create-todoist-task-using-todoist-api-v7<br> function todoist_add_tasks_ajax(todoist_api_token,tasks,type,sync_token) {<br>  var sync_token = sync_token||""*""<br>  type = type || ""item_add""//item_update<br><br>  tasks_is_list_array = Array.isArray(tasks)<br>  if (!tasks_is_list_array){<br>    tasks = [tasks]<br>  }<br>  var commands = todoist_tasks_to_commands(tasks,type);<br>  var data = {<br>    ""token"" : todoist_api_token,<br>    'sync_token' : sync_token,<br>    'resource_types' : '[""projects"", ""items""]',<br>    'commands' : commands<br>  };<br>  <br>  return jQuery.ajax({<br>    url: ""https://todoist.com/api/v7/sync"",<br>    data: data,<br>    type: ""POST"",<br>    dataType: ""json"",<br>    success: function(response) {<br>      console.log(response);<br>      sync_token = response.sync_token;<br>    },<br>    error: function(response) { <br>      console.log(response);<br>    },<br>  });<br>  <br>}",todoist_add_tasks_ajax,api
todoist_functions.js,"commands to to doist, item_update,item_add, item_complete, item_delete","//commands to to doist, item_update,item_add, item_complete, item_delete<br>function todoist_tasks_to_commands(tasks,type) {<br>  type = type || ""item_add""//item_update<br>  var commands = [];<br>  <br>  tasks.forEach(function(args) {<br>    <br>    var temp_commands = {<br>      ""type"": type,<br>      ""temp_id"": create_guid(),<br>      ""uuid"": create_guid(),<br>      ""args"": args<br>    };<br><br>    commands.push(temp_commands)<br><br>  });<br>  <br>  commands = JSON.stringify(commands);<br>  <br>  return commands;<br>  <br>}<br>",todoist_tasks_to_commands,api
todoist_functions.js,get current tasks ,"//get current tasks <br>function todoist_current_tasks_pull(){<br> return $.ajax({<br>      type: ""GET"",<br>      url: 'https://en.todoist.com/api/v7/sync/',<br>      dataType: 'json',<br>      async: false,<br>      data: {<br>        'token': 'a14f98a6b546b044dbb84bcd8eee47fbe3788671',<br>        'sync_token':'*',<br>        'resource_types':'[""items"",""labels"",""projects""]'<br>      }<br>    }).responseJSON<br>}",todoist_current_tasks_pull,api
todoist_functions.js,get current tasks customized with project name and label name,//get current tasks customized with project name and label name<br>function todoist_current_tasks_pull_custom(){<br>  current_tasks_base = todoist_current_tasks_pull()<br>  current_tasks = current_tasks_base.items <br>  labels_dictionary = current_tasks_base.labels<br>  labels_dictionary = array_to_dictionary(labels_dictionary) <br>  projects_dictionary = current_tasks_base.projects <br>  current_tasks.forEach(function(D){tasks_array_customize_item(D)})<br>  return current_tasks<br>},todoist_current_tasks_pull_custom,api
todoist_functions.js,update tasks,"//update tasks<br>function todoist_update_task(task_id,content){<br>  return $.ajax({<br>      type: ""GET"",<br>      url: 'https://en.todoist.com/api/v7/sync/',<br>      dataType: 'json',<br>      async: false,<br>      data: {<br>        'token': 'a14f98a6b546b044dbb84bcd8eee47fbe3788671',<br>        'sync_token':'*',<br>        'resource_types':'[""items""]',<br>        'commands':'[{""type"": ""item_update"", ""uuid"": ""f8539c77-7fd7-4846-afad-3b201f0be8a5"", ""args"": {""id"": '+String(task_id)+',""content"":""'+content+'"" }}]'<br>      }<br>    })<br>}",todoist_update_task,api
todoist_functions.js,completes todoist task,"//completes todoist task<br>function todoist_complete_task(task_id){<br>  return $.ajax({<br>      type: ""GET"",<br>      url: 'https://en.todoist.com/api/v7/sync/',<br>      dataType: 'json',<br>      async: false,<br>      data: {<br>        'token': 'a14f98a6b546b044dbb84bcd8eee47fbe3788671',<br>        'sync_token':'*',<br>        'resource_types':'[""items""]',<br>        'commands':'[{""type"": ""item_complete"", ""uuid"": ""f8539c77-7fd7-4846-afad-3b201f0be8a5"", ""args"": {""ids"": ['+String(task_id)+']}}]'<br>      }<br>    })<br>}<br>",todoist_complete_task,api
todoist_functions.js,deletes todoist task,"//deletes todoist task<br>function todoist_delete_task(task_id){<br>  return $.ajax({<br>      type: ""GET"",<br>      url: 'https://en.todoist.com/api/v7/sync/',<br>      dataType: 'json',<br>      async: false,<br>      data: {<br>        'token': 'a14f98a6b546b044dbb84bcd8eee47fbe3788671',<br>        'sync_token':'*',<br>        'resource_types':'[""items""]',<br>        'commands':'[{""type"": ""item_delete"", ""uuid"": ""f8539c77-7fd7-4846-afad-3b201f0be8a5"", ""args"": {""ids"": ['+String(task_id)+']}}]'<br>      }<br>    })<br>}<br>",todoist_delete_task,api
todoist_functions.js,child function of todoist_completed_tasks_all,"//child function of todoist_completed_tasks_all<br>function todoist_completed_tasks_with_offset(todoist_api_token,offset,since) {<br>  since = since||'2018-04-28T10:00'<br>    results = $.ajax({<br>      type: ""GET"",<br>      url: 'https://en.todoist.com/api/v7/completed/get_all',<br>      dataType: 'json',<br>      async: false,<br>      data: {<br>        'token': todoist_api_token,<br>        'since':since,<br>        //'since': '2017-12-30T10:00',<br><br>        'limit':'50',<br>        'offset':offset<br>      }<br>    });<br>    return results.responseJSON.items<br>  }<br><br><br>//Since todoist only lets you pull 50 tasks at a time, we're going to use a loop to get the first 50, then the second 50, then the third 50 tasks, etc. <br>//when it's pulling empty lists, it can stop ",todoist_completed_tasks_with_offset,api
todoist_functions.js,pulls all of todoist tasks ,"//pulls all of todoist tasks <br>function todoist_completed_tasks_all(todoist_api_token,since){<br>  todoist_api_token = todoist_api_token||""a14f98a6b546b044dbb84bcd8eee47fbe3788671""//""fea02db7fc04ee9c9bd7c2a67c3d9de1cfa57941"" //karina api token<br>  todoist_tasks_pulled = []<br>  iterator = 0 <br>  master_list = []<br>  while (todoist_tasks_pulled.length == 50|| iterator==0) { //if todoist pulls 50 tasks, then it should try again. when it pulls less, we know that it's the last loop we need to do. since the first loop will be less than 50 tasks length, i put in or clause that is iterator is 0 which will only be when it does the first loop<br>    limit_variable = 50 * iterator //this will go into the todoist completed tasks query<br>    todoist_tasks_pulled = todoist_completed_tasks_with_offset(todoist_api_token,limit_variable,since)//this is the list of tasks <br>    master_list = master_list.concat(todoist_tasks_pulled)<br>    iterator += 1; //this will be 1 in the first loop, 2 in the second loop, etc. <br>  }<br>  return master_list<br>}<br><br>",todoist_completed_tasks_all,api
todoist_functions.js,pulls all the todoist tasks and customizes each item,"//pulls all the todoist tasks and customizes each item<br>function todoist_completed_tasks_all_custom(todoist_api_token,since){<br>  l = todoist_completed_tasks_all(todoist_api_token,since)<br>  l.forEach(function(item){tasks_array_customize_item(item)})<br>  return l <br>}",todoist_completed_tasks_all_custom,api
todoist_functions.js,converts minute labels to minutes,"//converts minute labels to minutes<br>function labels_add_from_labels_dictionary(task_item,labels_dictionary){<br>  labels_list = task_item.labels<br>  label_list_is_undefined = labels_list == undefined<br>  if (label_list_is_undefined){<br>    r = 0 <br>  }<br>  try {<br>    r = 0 <br>    labels_list.forEach(function(item,index){<br>      label_dict = labels_dictionary[item]<br>      minute_number = label_dict.minute||label_minute_string_to_integer(label_dict.name)<br>      r = r + minute_number<br>    })<br>  }<br>  catch(err) {<br>    r = 0<br>  }<br><br>   task_item['duration'] = task_item['duration']||r <br>",labels_add_from_labels_dictionary,api
todoist_functions.js,,"<br>function project_name_append(item,projects_dictionary){<br>  <br>  item_project_dictionary = _.groupBy(projects_dictionary,'id')[item.project_id]<br>  if (item_project_dictionary != undefined){<br>    project_name = item_project_dictionary[0].name<br>  }<br>  else {<br>    project_name = 'null'<br>  }<br>  item['project_name'] = project_name<br>}",project_name_append,api
todoist_functions.js,get dictionary of current_tasks and completed_tasks,"//get dictionary of current_tasks and completed_tasks<br>function todoist_tasks_pull_custom(){<br>  current_tasks_base = todoist_current_tasks_pull()<br>  completed_tasks = todoist_completed_tasks_all()<br>  current_tasks = current_tasks_base.items <br>  labels_dictionary = array_to_dictionary(current_tasks_base.labels) <br>  projects_dictionary = current_tasks_base.projects <br><br><br>  current_tasks.forEach(function(D){D['task_type']='current'})<br>  current_tasks.forEach(function(D){D['task_date']=D['due_date_utc']})<br>  completed_tasks.forEach(function(D){D['task_type']='completed'})<br>  completed_tasks.forEach(function(D){D['task_date']=D['completed_date']})<br><br><br><br>  current_completed_tasks = completed_tasks.concat(current_tasks) //combine both arrays together into one array<br>  current_completed_tasks.forEach(function(item){tasks_array_customize_item(item)})<br>  current_completed_tasks.forEach(function(item){labels_add_from_labels_dictionary(item,labels_dictionary)})<br>  current_completed_tasks.forEach(function(item){project_name_append(item,projects_dictionary)})<br>  current_completed_tasks.forEach(function(item){item['task_date_range'] = date_within_range_string_create(item['task_date'])})<br><br>  array_check_keys(current_completed_tasks,['due_date_utc','priority','date_added','completed_date'])<br>  return current_completed_tasks <br>}<br><br>",todoist_tasks_pull_custom,api
todoist_functions.js,get dictionary of current_tasks and completed_tasks,"//get dictionary of current_tasks and completed_tasks<br>function todoist_tasks_pull_custom_gspread(){<br><br><br>  current_tasks_base = todoist_current_tasks_pull()<br>  completed_tasks = todoist_completed_tasks_all()<br>  current_tasks = current_tasks_base.items <br>  labels_dictionary = array_to_dictionary(current_tasks_base.labels) <br>  projects_dictionary = current_tasks_base.projects <br><br><br>  current_tasks.forEach(function(D){D['task_type']='current'})<br>  current_tasks.forEach(function(D){D['task_date']=D['due_date_utc']})<br>  completed_tasks.forEach(function(D){D['task_type']='completed'})<br>  completed_tasks.forEach(function(D){D['task_date']=D['completed_date']})<br><br><br>  sheet_name = 'Tasks'<br>  spreadsheet_id = ""1-tszr-k0KcENCI5J4LfCOybmqpLtvsijeUvfJbC9bu0""<br>  gspread_array_data = gspread_array_pull(sheet_name,spreadsheet_id)<br><br><br><br>  <br>  gspread_array = gspread_table_tasks_generate(gspread_array_data,completed_tasks,current_tasks)<br><br><br><br>  current_completed_tasks = completed_tasks.concat(current_tasks) //combine both arrays together into one array<br>  current_completed_tasks.forEach(function(item){tasks_array_customize_item(item)})<br>  current_completed_tasks.forEach(function(item){labels_add_from_labels_dictionary(item,labels_dictionary)})<br>  current_completed_tasks.forEach(function(item){project_name_append(item,projects_dictionary)})<br>  current_completed_tasks.forEach(function(item){item['task_date_range'] = date_within_range_string_create(item['task_date'])})<br><br><br><br><br><br><br><br>  array_check_keys(current_completed_tasks,['due_date_utc','priority','date_added','completed_date'])<br>  return {todoist:current_completed_tasks,gspread:gspread_array,projects:projects_dictionary,labels:labels_dictionary}<br>}<br><br><br><br><br>",todoist_tasks_pull_custom_gspread,api
toggl_functions.js,pulls from toggl with custom fields,//pulls from toggl with custom fields<br>function toggl_data_pull_custom(since){<br>  array = toggl_data_pull(since)<br>  array.forEach(function(item){<br>    minutes  = (parseFloat(item.dur)/1000)/60<br>    cost = minutes * (15/60)<br>    item['cost'] = cost//.toFixed(2)<br>    item['minutes'] = minutes//.toFixed(2)<br>    item['hours'] = minutes/60<br>  })<br>  return array<br>}<br>,toggl_data_pull_custom,api
toggl_functions.js,,"<br>function toggl_data_pull_iterate(since,page){<br>  since = since||""2018-04-28""<br>  secret = ""api_token""<br>  key = ""a764cd7b58fea643f44ef579b606168d""<br>  json_response = $.ajax({<br>  type: ""GET"",<br>  url: ""https://toggl.com/reports/api/v2/details"",<br>  headers: {""Authorization"": ""Basic "" + btoa(key + "":"" + secret)},<br>  dataType: 'json',<br>  async: false,<br>  data: {<br>    user_agent:""kcruz29@gmail.com"",<br>    workspace_id:""246697"",<br>    since:since,<br>    page:page<br>}<br>  }).responseJSON.data<br>  return json_response<br>}<br>",toggl_data_pull_iterate,api
toggl_functions.js,,"<br>function toggl_data_pull(since){<br>since = since||""2018-04-28""<br>  todoist_tasks_pulled = []<br>  iterator = 0 <br>  master_list = []<br>  while (todoist_tasks_pulled.length == 50 || iterator==0) { //if todoist pulls 50 tasks, then it should try again. when it pulls less, we know that it's the last loop we need to do. since the first loop will be less than 50 tasks length, i put in or clause that is iterator is 0 which will only be when it does the first loop<br>    limit_variable = iterator + 1//this will go into the todoist completed tasks query<br>    todoist_tasks_pulled = toggl_data_pull_iterate(since,limit_variable)<br>    master_list = master_list.concat(todoist_tasks_pulled)<br>    iterator += 1; //this will be 1 in the first loop, 2 in the second loop, etc. <br>  }<br>  return master_list<br>}",toggl_data_pull,api
